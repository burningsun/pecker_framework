; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	F:\codes\pecker_framework_git\pecker_src\pecker_framework\native\pecker_thread.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??0pecker_critical_section@pecker_sdk@@QAE@XZ	; pecker_sdk::pecker_critical_section::pecker_critical_section
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\native\pecker_thread.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0pecker_critical_section@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0pecker_critical_section@pecker_sdk@@QAE@XZ PROC	; pecker_sdk::pecker_critical_section::pecker_critical_section, COMDAT
; _this$ = ecx

; 15   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 0

; 16   : #ifdef ANDROID_OS
; 17   : 
; 18   : #else
; 19   : #ifdef WINDOWS_PC
; 20   : 	::InitializeCriticalSection(&_M_critical_section);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__InitializeCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 21   : #endif
; 22   : #endif
; 23   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0pecker_critical_section@pecker_sdk@@QAE@XZ ENDP	; pecker_sdk::pecker_critical_section::pecker_critical_section
_TEXT	ENDS
PUBLIC	?leave_critical_section@pecker_critical_section@pecker_sdk@@QAEJXZ ; pecker_sdk::pecker_critical_section::leave_critical_section
PUBLIC	??1pecker_critical_section@pecker_sdk@@QAE@XZ	; pecker_sdk::pecker_critical_section::~pecker_critical_section
EXTRN	__imp__DeleteCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1pecker_critical_section@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1pecker_critical_section@pecker_sdk@@QAE@XZ PROC	; pecker_sdk::pecker_critical_section::~pecker_critical_section, COMDAT
; _this$ = ecx

; 26   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 27   : #ifdef ANDROID_OS
; 28   : 
; 29   : #else
; 30   : #ifdef WINDOWS_PC
; 31   : 	leave_critical_section();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?leave_critical_section@pecker_critical_section@pecker_sdk@@QAEJXZ ; pecker_sdk::pecker_critical_section::leave_critical_section

; 32   : 	::DeleteCriticalSection(&_M_critical_section);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 33   : #endif
; 34   : #endif
; 35   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1pecker_critical_section@pecker_sdk@@QAE@XZ ENDP	; pecker_sdk::pecker_critical_section::~pecker_critical_section
_TEXT	ENDS
PUBLIC	?enter_critical_section@pecker_critical_section@pecker_sdk@@QAEJXZ ; pecker_sdk::pecker_critical_section::enter_critical_section
EXTRN	__imp__EnterCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?enter_critical_section@pecker_critical_section@pecker_sdk@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?enter_critical_section@pecker_critical_section@pecker_sdk@@QAEJXZ PROC ; pecker_sdk::pecker_critical_section::enter_critical_section, COMDAT
; _this$ = ecx

; 38   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   : #ifdef ANDROID_OS
; 40   : 
; 41   : #else
; 42   : #ifdef WINDOWS_PC
; 43   : 	::EnterCriticalSection(&_M_critical_section);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 44   : 	_M_is_enter_critical_section = BOOL_TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 1

; 45   : #endif
; 46   : #endif
; 47   : 	return P_OK;

	xor	eax, eax

; 48   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?enter_critical_section@pecker_critical_section@pecker_sdk@@QAEJXZ ENDP ; pecker_sdk::pecker_critical_section::enter_critical_section
_TEXT	ENDS
EXTRN	__imp__LeaveCriticalSection@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?leave_critical_section@pecker_critical_section@pecker_sdk@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?leave_critical_section@pecker_critical_section@pecker_sdk@@QAEJXZ PROC ; pecker_sdk::pecker_critical_section::leave_critical_section, COMDAT
; _this$ = ecx

; 50   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : #ifdef ANDROID_OS
; 52   : 
; 53   : #else
; 54   : #ifdef WINDOWS_PC
; 55   : 	if (BOOL_TRUE == _M_is_enter_critical_section)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	cmp	ecx, 1
	jne	SHORT $LN1@leave_crit

; 56   : 	{
; 57   : 		_M_is_enter_critical_section = BOOL_FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 0

; 58   : 		::LeaveCriticalSection(&_M_critical_section);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@leave_crit:

; 59   : 	}
; 60   : 
; 61   : #endif
; 62   : #endif
; 63   : 	return P_OK;

	xor	eax, eax

; 64   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?leave_critical_section@pecker_critical_section@pecker_sdk@@QAEJXZ ENDP ; pecker_sdk::pecker_critical_section::leave_critical_section
_TEXT	ENDS
PUBLIC	??0pecker_critical_lock@pecker_sdk@@QAE@XZ	; pecker_sdk::pecker_critical_lock::pecker_critical_lock
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_critical_lock@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0pecker_critical_lock@pecker_sdk@@QAE@XZ PROC		; pecker_sdk::pecker_critical_lock::pecker_critical_lock, COMDAT
; _this$ = ecx

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 74   : 
; 75   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0pecker_critical_lock@pecker_sdk@@QAE@XZ ENDP		; pecker_sdk::pecker_critical_lock::pecker_critical_lock
_TEXT	ENDS
PUBLIC	?unlock@pecker_critical_lock@pecker_sdk@@QAEJXZ	; pecker_sdk::pecker_critical_lock::unlock
PUBLIC	??1pecker_critical_lock@pecker_sdk@@QAE@XZ	; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1pecker_critical_lock@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1pecker_critical_lock@pecker_sdk@@QAE@XZ PROC		; pecker_sdk::pecker_critical_lock::~pecker_critical_lock, COMDAT
; _this$ = ecx

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 	unlock();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?unlock@pecker_critical_lock@pecker_sdk@@QAEJXZ ; pecker_sdk::pecker_critical_lock::unlock

; 79   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1pecker_critical_lock@pecker_sdk@@QAE@XZ ENDP		; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
_TEXT	ENDS
PUBLIC	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z
_TEXT	SEGMENT
_hresult$65920 = -20					; size = 4
_this$ = -8						; size = 4
_pcritical_section$ = 8					; size = 4
?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z PROC ; pecker_sdk::pecker_critical_lock::lock, COMDAT
; _this$ = ecx

; 82   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 83   : 	if (null != pcritical_section)

	cmp	DWORD PTR _pcritical_section$[ebp], 0
	je	SHORT $LN1@lock

; 84   : 	{
; 85   : 		HResult hresult = pcritical_section->enter_critical_section();

	mov	ecx, DWORD PTR _pcritical_section$[ebp]
	call	?enter_critical_section@pecker_critical_section@pecker_sdk@@QAEJXZ ; pecker_sdk::pecker_critical_section::enter_critical_section
	mov	DWORD PTR _hresult$65920[ebp], eax

; 86   : 		_M_bind_critial_section = pcritical_section;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pcritical_section$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@lock:

; 87   : 	}
; 88   : 	return P_ERR;

	or	eax, -1

; 89   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ENDP ; pecker_sdk::pecker_critical_lock::lock
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?unlock@pecker_critical_lock@pecker_sdk@@QAEJXZ
_TEXT	SEGMENT
_ptemp_critial_section_pointer$65925 = -20		; size = 4
_this$ = -8						; size = 4
?unlock@pecker_critical_lock@pecker_sdk@@QAEJXZ PROC	; pecker_sdk::pecker_critical_lock::unlock, COMDAT
; _this$ = ecx

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 	if (null != _M_bind_critial_section)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@unlock

; 94   : 	{
; 95   : 		pecker_critical_section* ptemp_critial_section_pointer = _M_bind_critial_section;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ptemp_critial_section_pointer$65925[ebp], ecx

; 96   : 		_M_bind_critial_section = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 97   : 		return ptemp_critial_section_pointer->leave_critical_section();

	mov	ecx, DWORD PTR _ptemp_critial_section_pointer$65925[ebp]
	call	?leave_critical_section@pecker_critical_section@pecker_sdk@@QAEJXZ ; pecker_sdk::pecker_critical_section::leave_critical_section
	jmp	SHORT $LN2@unlock
$LN1@unlock:

; 98   : 	}
; 99   : 	return P_ERR;

	or	eax, -1
$LN2@unlock:

; 100  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?unlock@pecker_critical_lock@pecker_sdk@@QAEJXZ ENDP	; pecker_sdk::pecker_critical_lock::unlock
_TEXT	ENDS
PUBLIC	??_7pecker_thread_base@pecker_sdk@@6B@		; pecker_sdk::pecker_thread_base::`vftable'
PUBLIC	??0pecker_thread_base@pecker_sdk@@QAE@XZ	; pecker_sdk::pecker_thread_base::pecker_thread_base
PUBLIC	??_R4pecker_thread_base@pecker_sdk@@6B@		; pecker_sdk::pecker_thread_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVpecker_thread_base@pecker_sdk@@@8	; pecker_sdk::pecker_thread_base `RTTI Type Descriptor'
PUBLIC	??_R3pecker_thread_base@pecker_sdk@@8		; pecker_sdk::pecker_thread_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2pecker_thread_base@pecker_sdk@@8		; pecker_sdk::pecker_thread_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@pecker_thread_base@pecker_sdk@@8	; pecker_sdk::pecker_thread_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?start_thread@pecker_thread_base@pecker_sdk@@UAEJPAUIpecker_runable@2@PAU_SECURITY_ATTRIBUTES@@HJ@Z ; pecker_sdk::pecker_thread_base::start_thread
PUBLIC	?start_thread@pecker_thread_base@pecker_sdk@@UAEJP6GKPAX@Z0PAU_SECURITY_ATTRIBUTES@@HJ@Z ; pecker_sdk::pecker_thread_base::start_thread
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Epecker_thread_base@pecker_sdk@@UAEPAXI@Z:PROC ; pecker_sdk::pecker_thread_base::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@pecker_thread_base@pecker_sdk@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@pecker_thread_base@pecker_sdk@@8 DD FLAT:??_R0?AVpecker_thread_base@pecker_sdk@@@8 ; pecker_sdk::pecker_thread_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3pecker_thread_base@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R2pecker_thread_base@pecker_sdk@@8
rdata$r	SEGMENT
??_R2pecker_thread_base@pecker_sdk@@8 DD FLAT:??_R1A@?0A@EA@pecker_thread_base@pecker_sdk@@8 ; pecker_sdk::pecker_thread_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3pecker_thread_base@pecker_sdk@@8
rdata$r	SEGMENT
??_R3pecker_thread_base@pecker_sdk@@8 DD 00H		; pecker_sdk::pecker_thread_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2pecker_thread_base@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVpecker_thread_base@pecker_sdk@@@8
_DATA	SEGMENT
??_R0?AVpecker_thread_base@pecker_sdk@@@8 DD FLAT:??_7type_info@@6B@ ; pecker_sdk::pecker_thread_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVpecker_thread_base@pecker_sdk@@', 00H
_DATA	ENDS
;	COMDAT ??_R4pecker_thread_base@pecker_sdk@@6B@
rdata$r	SEGMENT
??_R4pecker_thread_base@pecker_sdk@@6B@ DD 00H		; pecker_sdk::pecker_thread_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVpecker_thread_base@pecker_sdk@@@8
	DD	FLAT:??_R3pecker_thread_base@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_7pecker_thread_base@pecker_sdk@@6B@
CONST	SEGMENT
??_7pecker_thread_base@pecker_sdk@@6B@ DD FLAT:??_R4pecker_thread_base@pecker_sdk@@6B@ ; pecker_sdk::pecker_thread_base::`vftable'
	DD	FLAT:??_Epecker_thread_base@pecker_sdk@@UAEPAXI@Z
	DD	FLAT:?start_thread@pecker_thread_base@pecker_sdk@@UAEJPAUIpecker_runable@2@PAU_SECURITY_ATTRIBUTES@@HJ@Z
	DD	FLAT:?start_thread@pecker_thread_base@pecker_sdk@@UAEJP6GKPAX@Z0PAU_SECURITY_ATTRIBUTES@@HJ@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0pecker_thread_base@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0pecker_thread_base@pecker_sdk@@QAE@XZ PROC		; pecker_sdk::pecker_thread_base::pecker_thread_base, COMDAT
; _this$ = ecx

; 108  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7pecker_thread_base@pecker_sdk@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 109  : 
; 110  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0pecker_thread_base@pecker_sdk@@QAE@XZ ENDP		; pecker_sdk::pecker_thread_base::pecker_thread_base
_TEXT	ENDS
PUBLIC	??1pecker_thread_base@pecker_sdk@@UAE@XZ	; pecker_sdk::pecker_thread_base::~pecker_thread_base
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gpecker_thread_base@pecker_sdk@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gpecker_thread_base@pecker_sdk@@UAEPAXI@Z PROC	; pecker_sdk::pecker_thread_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1pecker_thread_base@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_thread_base::~pecker_thread_base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gpecker_thread_base@pecker_sdk@@UAEPAXI@Z ENDP	; pecker_sdk::pecker_thread_base::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?terminate_thread@pecker_thread_base@pecker_sdk@@QAEJK@Z ; pecker_sdk::pecker_thread_base::terminate_thread
PUBLIC	?get_thread_exit_code@pecker_thread_base@pecker_sdk@@QBEJAAK@Z ; pecker_sdk::pecker_thread_base::get_thread_exit_code
PUBLIC	?join_thread@pecker_thread_base@pecker_sdk@@QAEJK@Z ; pecker_sdk::pecker_thread_base::join_thread
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1pecker_thread_base@pecker_sdk@@UAE@XZ
_TEXT	SEGMENT
_exit_code$65938 = -32					; size = 4
_join_result$ = -20					; size = 4
_this$ = -8						; size = 4
??1pecker_thread_base@pecker_sdk@@UAE@XZ PROC		; pecker_sdk::pecker_thread_base::~pecker_thread_base, COMDAT
; _this$ = ecx

; 113  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7pecker_thread_base@pecker_sdk@@6B@

; 114  : 	HResult join_result = this->join_thread(1000);

	push	1000					; 000003e8H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?join_thread@pecker_thread_base@pecker_sdk@@QAEJK@Z ; pecker_sdk::pecker_thread_base::join_thread
	mov	DWORD PTR _join_result$[ebp], eax

; 115  : 	if (P_OK != join_result)

	cmp	DWORD PTR _join_result$[ebp], 0
	je	SHORT $LN3@pecker_thr

; 116  : 	{
; 117  : 		Ulong exit_code;
; 118  : 		if (P_OK == get_thread_exit_code(exit_code))

	lea	eax, DWORD PTR _exit_code$65938[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_thread_exit_code@pecker_thread_base@pecker_sdk@@QBEJAAK@Z ; pecker_sdk::pecker_thread_base::get_thread_exit_code
	test	eax, eax
	jne	SHORT $LN3@pecker_thr

; 119  : 		{
; 120  : 			terminate_thread(exit_code);

	mov	eax, DWORD PTR _exit_code$65938[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?terminate_thread@pecker_thread_base@pecker_sdk@@QAEJK@Z ; pecker_sdk::pecker_thread_base::terminate_thread
$LN3@pecker_thr:

; 121  : 		}
; 122  : 	}
; 123  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@pecker_thr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@pecker_thr:
	DD	1
	DD	$LN6@pecker_thr
$LN6@pecker_thr:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@pecker_thr
$LN5@pecker_thr:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
??1pecker_thread_base@pecker_sdk@@UAE@XZ ENDP		; pecker_sdk::pecker_thread_base::~pecker_thread_base
_TEXT	ENDS
PUBLIC	?exit_current_thread@pecker_thread_base@pecker_sdk@@SAXK@Z ; pecker_sdk::pecker_thread_base::exit_current_thread
EXTRN	__imp__ExitThread@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?exit_current_thread@pecker_thread_base@pecker_sdk@@SAXK@Z
_TEXT	SEGMENT
_exit_code$ = 8						; size = 4
?exit_current_thread@pecker_thread_base@pecker_sdk@@SAXK@Z PROC ; pecker_sdk::pecker_thread_base::exit_current_thread, COMDAT

; 127  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 128  : #ifdef WINDOWS_PC
; 129  : 	::ExitThread(exit_code);

	mov	esi, esp
	mov	eax, DWORD PTR _exit_code$[ebp]
	push	eax
	call	DWORD PTR __imp__ExitThread@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@exit_curre:

; 130  : #endif
; 131  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?exit_current_thread@pecker_thread_base@pecker_sdk@@SAXK@Z ENDP ; pecker_sdk::pecker_thread_base::exit_current_thread
_TEXT	ENDS
PUBLIC	?sleep@pecker_thread_base@pecker_sdk@@SAXK@Z	; pecker_sdk::pecker_thread_base::sleep
EXTRN	__imp__Sleep@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?sleep@pecker_thread_base@pecker_sdk@@SAXK@Z
_TEXT	SEGMENT
_wait_milisec_time$ = 8					; size = 4
?sleep@pecker_thread_base@pecker_sdk@@SAXK@Z PROC	; pecker_sdk::pecker_thread_base::sleep, COMDAT

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 135  : #ifdef WINDOWS_PC
; 136  : 	::Sleep(wait_milisec_time);

	mov	esi, esp
	mov	eax, DWORD PTR _wait_milisec_time$[ebp]
	push	eax
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 137  : #endif
; 138  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sleep@pecker_thread_base@pecker_sdk@@SAXK@Z ENDP	; pecker_sdk::pecker_thread_base::sleep
_TEXT	ENDS
PUBLIC	?get_current_thread_id@pecker_thread_base@pecker_sdk@@SAKXZ ; pecker_sdk::pecker_thread_base::get_current_thread_id
EXTRN	__imp__GetCurrentThreadId@0:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?get_current_thread_id@pecker_thread_base@pecker_sdk@@SAKXZ
_TEXT	SEGMENT
?get_current_thread_id@pecker_thread_base@pecker_sdk@@SAKXZ PROC ; pecker_sdk::pecker_thread_base::get_current_thread_id, COMDAT

; 141  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 142  : #ifdef WINDOWS_PC
; 143  : 	return ::GetCurrentThreadId();

	mov	esi, esp
	call	DWORD PTR __imp__GetCurrentThreadId@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN1@get_curren

; 144  : #endif
; 145  : 	return 0;

	xor	eax, eax
$LN1@get_curren:

; 146  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?get_current_thread_id@pecker_thread_base@pecker_sdk@@SAKXZ ENDP ; pecker_sdk::pecker_thread_base::get_current_thread_id
_TEXT	ENDS
EXTRN	__imp__CreateThread@24:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?start_thread@pecker_thread_base@pecker_sdk@@UAEJP6GKPAX@Z0PAU_SECURITY_ATTRIBUTES@@HJ@Z
_TEXT	SEGMENT
_result_value$ = -20					; size = 4
_this$ = -8						; size = 4
_pthread_proc$ = 8					; size = 4
_proc_params$ = 12					; size = 4
_pattribute$ = 16					; size = 4
_thread_stack_size$ = 20				; size = 4
_thread_creation_flag$ = 24				; size = 4
?start_thread@pecker_thread_base@pecker_sdk@@UAEJP6GKPAX@Z0PAU_SECURITY_ATTRIBUTES@@HJ@Z PROC ; pecker_sdk::pecker_thread_base::start_thread, COMDAT
; _this$ = ecx

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 150  : 	HResult result_value;
; 151  : #ifdef WINDOWS_PC
; 152  : 	if (NULL == _M_hthread)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@start_thre

; 153  : 	{
; 154  : 		_M_hthread = ::CreateThread(pattribute,thread_stack_size,pthread_proc,proc_params,thread_creation_flag,&_M_thread_id);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _thread_creation_flag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _proc_params$[ebp]
	push	edx
	mov	eax, DWORD PTR _pthread_proc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _thread_stack_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pattribute$[ebp]
	push	edx
	call	DWORD PTR __imp__CreateThread@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 155  : 		if (NULL != _M_hthread)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@start_thre

; 156  : 		{
; 157  : 			result_value = P_OK;

	mov	DWORD PTR _result_value$[ebp], 0

; 158  : 		}
; 159  : 		else

	jmp	SHORT $LN2@start_thre
$LN3@start_thre:

; 160  : 		{
; 161  : 			result_value = P_FAIL;

	mov	DWORD PTR _result_value$[ebp], 1
$LN2@start_thre:

; 162  : 		}
; 163  : 	}
; 164  : 	else

	jmp	SHORT $LN1@start_thre
$LN4@start_thre:

; 165  : 	{
; 166  : 		result_value = P_RUNNING_WAIT;

	mov	DWORD PTR _result_value$[ebp], 9
$LN1@start_thre:

; 167  : 	}
; 168  : 
; 169  : #endif
; 170  : 	return result_value;

	mov	eax, DWORD PTR _result_value$[ebp]

; 171  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?start_thread@pecker_thread_base@pecker_sdk@@UAEJP6GKPAX@Z0PAU_SECURITY_ATTRIBUTES@@HJ@Z ENDP ; pecker_sdk::pecker_thread_base::start_thread
_TEXT	ENDS
PUBLIC	?pecker_runable_thread_function@pecker_sdk@@YGKPAX@Z ; pecker_sdk::pecker_runable_thread_function
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?pecker_runable_thread_function@pecker_sdk@@YGKPAX@Z
_TEXT	SEGMENT
_pthread_target$ = -8					; size = 4
_lpParam$ = 8						; size = 4
?pecker_runable_thread_function@pecker_sdk@@YGKPAX@Z PROC ; pecker_sdk::pecker_runable_thread_function, COMDAT

; 175  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 176  : 	Ipecker_runable* pthread_target = (Ipecker_runable*)lpParam;

	mov	eax, DWORD PTR _lpParam$[ebp]
	mov	DWORD PTR _pthread_target$[ebp], eax

; 177  : 	if (pthread_target)

	cmp	DWORD PTR _pthread_target$[ebp], 0
	je	SHORT $LN1@pecker_run

; 178  : 	{
; 179  : 		pthread_target->run();

	mov	eax, DWORD PTR _pthread_target$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _pthread_target$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 180  : 		return P_OK;

	xor	eax, eax
	jmp	SHORT $LN2@pecker_run
$LN1@pecker_run:

; 181  : 	}
; 182  : 	return P_FAIL;

	mov	eax, 1
$LN2@pecker_run:

; 183  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?pecker_runable_thread_function@pecker_sdk@@YGKPAX@Z ENDP ; pecker_sdk::pecker_runable_thread_function
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?start_thread@pecker_thread_base@pecker_sdk@@UAEJPAUIpecker_runable@2@PAU_SECURITY_ATTRIBUTES@@HJ@Z
_TEXT	SEGMENT
_result_value$ = -20					; size = 4
_this$ = -8						; size = 4
_ptarget$ = 8						; size = 4
_pattribute$ = 12					; size = 4
_thread_stack_size$ = 16				; size = 4
_thread_creation_flag$ = 20				; size = 4
?start_thread@pecker_thread_base@pecker_sdk@@UAEJPAUIpecker_runable@2@PAU_SECURITY_ATTRIBUTES@@HJ@Z PROC ; pecker_sdk::pecker_thread_base::start_thread, COMDAT
; _this$ = ecx

; 187  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 188  : 	HResult result_value;
; 189  : #ifdef WINDOWS_PC
; 190  : 	if (NULL == _M_hthread)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@start_thre@2

; 191  : 	{
; 192  : 		_M_hthread = ::CreateThread(pattribute,thread_stack_size,pecker_runable_thread_function,ptarget,thread_creation_flag,&_M_thread_id);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _thread_creation_flag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptarget$[ebp]
	push	edx
	push	OFFSET ?pecker_runable_thread_function@pecker_sdk@@YGKPAX@Z ; pecker_sdk::pecker_runable_thread_function
	mov	eax, DWORD PTR _thread_stack_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pattribute$[ebp]
	push	ecx
	call	DWORD PTR __imp__CreateThread@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 193  : 		if (NULL != _M_hthread)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@start_thre@2

; 194  : 		{
; 195  : 			result_value = P_OK;

	mov	DWORD PTR _result_value$[ebp], 0

; 196  : 		}
; 197  : 		else

	jmp	SHORT $LN2@start_thre@2
$LN3@start_thre@2:

; 198  : 		{
; 199  : 			result_value = P_FAIL;

	mov	DWORD PTR _result_value$[ebp], 1
$LN2@start_thre@2:

; 200  : 		}
; 201  : 	}
; 202  : 	else

	jmp	SHORT $LN1@start_thre@2
$LN4@start_thre@2:

; 203  : 	{
; 204  : 		result_value = P_RUNNING_WAIT;

	mov	DWORD PTR _result_value$[ebp], 9
$LN1@start_thre@2:

; 205  : 	}
; 206  : 
; 207  : #endif
; 208  : 	return result_value;

	mov	eax, DWORD PTR _result_value$[ebp]

; 209  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?start_thread@pecker_thread_base@pecker_sdk@@UAEJPAUIpecker_runable@2@PAU_SECURITY_ATTRIBUTES@@HJ@Z ENDP ; pecker_sdk::pecker_thread_base::start_thread
_TEXT	ENDS
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?join_thread@pecker_thread_base@pecker_sdk@@QAEJK@Z
_TEXT	SEGMENT
tv68 = -244						; size = 4
$T66394 = -233						; size = 1
_wait_result$ = -32					; size = 4
_result_value$ = -20					; size = 4
_this$ = -8						; size = 4
_wait_milisec_time$ = 8					; size = 4
?join_thread@pecker_thread_base@pecker_sdk@@QAEJK@Z PROC ; pecker_sdk::pecker_thread_base::join_thread, COMDAT
; _this$ = ecx

; 212  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	BYTE PTR $T66394[ebp], 0

; 213  : 	HResult result_value;
; 214  : #ifdef WINDOWS_PC
; 215  : 	DWORD wait_result = ::WaitForSingleObject(_M_hthread,wait_milisec_time);

	mov	esi, esp
	mov	eax, DWORD PTR _wait_milisec_time$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _wait_result$[ebp], eax

; 216  : 	switch(wait_result)

	mov	eax, DWORD PTR _wait_result$[ebp]
	mov	DWORD PTR tv68[ebp], eax
	cmp	DWORD PTR tv68[ebp], 258		; 00000102H
	ja	SHORT $LN11@join_threa
	cmp	DWORD PTR tv68[ebp], 258		; 00000102H
	je	$LN2@join_threa
	cmp	DWORD PTR tv68[ebp], 0
	je	SHORT $LN6@join_threa
	cmp	DWORD PTR tv68[ebp], 128		; 00000080H
	je	SHORT $LN3@join_threa
	jmp	$LN7@join_threa
$LN11@join_threa:
	cmp	DWORD PTR tv68[ebp], -1
	je	SHORT $LN1@join_threa
	jmp	SHORT $LN7@join_threa
$LN6@join_threa:

; 217  : 	{
; 218  : 	case WAIT_OBJECT_0:
; 219  : 		
; 220  : 		if ( !::CloseHandle(_M_hthread))

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN5@join_threa

; 221  : 		{
; 222  : 			result_value = P_ERR;

	mov	BYTE PTR $T66394[ebp], 1
	mov	DWORD PTR _result_value$[ebp], -1

; 223  : 		}
; 224  : 		else

	jmp	SHORT $LN4@join_threa
$LN5@join_threa:

; 225  : 		{
; 226  : 			result_value = P_OK;

	mov	BYTE PTR $T66394[ebp], 1
	mov	DWORD PTR _result_value$[ebp], 0

; 227  : 			_M_thread_id = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 228  : 			_M_hthread = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN4@join_threa:

; 229  : 		}
; 230  : 		break;

	jmp	SHORT $LN7@join_threa
$LN3@join_threa:

; 231  : 	case  WAIT_ABANDONED:
; 232  : 		result_value = P_WAITRESULT;

	mov	BYTE PTR $T66394[ebp], 1
	mov	DWORD PTR _result_value$[ebp], 2

; 233  : 		break;

	jmp	SHORT $LN7@join_threa
$LN2@join_threa:

; 234  : 	case WAIT_TIMEOUT:
; 235  : 		result_value = P_TIMEOUT;

	mov	BYTE PTR $T66394[ebp], 1
	mov	DWORD PTR _result_value$[ebp], 8

; 236  : 		break;

	jmp	SHORT $LN7@join_threa
$LN1@join_threa:

; 237  : 	case WAIT_FAILED:
; 238  : 		result_value = P_FAIL;

	mov	BYTE PTR $T66394[ebp], 1
	mov	DWORD PTR _result_value$[ebp], 1
$LN7@join_threa:

; 239  : 		break;
; 240  : 
; 241  : 	}
; 242  : #endif
; 243  : 	
; 244  : 	return result_value;

	cmp	BYTE PTR $T66394[ebp], 0
	jne	SHORT $LN12@join_threa
	push	OFFSET $LN13@join_threa
	call	__RTC_UninitUse
	add	esp, 4
$LN12@join_threa:
	mov	eax, DWORD PTR _result_value$[ebp]

; 245  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN14@join_threa:
$LN13@join_threa:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
?join_thread@pecker_thread_base@pecker_sdk@@QAEJK@Z ENDP ; pecker_sdk::pecker_thread_base::join_thread
_TEXT	ENDS
EXTRN	__imp__TerminateThread@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?terminate_thread@pecker_thread_base@pecker_sdk@@QAEJK@Z
_TEXT	SEGMENT
_result_value$ = -20					; size = 4
_this$ = -8						; size = 4
_exit_code$ = 8						; size = 4
?terminate_thread@pecker_thread_base@pecker_sdk@@QAEJK@Z PROC ; pecker_sdk::pecker_thread_base::terminate_thread, COMDAT
; _this$ = ecx

; 248  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 249  : 	HResult result_value;
; 250  : #ifdef WINDOWS_PC
; 251  : 	if (::TerminateThread(_M_hthread,exit_code))

	mov	esi, esp
	mov	eax, DWORD PTR _exit_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__TerminateThread@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@terminate_

; 252  : 	{
; 253  : 		result_value = P_OK;

	mov	DWORD PTR _result_value$[ebp], 0

; 254  : 		::CloseHandle(_M_hthread);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 255  : 		_M_thread_id = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 256  : 		_M_hthread = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 257  : 	}
; 258  : 	else

	jmp	SHORT $LN1@terminate_
$LN2@terminate_:

; 259  : 	{
; 260  : 		result_value = P_FAIL;

	mov	DWORD PTR _result_value$[ebp], 1
$LN1@terminate_:

; 261  : 	}
; 262  : #endif
; 263  : 	return result_value;

	mov	eax, DWORD PTR _result_value$[ebp]

; 264  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?terminate_thread@pecker_thread_base@pecker_sdk@@QAEJK@Z ENDP ; pecker_sdk::pecker_thread_base::terminate_thread
_TEXT	ENDS
PUBLIC	?pause_thread@pecker_thread_base@pecker_sdk@@QAEJXZ ; pecker_sdk::pecker_thread_base::pause_thread
EXTRN	__imp__SuspendThread@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?pause_thread@pecker_thread_base@pecker_sdk@@QAEJXZ
_TEXT	SEGMENT
_result_value$ = -20					; size = 4
_this$ = -8						; size = 4
?pause_thread@pecker_thread_base@pecker_sdk@@QAEJXZ PROC ; pecker_sdk::pecker_thread_base::pause_thread, COMDAT
; _this$ = ecx

; 267  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 268  : 	HResult result_value;
; 269  : #ifdef WINDOWS_PC
; 270  : 	if (-1 != ::SuspendThread(_M_hthread))

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__SuspendThread@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN2@pause_thre

; 271  : 	{
; 272  : 		result_value = P_OK;

	mov	DWORD PTR _result_value$[ebp], 0

; 273  : 	}
; 274  : 	else

	jmp	SHORT $LN1@pause_thre
$LN2@pause_thre:

; 275  : 	{
; 276  : 		result_value = P_FAIL;

	mov	DWORD PTR _result_value$[ebp], 1
$LN1@pause_thre:

; 277  : 	}
; 278  : #endif
; 279  : 	return result_value;

	mov	eax, DWORD PTR _result_value$[ebp]

; 280  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?pause_thread@pecker_thread_base@pecker_sdk@@QAEJXZ ENDP ; pecker_sdk::pecker_thread_base::pause_thread
_TEXT	ENDS
PUBLIC	?resume_thread@pecker_thread_base@pecker_sdk@@QAEJXZ ; pecker_sdk::pecker_thread_base::resume_thread
EXTRN	__imp__ResumeThread@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resume_thread@pecker_thread_base@pecker_sdk@@QAEJXZ
_TEXT	SEGMENT
_result_value$ = -20					; size = 4
_this$ = -8						; size = 4
?resume_thread@pecker_thread_base@pecker_sdk@@QAEJXZ PROC ; pecker_sdk::pecker_thread_base::resume_thread, COMDAT
; _this$ = ecx

; 283  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 284  : 	HResult result_value;
; 285  : #ifdef WINDOWS_PC
; 286  : 	if (-1 != ::ResumeThread(_M_hthread))

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__ResumeThread@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN2@resume_thr

; 287  : 	{
; 288  : 		result_value = P_OK;

	mov	DWORD PTR _result_value$[ebp], 0

; 289  : 	}
; 290  : 	else

	jmp	SHORT $LN1@resume_thr
$LN2@resume_thr:

; 291  : 	{
; 292  : 		result_value = P_FAIL;

	mov	DWORD PTR _result_value$[ebp], 1
$LN1@resume_thr:

; 293  : 	}
; 294  : #endif
; 295  : 	return result_value;

	mov	eax, DWORD PTR _result_value$[ebp]

; 296  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?resume_thread@pecker_thread_base@pecker_sdk@@QAEJXZ ENDP ; pecker_sdk::pecker_thread_base::resume_thread
_TEXT	ENDS
PUBLIC	?get_thread_priority@pecker_thread_base@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_thread_base::get_thread_priority
EXTRN	__imp__GetThreadPriority@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?get_thread_priority@pecker_thread_base@pecker_sdk@@QBEHXZ
_TEXT	SEGMENT
_priority_value$ = -20					; size = 4
_this$ = -8						; size = 4
?get_thread_priority@pecker_thread_base@pecker_sdk@@QBEHXZ PROC ; pecker_sdk::pecker_thread_base::get_thread_priority, COMDAT
; _this$ = ecx

; 299  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 300  : 	SInt priority_value;
; 301  : #ifdef WINDOWS_PC
; 302  : 	priority_value = ::GetThreadPriority(_M_hthread);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__GetThreadPriority@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _priority_value$[ebp], eax

; 303  : #endif
; 304  : 	return priority_value;

	mov	eax, DWORD PTR _priority_value$[ebp]

; 305  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?get_thread_priority@pecker_thread_base@pecker_sdk@@QBEHXZ ENDP ; pecker_sdk::pecker_thread_base::get_thread_priority
_TEXT	ENDS
PUBLIC	?set_thread_priority@pecker_thread_base@pecker_sdk@@QAEHH@Z ; pecker_sdk::pecker_thread_base::set_thread_priority
EXTRN	__imp__SetThreadPriority@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?set_thread_priority@pecker_thread_base@pecker_sdk@@QAEHH@Z
_TEXT	SEGMENT
_result_value$ = -20					; size = 4
_this$ = -8						; size = 4
_npriority$ = 8						; size = 4
?set_thread_priority@pecker_thread_base@pecker_sdk@@QAEHH@Z PROC ; pecker_sdk::pecker_thread_base::set_thread_priority, COMDAT
; _this$ = ecx

; 308  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 309  : 	Boolean result_value;
; 310  : #ifdef WINDOWS_PC
; 311  : 	result_value = ::SetThreadPriority(_M_hthread,npriority);

	mov	esi, esp
	mov	eax, DWORD PTR _npriority$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__SetThreadPriority@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result_value$[ebp], eax

; 312  : #endif
; 313  : 	return result_value;

	mov	eax, DWORD PTR _result_value$[ebp]

; 314  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?set_thread_priority@pecker_thread_base@pecker_sdk@@QAEHH@Z ENDP ; pecker_sdk::pecker_thread_base::set_thread_priority
_TEXT	ENDS
EXTRN	__imp__GetExitCodeThread@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?get_thread_exit_code@pecker_thread_base@pecker_sdk@@QBEJAAK@Z
_TEXT	SEGMENT
_result_value$ = -20					; size = 4
_this$ = -8						; size = 4
_exit_code$ = 8						; size = 4
?get_thread_exit_code@pecker_thread_base@pecker_sdk@@QBEJAAK@Z PROC ; pecker_sdk::pecker_thread_base::get_thread_exit_code, COMDAT
; _this$ = ecx

; 317  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 318  : 	HResult result_value;
; 319  : #ifdef WINDOWS_PC
; 320  : 	if (::GetExitCodeThread(_M_hthread,&exit_code))

	mov	esi, esp
	mov	eax, DWORD PTR _exit_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__GetExitCodeThread@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@get_thread

; 321  : 	{
; 322  : 		result_value = P_OK;

	mov	DWORD PTR _result_value$[ebp], 0

; 323  : 	}
; 324  : 	else

	jmp	SHORT $LN1@get_thread
$LN2@get_thread:

; 325  : 	{
; 326  : 		result_value = P_FAIL;

	mov	DWORD PTR _result_value$[ebp], 1
$LN1@get_thread:

; 327  : 	}
; 328  : #endif
; 329  : 	return result_value;

	mov	eax, DWORD PTR _result_value$[ebp]

; 330  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_thread_exit_code@pecker_thread_base@pecker_sdk@@QBEJAAK@Z ENDP ; pecker_sdk::pecker_thread_base::get_thread_exit_code
_TEXT	ENDS
PUBLIC	?set_thread_affinity_mask@pecker_thread_base@pecker_sdk@@QAEJK@Z ; pecker_sdk::pecker_thread_base::set_thread_affinity_mask
EXTRN	__imp__SetThreadAffinityMask@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?set_thread_affinity_mask@pecker_thread_base@pecker_sdk@@QAEJK@Z
_TEXT	SEGMENT
_result_value$ = -20					; size = 4
_this$ = -8						; size = 4
_cpu_mask$ = 8						; size = 4
?set_thread_affinity_mask@pecker_thread_base@pecker_sdk@@QAEJK@Z PROC ; pecker_sdk::pecker_thread_base::set_thread_affinity_mask, COMDAT
; _this$ = ecx

; 333  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 334  : 	HResult result_value;
; 335  : #ifdef WINDOWS_PC
; 336  : 	if (0 != ::SetThreadAffinityMask(_M_hthread,cpu_mask))

	mov	esi, esp
	mov	eax, DWORD PTR _cpu_mask$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__SetThreadAffinityMask@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@set_thread

; 337  : 	{
; 338  : 		result_value = P_OK;

	mov	DWORD PTR _result_value$[ebp], 0

; 339  : 	}
; 340  : 	else

	jmp	SHORT $LN1@set_thread
$LN2@set_thread:

; 341  : 	{
; 342  : 		result_value = P_FAIL;

	mov	DWORD PTR _result_value$[ebp], 1
$LN1@set_thread:

; 343  : 	}
; 344  : #endif
; 345  : 	return result_value;

	mov	eax, DWORD PTR _result_value$[ebp]

; 346  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?set_thread_affinity_mask@pecker_thread_base@pecker_sdk@@QAEJK@Z ENDP ; pecker_sdk::pecker_thread_base::set_thread_affinity_mask
_TEXT	ENDS
PUBLIC	?get_thread_id@pecker_thread_base@pecker_sdk@@QBEKXZ ; pecker_sdk::pecker_thread_base::get_thread_id
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?get_thread_id@pecker_thread_base@pecker_sdk@@QBEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_thread_id@pecker_thread_base@pecker_sdk@@QBEKXZ PROC ; pecker_sdk::pecker_thread_base::get_thread_id, COMDAT
; _this$ = ecx

; 349  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 	return _M_thread_id;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 351  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_thread_id@pecker_thread_base@pecker_sdk@@QBEKXZ ENDP ; pecker_sdk::pecker_thread_base::get_thread_id
_TEXT	ENDS
PUBLIC	?get_thread_handle@pecker_thread_base@pecker_sdk@@QBEPAXXZ ; pecker_sdk::pecker_thread_base::get_thread_handle
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?get_thread_handle@pecker_thread_base@pecker_sdk@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_thread_handle@pecker_thread_base@pecker_sdk@@QBEPAXXZ PROC ; pecker_sdk::pecker_thread_base::get_thread_handle, COMDAT
; _this$ = ecx

; 355  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 356  : 	return _M_hthread;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 357  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_thread_handle@pecker_thread_base@pecker_sdk@@QBEPAXXZ ENDP ; pecker_sdk::pecker_thread_base::get_thread_handle
_TEXT	ENDS
PUBLIC	??_7pecker_thread_proc_target@pecker_sdk@@6B@	; pecker_sdk::pecker_thread_proc_target::`vftable'
PUBLIC	??0Ipecker_runable@pecker_sdk@@QAE@XZ		; pecker_sdk::Ipecker_runable::Ipecker_runable
PUBLIC	??0pecker_thread_proc_target@pecker_sdk@@QAE@XZ	; pecker_sdk::pecker_thread_proc_target::pecker_thread_proc_target
PUBLIC	??_R4pecker_thread_proc_target@pecker_sdk@@6B@	; pecker_sdk::pecker_thread_proc_target::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVpecker_thread_proc_target@pecker_sdk@@@8 ; pecker_sdk::pecker_thread_proc_target `RTTI Type Descriptor'
PUBLIC	??_R3pecker_thread_proc_target@pecker_sdk@@8	; pecker_sdk::pecker_thread_proc_target::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2pecker_thread_proc_target@pecker_sdk@@8	; pecker_sdk::pecker_thread_proc_target::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@pecker_thread_proc_target@pecker_sdk@@8 ; pecker_sdk::pecker_thread_proc_target::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Ipecker_runable@pecker_sdk@@8	; pecker_sdk::Ipecker_runable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIpecker_runable@pecker_sdk@@@8		; pecker_sdk::Ipecker_runable `RTTI Type Descriptor'
PUBLIC	??_R3Ipecker_runable@pecker_sdk@@8		; pecker_sdk::Ipecker_runable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Ipecker_runable@pecker_sdk@@8		; pecker_sdk::Ipecker_runable::`RTTI Base Class Array'
PUBLIC	?run@pecker_thread_proc_target@pecker_sdk@@UAEXXZ ; pecker_sdk::pecker_thread_proc_target::run
PUBLIC	?init@pecker_thread_proc_target@pecker_sdk@@UAEJP6GKPAX@Z0@Z ; pecker_sdk::pecker_thread_proc_target::init
EXTRN	??_Epecker_thread_proc_target@pecker_sdk@@UAEPAXI@Z:PROC ; pecker_sdk::pecker_thread_proc_target::`vector deleting destructor'
;	COMDAT ??_R2Ipecker_runable@pecker_sdk@@8
rdata$r	SEGMENT
??_R2Ipecker_runable@pecker_sdk@@8 DD FLAT:??_R1A@?0A@EA@Ipecker_runable@pecker_sdk@@8 ; pecker_sdk::Ipecker_runable::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Ipecker_runable@pecker_sdk@@8
rdata$r	SEGMENT
??_R3Ipecker_runable@pecker_sdk@@8 DD 00H		; pecker_sdk::Ipecker_runable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Ipecker_runable@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIpecker_runable@pecker_sdk@@@8
_DATA	SEGMENT
??_R0?AUIpecker_runable@pecker_sdk@@@8 DD FLAT:??_7type_info@@6B@ ; pecker_sdk::Ipecker_runable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIpecker_runable@pecker_sdk@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Ipecker_runable@pecker_sdk@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Ipecker_runable@pecker_sdk@@8 DD FLAT:??_R0?AUIpecker_runable@pecker_sdk@@@8 ; pecker_sdk::Ipecker_runable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Ipecker_runable@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@pecker_thread_proc_target@pecker_sdk@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@pecker_thread_proc_target@pecker_sdk@@8 DD FLAT:??_R0?AVpecker_thread_proc_target@pecker_sdk@@@8 ; pecker_sdk::pecker_thread_proc_target::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3pecker_thread_proc_target@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R2pecker_thread_proc_target@pecker_sdk@@8
rdata$r	SEGMENT
??_R2pecker_thread_proc_target@pecker_sdk@@8 DD FLAT:??_R1A@?0A@EA@pecker_thread_proc_target@pecker_sdk@@8 ; pecker_sdk::pecker_thread_proc_target::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Ipecker_runable@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R3pecker_thread_proc_target@pecker_sdk@@8
rdata$r	SEGMENT
??_R3pecker_thread_proc_target@pecker_sdk@@8 DD 00H	; pecker_sdk::pecker_thread_proc_target::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2pecker_thread_proc_target@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVpecker_thread_proc_target@pecker_sdk@@@8
_DATA	SEGMENT
??_R0?AVpecker_thread_proc_target@pecker_sdk@@@8 DD FLAT:??_7type_info@@6B@ ; pecker_sdk::pecker_thread_proc_target `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVpecker_thread_proc_target@pecker_sdk@@', 00H
_DATA	ENDS
;	COMDAT ??_R4pecker_thread_proc_target@pecker_sdk@@6B@
rdata$r	SEGMENT
??_R4pecker_thread_proc_target@pecker_sdk@@6B@ DD 00H	; pecker_sdk::pecker_thread_proc_target::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVpecker_thread_proc_target@pecker_sdk@@@8
	DD	FLAT:??_R3pecker_thread_proc_target@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_7pecker_thread_proc_target@pecker_sdk@@6B@
CONST	SEGMENT
??_7pecker_thread_proc_target@pecker_sdk@@6B@ DD FLAT:??_R4pecker_thread_proc_target@pecker_sdk@@6B@ ; pecker_sdk::pecker_thread_proc_target::`vftable'
	DD	FLAT:??_Epecker_thread_proc_target@pecker_sdk@@UAEPAXI@Z
	DD	FLAT:?run@pecker_thread_proc_target@pecker_sdk@@UAEXXZ
	DD	FLAT:?init@pecker_thread_proc_target@pecker_sdk@@UAEJP6GKPAX@Z0@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0pecker_thread_proc_target@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0pecker_thread_proc_target@pecker_sdk@@QAE@XZ PROC	; pecker_sdk::pecker_thread_proc_target::pecker_thread_proc_target, COMDAT
; _this$ = ecx

; 361  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Ipecker_runable@pecker_sdk@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7pecker_thread_proc_target@pecker_sdk@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 362  : 
; 363  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0pecker_thread_proc_target@pecker_sdk@@QAE@XZ ENDP	; pecker_sdk::pecker_thread_proc_target::pecker_thread_proc_target
_TEXT	ENDS
PUBLIC	??1pecker_thread_proc_target@pecker_sdk@@UAE@XZ	; pecker_sdk::pecker_thread_proc_target::~pecker_thread_proc_target
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gpecker_thread_proc_target@pecker_sdk@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gpecker_thread_proc_target@pecker_sdk@@UAEPAXI@Z PROC ; pecker_sdk::pecker_thread_proc_target::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1pecker_thread_proc_target@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_thread_proc_target::~pecker_thread_proc_target
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gpecker_thread_proc_target@pecker_sdk@@UAEPAXI@Z ENDP ; pecker_sdk::pecker_thread_proc_target::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7Ipecker_runable@pecker_sdk@@6B@		; pecker_sdk::Ipecker_runable::`vftable'
PUBLIC	??_R4Ipecker_runable@pecker_sdk@@6B@		; pecker_sdk::Ipecker_runable::`RTTI Complete Object Locator'
EXTRN	??_EIpecker_runable@pecker_sdk@@UAEPAXI@Z:PROC	; pecker_sdk::Ipecker_runable::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R4Ipecker_runable@pecker_sdk@@6B@
rdata$r	SEGMENT
??_R4Ipecker_runable@pecker_sdk@@6B@ DD 00H		; pecker_sdk::Ipecker_runable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIpecker_runable@pecker_sdk@@@8
	DD	FLAT:??_R3Ipecker_runable@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_7Ipecker_runable@pecker_sdk@@6B@
CONST	SEGMENT
??_7Ipecker_runable@pecker_sdk@@6B@ DD FLAT:??_R4Ipecker_runable@pecker_sdk@@6B@ ; pecker_sdk::Ipecker_runable::`vftable'
	DD	FLAT:??_EIpecker_runable@pecker_sdk@@UAEPAXI@Z
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0Ipecker_runable@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Ipecker_runable@pecker_sdk@@QAE@XZ PROC		; pecker_sdk::Ipecker_runable::Ipecker_runable, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Ipecker_runable@pecker_sdk@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Ipecker_runable@pecker_sdk@@QAE@XZ ENDP		; pecker_sdk::Ipecker_runable::Ipecker_runable
_TEXT	ENDS
PUBLIC	??1Ipecker_runable@pecker_sdk@@UAE@XZ		; pecker_sdk::Ipecker_runable::~Ipecker_runable
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GIpecker_runable@pecker_sdk@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GIpecker_runable@pecker_sdk@@UAEPAXI@Z PROC		; pecker_sdk::Ipecker_runable::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Ipecker_runable@pecker_sdk@@UAE@XZ	; pecker_sdk::Ipecker_runable::~Ipecker_runable
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GIpecker_runable@pecker_sdk@@UAEPAXI@Z ENDP		; pecker_sdk::Ipecker_runable::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\native\pecker_thread.h
_TEXT	ENDS
;	COMDAT ??1Ipecker_runable@pecker_sdk@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Ipecker_runable@pecker_sdk@@UAE@XZ PROC		; pecker_sdk::Ipecker_runable::~Ipecker_runable, COMDAT
; _this$ = ecx

; 63   : 	virtual ~Ipecker_runable(){;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Ipecker_runable@pecker_sdk@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1Ipecker_runable@pecker_sdk@@UAE@XZ ENDP		; pecker_sdk::Ipecker_runable::~Ipecker_runable
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\native\pecker_thread.cpp
_TEXT	ENDS
;	COMDAT ??1pecker_thread_proc_target@pecker_sdk@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1pecker_thread_proc_target@pecker_sdk@@UAE@XZ PROC	; pecker_sdk::pecker_thread_proc_target::~pecker_thread_proc_target, COMDAT
; _this$ = ecx

; 365  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7pecker_thread_proc_target@pecker_sdk@@6B@

; 366  : 	_M_ptarget_proc = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 367  : 	_M_params = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 368  : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Ipecker_runable@pecker_sdk@@UAE@XZ	; pecker_sdk::Ipecker_runable::~Ipecker_runable
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1pecker_thread_proc_target@pecker_sdk@@UAE@XZ ENDP	; pecker_sdk::pecker_thread_proc_target::~pecker_thread_proc_target
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?init@pecker_thread_proc_target@pecker_sdk@@UAEJP6GKPAX@Z0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ptarget_proc$ = 8					; size = 4
_params$ = 12						; size = 4
?init@pecker_thread_proc_target@pecker_sdk@@UAEJP6GKPAX@Z0@Z PROC ; pecker_sdk::pecker_thread_proc_target::init, COMDAT
; _this$ = ecx

; 371  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 372  : 	if (null != ptarget_proc)

	cmp	DWORD PTR _ptarget_proc$[ebp], 0
	je	SHORT $LN1@init

; 373  : 	{
; 374  : 		_M_ptarget_proc = ptarget_proc;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ptarget_proc$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 375  : 		_M_params = params;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _params$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 376  : 		return P_OK;

	xor	eax, eax
	jmp	SHORT $LN2@init
$LN1@init:

; 377  : 	}
; 378  : 	return P_ERR;

	or	eax, -1
$LN2@init:

; 379  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?init@pecker_thread_proc_target@pecker_sdk@@UAEJP6GKPAX@Z0@Z ENDP ; pecker_sdk::pecker_thread_proc_target::init
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?run@pecker_thread_proc_target@pecker_sdk@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?run@pecker_thread_proc_target@pecker_sdk@@UAEXXZ PROC	; pecker_sdk::pecker_thread_proc_target::run, COMDAT
; _this$ = ecx

; 382  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 383  : 	if (null != _M_ptarget_proc)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@run

; 384  : 	{
; 385  : 		_M_ptarget_proc(_M_params);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@run:

; 386  : 	}
; 387  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?run@pecker_thread_proc_target@pecker_sdk@@UAEXXZ ENDP	; pecker_sdk::pecker_thread_proc_target::run
_TEXT	ENDS
PUBLIC	??_7pecker_thread_target@pecker_sdk@@6B@	; pecker_sdk::pecker_thread_target::`vftable'
PUBLIC	??0pecker_thread_target@pecker_sdk@@QAE@XZ	; pecker_sdk::pecker_thread_target::pecker_thread_target
PUBLIC	??_R4pecker_thread_target@pecker_sdk@@6B@	; pecker_sdk::pecker_thread_target::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVpecker_thread_target@pecker_sdk@@@8	; pecker_sdk::pecker_thread_target `RTTI Type Descriptor'
PUBLIC	??_R3pecker_thread_target@pecker_sdk@@8		; pecker_sdk::pecker_thread_target::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2pecker_thread_target@pecker_sdk@@8		; pecker_sdk::pecker_thread_target::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@pecker_thread_target@pecker_sdk@@8 ; pecker_sdk::pecker_thread_target::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?run@pecker_thread_target@pecker_sdk@@UAEXXZ	; pecker_sdk::pecker_thread_target::run
PUBLIC	?init@pecker_thread_target@pecker_sdk@@UAEJPAUIpecker_runable@2@@Z ; pecker_sdk::pecker_thread_target::init
PUBLIC	?init@pecker_thread_target@pecker_sdk@@UAEJP6GKPAX@Z0@Z ; pecker_sdk::pecker_thread_target::init
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_Epecker_thread_target@pecker_sdk@@UAEPAXI@Z:PROC ; pecker_sdk::pecker_thread_target::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@pecker_thread_target@pecker_sdk@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@pecker_thread_target@pecker_sdk@@8 DD FLAT:??_R0?AVpecker_thread_target@pecker_sdk@@@8 ; pecker_sdk::pecker_thread_target::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3pecker_thread_target@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R2pecker_thread_target@pecker_sdk@@8
rdata$r	SEGMENT
??_R2pecker_thread_target@pecker_sdk@@8 DD FLAT:??_R1A@?0A@EA@pecker_thread_target@pecker_sdk@@8 ; pecker_sdk::pecker_thread_target::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Ipecker_runable@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R3pecker_thread_target@pecker_sdk@@8
rdata$r	SEGMENT
??_R3pecker_thread_target@pecker_sdk@@8 DD 00H		; pecker_sdk::pecker_thread_target::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2pecker_thread_target@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVpecker_thread_target@pecker_sdk@@@8
_DATA	SEGMENT
??_R0?AVpecker_thread_target@pecker_sdk@@@8 DD FLAT:??_7type_info@@6B@ ; pecker_sdk::pecker_thread_target `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVpecker_thread_target@pecker_sdk@@', 00H
_DATA	ENDS
;	COMDAT ??_R4pecker_thread_target@pecker_sdk@@6B@
rdata$r	SEGMENT
??_R4pecker_thread_target@pecker_sdk@@6B@ DD 00H	; pecker_sdk::pecker_thread_target::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVpecker_thread_target@pecker_sdk@@@8
	DD	FLAT:??_R3pecker_thread_target@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_7pecker_thread_target@pecker_sdk@@6B@
CONST	SEGMENT
??_7pecker_thread_target@pecker_sdk@@6B@ DD FLAT:??_R4pecker_thread_target@pecker_sdk@@6B@ ; pecker_sdk::pecker_thread_target::`vftable'
	DD	FLAT:??_Epecker_thread_target@pecker_sdk@@UAEPAXI@Z
	DD	FLAT:?run@pecker_thread_target@pecker_sdk@@UAEXXZ
	DD	FLAT:?init@pecker_thread_target@pecker_sdk@@UAEJPAUIpecker_runable@2@@Z
	DD	FLAT:?init@pecker_thread_target@pecker_sdk@@UAEJP6GKPAX@Z0@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0pecker_thread_target@pecker_sdk@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0pecker_thread_target@pecker_sdk@@QAE@XZ$0
__ehfuncinfo$??0pecker_thread_target@pecker_sdk@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0pecker_thread_target@pecker_sdk@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0pecker_thread_target@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0pecker_thread_target@pecker_sdk@@QAE@XZ PROC		; pecker_sdk::pecker_thread_target::pecker_thread_target, COMDAT
; _this$ = ecx

; 389  : pecker_thread_target::pecker_thread_target() : _M_ptarget(null){}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0pecker_thread_target@pecker_sdk@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Ipecker_runable@pecker_sdk@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7pecker_thread_target@pecker_sdk@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0pecker_thread_proc_target@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_thread_proc_target::pecker_thread_proc_target
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0pecker_thread_target@pecker_sdk@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Ipecker_runable@pecker_sdk@@UAE@XZ	; pecker_sdk::Ipecker_runable::~Ipecker_runable
__ehhandler$??0pecker_thread_target@pecker_sdk@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0pecker_thread_target@pecker_sdk@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0pecker_thread_target@pecker_sdk@@QAE@XZ ENDP		; pecker_sdk::pecker_thread_target::pecker_thread_target
PUBLIC	??1pecker_thread_target@pecker_sdk@@UAE@XZ	; pecker_sdk::pecker_thread_target::~pecker_thread_target
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gpecker_thread_target@pecker_sdk@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gpecker_thread_target@pecker_sdk@@UAEPAXI@Z PROC	; pecker_sdk::pecker_thread_target::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1pecker_thread_target@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_thread_target::~pecker_thread_target
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gpecker_thread_target@pecker_sdk@@UAEPAXI@Z ENDP	; pecker_sdk::pecker_thread_target::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1pecker_thread_target@pecker_sdk@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1pecker_thread_target@pecker_sdk@@UAE@XZ$0
__ehfuncinfo$??1pecker_thread_target@pecker_sdk@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1pecker_thread_target@pecker_sdk@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1pecker_thread_target@pecker_sdk@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1pecker_thread_target@pecker_sdk@@UAE@XZ PROC		; pecker_sdk::pecker_thread_target::~pecker_thread_target, COMDAT
; _this$ = ecx

; 392  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1pecker_thread_target@pecker_sdk@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7pecker_thread_target@pecker_sdk@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 393  : 	_M_ptarget = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 394  : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1pecker_thread_proc_target@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_thread_proc_target::~pecker_thread_proc_target
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Ipecker_runable@pecker_sdk@@UAE@XZ	; pecker_sdk::Ipecker_runable::~Ipecker_runable
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1pecker_thread_target@pecker_sdk@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Ipecker_runable@pecker_sdk@@UAE@XZ	; pecker_sdk::Ipecker_runable::~Ipecker_runable
__ehhandler$??1pecker_thread_target@pecker_sdk@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1pecker_thread_target@pecker_sdk@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1pecker_thread_target@pecker_sdk@@UAE@XZ ENDP		; pecker_sdk::pecker_thread_target::~pecker_thread_target
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?init@pecker_thread_target@pecker_sdk@@UAEJP6GKPAX@Z0@Z
_TEXT	SEGMENT
_init_result$ = -20					; size = 4
_this$ = -8						; size = 4
_ptarget_proc$ = 8					; size = 4
_params$ = 12						; size = 4
?init@pecker_thread_target@pecker_sdk@@UAEJP6GKPAX@Z0@Z PROC ; pecker_sdk::pecker_thread_target::init, COMDAT
; _this$ = ecx

; 397  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 398  : 	HResult init_result =  _M_proc_target.init(ptarget_proc,params);

	mov	esi, esp
	mov	eax, DWORD PTR _params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptarget_proc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _init_result$[ebp], eax

; 399  : 	if (P_OK == init_result)

	cmp	DWORD PTR _init_result$[ebp], 0
	jne	SHORT $LN1@init@2

; 400  : 	{
; 401  : 		_M_ptarget = &_M_proc_target;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN1@init@2:

; 402  : 	}
; 403  : 	return init_result; 

	mov	eax, DWORD PTR _init_result$[ebp]

; 404  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?init@pecker_thread_target@pecker_sdk@@UAEJP6GKPAX@Z0@Z ENDP ; pecker_sdk::pecker_thread_target::init
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?init@pecker_thread_target@pecker_sdk@@UAEJPAUIpecker_runable@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ptarget$ = 8						; size = 4
?init@pecker_thread_target@pecker_sdk@@UAEJPAUIpecker_runable@2@@Z PROC ; pecker_sdk::pecker_thread_target::init, COMDAT
; _this$ = ecx

; 407  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 408  : 	if (null != ptarget)

	cmp	DWORD PTR _ptarget$[ebp], 0
	je	SHORT $LN1@init@3

; 409  : 	{
; 410  : 		_M_ptarget = ptarget;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ptarget$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 411  : 		return P_OK;

	xor	eax, eax
	jmp	SHORT $LN2@init@3
$LN1@init@3:

; 412  : 	}
; 413  : 	return P_ERR;

	or	eax, -1
$LN2@init@3:

; 414  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?init@pecker_thread_target@pecker_sdk@@UAEJPAUIpecker_runable@2@@Z ENDP ; pecker_sdk::pecker_thread_target::init
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?run@pecker_thread_target@pecker_sdk@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?run@pecker_thread_target@pecker_sdk@@UAEXXZ PROC	; pecker_sdk::pecker_thread_target::run, COMDAT
; _this$ = ecx

; 417  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 418  : 	if (null != _M_ptarget)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN2@run@2

; 419  : 	{
; 420  : 		_M_ptarget->run();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@run@2:

; 421  : 	}
; 422  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?run@pecker_thread_target@pecker_sdk@@UAEXXZ ENDP	; pecker_sdk::pecker_thread_target::run
_TEXT	ENDS
PUBLIC	??_7pecker_thread@pecker_sdk@@6B@		; pecker_sdk::pecker_thread::`vftable'
PUBLIC	??0pecker_thread@pecker_sdk@@QAE@XZ		; pecker_sdk::pecker_thread::pecker_thread
PUBLIC	??_R4pecker_thread@pecker_sdk@@6B@		; pecker_sdk::pecker_thread::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVpecker_thread@pecker_sdk@@@8		; pecker_sdk::pecker_thread `RTTI Type Descriptor'
PUBLIC	??_R3pecker_thread@pecker_sdk@@8		; pecker_sdk::pecker_thread::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2pecker_thread@pecker_sdk@@8		; pecker_sdk::pecker_thread::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@pecker_thread@pecker_sdk@@8	; pecker_sdk::pecker_thread::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?start_thread@pecker_thread@pecker_sdk@@UAEJPAUIpecker_runable@2@PAU_SECURITY_ATTRIBUTES@@HJ@Z ; pecker_sdk::pecker_thread::start_thread
PUBLIC	?start_thread@pecker_thread@pecker_sdk@@UAEJP6GKPAX@Z0PAU_SECURITY_ATTRIBUTES@@HJ@Z ; pecker_sdk::pecker_thread::start_thread
PUBLIC	?init_thread_info@pecker_thread@pecker_sdk@@UAEJPBU_SECURITY_ATTRIBUTES@@HJ@Z ; pecker_sdk::pecker_thread::init_thread_info
PUBLIC	?init_thread_target@pecker_thread@pecker_sdk@@UAEJPAUIpecker_runable@2@@Z ; pecker_sdk::pecker_thread::init_thread_target
PUBLIC	?init_thread_target@pecker_thread@pecker_sdk@@UAEJP6GKPAX@Z0@Z ; pecker_sdk::pecker_thread::init_thread_target
PUBLIC	?init_thread@pecker_thread@pecker_sdk@@UAEJPAUIpecker_runable@2@PBU_SECURITY_ATTRIBUTES@@HJ@Z ; pecker_sdk::pecker_thread::init_thread
PUBLIC	?init_thread@pecker_thread@pecker_sdk@@UAEJP6GKPAX@Z0PBU_SECURITY_ATTRIBUTES@@HJ@Z ; pecker_sdk::pecker_thread::init_thread
PUBLIC	?start_thread@pecker_thread@pecker_sdk@@UAEJXZ	; pecker_sdk::pecker_thread::start_thread
EXTRN	??_Epecker_thread@pecker_sdk@@UAEPAXI@Z:PROC	; pecker_sdk::pecker_thread::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@pecker_thread@pecker_sdk@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@pecker_thread@pecker_sdk@@8 DD FLAT:??_R0?AVpecker_thread@pecker_sdk@@@8 ; pecker_sdk::pecker_thread::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3pecker_thread@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R2pecker_thread@pecker_sdk@@8
rdata$r	SEGMENT
??_R2pecker_thread@pecker_sdk@@8 DD FLAT:??_R1A@?0A@EA@pecker_thread@pecker_sdk@@8 ; pecker_sdk::pecker_thread::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@pecker_thread_base@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R3pecker_thread@pecker_sdk@@8
rdata$r	SEGMENT
??_R3pecker_thread@pecker_sdk@@8 DD 00H			; pecker_sdk::pecker_thread::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2pecker_thread@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVpecker_thread@pecker_sdk@@@8
_DATA	SEGMENT
??_R0?AVpecker_thread@pecker_sdk@@@8 DD FLAT:??_7type_info@@6B@ ; pecker_sdk::pecker_thread `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVpecker_thread@pecker_sdk@@', 00H
_DATA	ENDS
;	COMDAT ??_R4pecker_thread@pecker_sdk@@6B@
rdata$r	SEGMENT
??_R4pecker_thread@pecker_sdk@@6B@ DD 00H		; pecker_sdk::pecker_thread::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVpecker_thread@pecker_sdk@@@8
	DD	FLAT:??_R3pecker_thread@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_7pecker_thread@pecker_sdk@@6B@
CONST	SEGMENT
??_7pecker_thread@pecker_sdk@@6B@ DD FLAT:??_R4pecker_thread@pecker_sdk@@6B@ ; pecker_sdk::pecker_thread::`vftable'
	DD	FLAT:??_Epecker_thread@pecker_sdk@@UAEPAXI@Z
	DD	FLAT:?start_thread@pecker_thread@pecker_sdk@@UAEJPAUIpecker_runable@2@PAU_SECURITY_ATTRIBUTES@@HJ@Z
	DD	FLAT:?start_thread@pecker_thread@pecker_sdk@@UAEJP6GKPAX@Z0PAU_SECURITY_ATTRIBUTES@@HJ@Z
	DD	FLAT:?init_thread_info@pecker_thread@pecker_sdk@@UAEJPBU_SECURITY_ATTRIBUTES@@HJ@Z
	DD	FLAT:?init_thread_target@pecker_thread@pecker_sdk@@UAEJPAUIpecker_runable@2@@Z
	DD	FLAT:?init_thread_target@pecker_thread@pecker_sdk@@UAEJP6GKPAX@Z0@Z
	DD	FLAT:?init_thread@pecker_thread@pecker_sdk@@UAEJPAUIpecker_runable@2@PBU_SECURITY_ATTRIBUTES@@HJ@Z
	DD	FLAT:?init_thread@pecker_thread@pecker_sdk@@UAEJP6GKPAX@Z0PBU_SECURITY_ATTRIBUTES@@HJ@Z
	DD	FLAT:?start_thread@pecker_thread@pecker_sdk@@UAEJXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0pecker_thread@pecker_sdk@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0pecker_thread@pecker_sdk@@QAE@XZ$0
__ehfuncinfo$??0pecker_thread@pecker_sdk@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0pecker_thread@pecker_sdk@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0pecker_thread@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0pecker_thread@pecker_sdk@@QAE@XZ PROC		; pecker_sdk::pecker_thread::pecker_thread, COMDAT
; _this$ = ecx

; 425  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0pecker_thread@pecker_sdk@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0pecker_thread_base@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_thread_base::pecker_thread_base
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7pecker_thread@pecker_sdk@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0pecker_thread_target@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_thread_target::pecker_thread_target
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 0

; 426  : 
; 427  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0pecker_thread@pecker_sdk@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1pecker_thread_base@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_thread_base::~pecker_thread_base
__ehhandler$??0pecker_thread@pecker_sdk@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0pecker_thread@pecker_sdk@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0pecker_thread@pecker_sdk@@QAE@XZ ENDP		; pecker_sdk::pecker_thread::pecker_thread
PUBLIC	??1pecker_thread@pecker_sdk@@UAE@XZ		; pecker_sdk::pecker_thread::~pecker_thread
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gpecker_thread@pecker_sdk@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gpecker_thread@pecker_sdk@@UAEPAXI@Z PROC		; pecker_sdk::pecker_thread::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1pecker_thread@pecker_sdk@@UAE@XZ	; pecker_sdk::pecker_thread::~pecker_thread
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gpecker_thread@pecker_sdk@@UAEPAXI@Z ENDP		; pecker_sdk::pecker_thread::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1pecker_thread@pecker_sdk@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1pecker_thread@pecker_sdk@@UAE@XZ$0
__ehfuncinfo$??1pecker_thread@pecker_sdk@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1pecker_thread@pecker_sdk@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1pecker_thread@pecker_sdk@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1pecker_thread@pecker_sdk@@UAE@XZ PROC		; pecker_sdk::pecker_thread::~pecker_thread, COMDAT
; _this$ = ecx

; 430  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1pecker_thread@pecker_sdk@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7pecker_thread@pecker_sdk@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 431  : 	_M_pthread_attr = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0

; 432  : 	_M_thread_stack_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 433  : 	_M_thread_creation_flag = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 0

; 434  : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1pecker_thread_target@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_thread_target::~pecker_thread_target
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1pecker_thread_base@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_thread_base::~pecker_thread_base
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1pecker_thread@pecker_sdk@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1pecker_thread_base@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_thread_base::~pecker_thread_base
__ehhandler$??1pecker_thread@pecker_sdk@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1pecker_thread@pecker_sdk@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1pecker_thread@pecker_sdk@@UAE@XZ ENDP		; pecker_sdk::pecker_thread::~pecker_thread
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?init_thread_info@pecker_thread@pecker_sdk@@UAEJPBU_SECURITY_ATTRIBUTES@@HJ@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pattribute$ = 8					; size = 4
_thread_stack_size$ = 12				; size = 4
_thread_creation_flag$ = 16				; size = 4
?init_thread_info@pecker_thread@pecker_sdk@@UAEJPBU_SECURITY_ATTRIBUTES@@HJ@Z PROC ; pecker_sdk::pecker_thread::init_thread_info, COMDAT
; _this$ = ecx

; 437  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 438  : 	if (null != pattribute)

	cmp	DWORD PTR _pattribute$[ebp], 0
	je	SHORT $LN2@init_threa

; 439  : 	{
; 440  : 		_M_thread_attr = *pattribute;

	mov	eax, DWORD PTR _pattribute$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 441  : 		_M_pthread_attr = &_M_thread_attr;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 442  : 	}
; 443  : 	else

	jmp	SHORT $LN1@init_threa
$LN2@init_threa:

; 444  : 	{
; 445  : 		_M_pthread_attr = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN1@init_threa:

; 446  : 	}
; 447  : 	_M_thread_stack_size = thread_stack_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _thread_stack_size$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 448  : 	_M_thread_creation_flag = thread_creation_flag;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _thread_creation_flag$[ebp]
	mov	DWORD PTR [eax+52], ecx

; 449  : 
; 450  : 	return P_OK;

	xor	eax, eax

; 451  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?init_thread_info@pecker_thread@pecker_sdk@@UAEJPBU_SECURITY_ATTRIBUTES@@HJ@Z ENDP ; pecker_sdk::pecker_thread::init_thread_info
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?init_thread_target@pecker_thread@pecker_sdk@@UAEJP6GKPAX@Z0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pthread_proc$ = 8					; size = 4
_proc_params$ = 12					; size = 4
?init_thread_target@pecker_thread@pecker_sdk@@UAEJP6GKPAX@Z0@Z PROC ; pecker_sdk::pecker_thread::init_thread_target, COMDAT
; _this$ = ecx

; 455  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 456  : 	return _M_thread_target.init(pthread_proc,proc_params);

	mov	esi, esp
	mov	eax, DWORD PTR _proc_params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pthread_proc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 457  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?init_thread_target@pecker_thread@pecker_sdk@@UAEJP6GKPAX@Z0@Z ENDP ; pecker_sdk::pecker_thread::init_thread_target
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?init_thread_target@pecker_thread@pecker_sdk@@UAEJPAUIpecker_runable@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ptarget$ = 8						; size = 4
?init_thread_target@pecker_thread@pecker_sdk@@UAEJPAUIpecker_runable@2@@Z PROC ; pecker_sdk::pecker_thread::init_thread_target, COMDAT
; _this$ = ecx

; 460  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 461  : 	return _M_thread_target.init(ptarget);

	mov	esi, esp
	mov	eax, DWORD PTR _ptarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 462  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?init_thread_target@pecker_thread@pecker_sdk@@UAEJPAUIpecker_runable@2@@Z ENDP ; pecker_sdk::pecker_thread::init_thread_target
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?init_thread@pecker_thread@pecker_sdk@@UAEJPAUIpecker_runable@2@PBU_SECURITY_ATTRIBUTES@@HJ@Z
_TEXT	SEGMENT
_init_result$ = -20					; size = 4
_this$ = -8						; size = 4
_ptarget$ = 8						; size = 4
_pattribute$ = 12					; size = 4
_thread_stack_size$ = 16				; size = 4
_thread_creation_flag$ = 20				; size = 4
?init_thread@pecker_thread@pecker_sdk@@UAEJPAUIpecker_runable@2@PBU_SECURITY_ATTRIBUTES@@HJ@Z PROC ; pecker_sdk::pecker_thread::init_thread, COMDAT
; _this$ = ecx

; 465  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 466  : 	HResult init_result = _M_thread_target.init(ptarget);

	mov	esi, esp
	mov	eax, DWORD PTR _ptarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _init_result$[ebp], eax

; 467  : 	if (P_OK == init_result)

	cmp	DWORD PTR _init_result$[ebp], 0
	jne	SHORT $LN3@init_threa@2

; 468  : 	{
; 469  : 		 if (null != pattribute)

	cmp	DWORD PTR _pattribute$[ebp], 0
	je	SHORT $LN2@init_threa@2

; 470  : 		 {
; 471  : 			 _M_thread_attr = *pattribute;

	mov	eax, DWORD PTR _pattribute$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 472  : 			 _M_pthread_attr = &_M_thread_attr;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 473  : 		 }
; 474  : 		 else

	jmp	SHORT $LN1@init_threa@2
$LN2@init_threa@2:

; 475  : 		 {
; 476  : 			 _M_pthread_attr = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN1@init_threa@2:

; 477  : 		 }
; 478  : 		_M_thread_stack_size = thread_stack_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _thread_stack_size$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 479  : 		_M_thread_creation_flag = thread_creation_flag;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _thread_creation_flag$[ebp]
	mov	DWORD PTR [eax+52], ecx
$LN3@init_threa@2:

; 480  : 	}
; 481  : 	return init_result;

	mov	eax, DWORD PTR _init_result$[ebp]

; 482  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?init_thread@pecker_thread@pecker_sdk@@UAEJPAUIpecker_runable@2@PBU_SECURITY_ATTRIBUTES@@HJ@Z ENDP ; pecker_sdk::pecker_thread::init_thread
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?init_thread@pecker_thread@pecker_sdk@@UAEJP6GKPAX@Z0PBU_SECURITY_ATTRIBUTES@@HJ@Z
_TEXT	SEGMENT
_init_result$ = -20					; size = 4
_this$ = -8						; size = 4
_pthread_proc$ = 8					; size = 4
_proc_params$ = 12					; size = 4
_pattribute$ = 16					; size = 4
_thread_stack_size$ = 20				; size = 4
_thread_creation_flag$ = 24				; size = 4
?init_thread@pecker_thread@pecker_sdk@@UAEJP6GKPAX@Z0PBU_SECURITY_ATTRIBUTES@@HJ@Z PROC ; pecker_sdk::pecker_thread::init_thread, COMDAT
; _this$ = ecx

; 485  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 486  : 	HResult init_result = _M_thread_target.init(pthread_proc,proc_params);

	mov	esi, esp
	mov	eax, DWORD PTR _proc_params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pthread_proc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _init_result$[ebp], eax

; 487  : 	if (P_OK == init_result)

	cmp	DWORD PTR _init_result$[ebp], 0
	jne	SHORT $LN3@init_threa@3

; 488  : 	{
; 489  : 		if (null != pattribute)

	cmp	DWORD PTR _pattribute$[ebp], 0
	je	SHORT $LN2@init_threa@3

; 490  : 		{
; 491  : 			_M_thread_attr = *pattribute;

	mov	eax, DWORD PTR _pattribute$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 492  : 			_M_pthread_attr = &_M_thread_attr;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 493  : 		}
; 494  : 		else

	jmp	SHORT $LN1@init_threa@3
$LN2@init_threa@3:

; 495  : 		{
; 496  : 			_M_pthread_attr = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN1@init_threa@3:

; 497  : 		}
; 498  : 		_M_thread_stack_size = thread_stack_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _thread_stack_size$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 499  : 		_M_thread_creation_flag = thread_creation_flag;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _thread_creation_flag$[ebp]
	mov	DWORD PTR [eax+52], ecx
$LN3@init_threa@3:

; 500  : 	}
; 501  : 	return init_result;

	mov	eax, DWORD PTR _init_result$[ebp]

; 502  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?init_thread@pecker_thread@pecker_sdk@@UAEJP6GKPAX@Z0PBU_SECURITY_ATTRIBUTES@@HJ@Z ENDP ; pecker_sdk::pecker_thread::init_thread
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?start_thread@pecker_thread@pecker_sdk@@UAEJP6GKPAX@Z0PAU_SECURITY_ATTRIBUTES@@HJ@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pthread_proc$ = 8					; size = 4
_proc_params$ = 12					; size = 4
_pattribute$ = 16					; size = 4
_thread_stack_size$ = 20				; size = 4
_thread_creation_flag$ = 24				; size = 4
?start_thread@pecker_thread@pecker_sdk@@UAEJP6GKPAX@Z0PAU_SECURITY_ATTRIBUTES@@HJ@Z PROC ; pecker_sdk::pecker_thread::start_thread, COMDAT
; _this$ = ecx

; 505  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 506  : 	if (P_OK == init_thread(pthread_proc,proc_params,pattribute,thread_stack_size,thread_creation_flag))

	mov	esi, esp
	mov	eax, DWORD PTR _thread_creation_flag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _thread_stack_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pattribute$[ebp]
	push	edx
	mov	eax, DWORD PTR _proc_params$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pthread_proc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@start_thre@3

; 507  : 	{
; 508  : 		return pecker_thread_base::start_thread(&_M_thread_target,_M_pthread_attr,_M_thread_stack_size,_M_thread_creation_flag);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?start_thread@pecker_thread_base@pecker_sdk@@UAEJPAUIpecker_runable@2@PAU_SECURITY_ATTRIBUTES@@HJ@Z ; pecker_sdk::pecker_thread_base::start_thread
	jmp	SHORT $LN2@start_thre@3
$LN1@start_thre@3:

; 509  : 	}
; 510  : 	return P_ERR;

	or	eax, -1
$LN2@start_thre@3:

; 511  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?start_thread@pecker_thread@pecker_sdk@@UAEJP6GKPAX@Z0PAU_SECURITY_ATTRIBUTES@@HJ@Z ENDP ; pecker_sdk::pecker_thread::start_thread
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?start_thread@pecker_thread@pecker_sdk@@UAEJPAUIpecker_runable@2@PAU_SECURITY_ATTRIBUTES@@HJ@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ptarget$ = 8						; size = 4
_pattribute$ = 12					; size = 4
_thread_stack_size$ = 16				; size = 4
_thread_creation_flag$ = 20				; size = 4
?start_thread@pecker_thread@pecker_sdk@@UAEJPAUIpecker_runable@2@PAU_SECURITY_ATTRIBUTES@@HJ@Z PROC ; pecker_sdk::pecker_thread::start_thread, COMDAT
; _this$ = ecx

; 516  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 517  : 	if (P_OK == init_thread(ptarget,pattribute,thread_stack_size,thread_creation_flag))

	mov	esi, esp
	mov	eax, DWORD PTR _thread_creation_flag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _thread_stack_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pattribute$[ebp]
	push	edx
	mov	eax, DWORD PTR _ptarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@start_thre@4

; 518  : 	{
; 519  : 		return pecker_thread_base::start_thread(&_M_thread_target,_M_pthread_attr,_M_thread_stack_size,_M_thread_creation_flag);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?start_thread@pecker_thread_base@pecker_sdk@@UAEJPAUIpecker_runable@2@PAU_SECURITY_ATTRIBUTES@@HJ@Z ; pecker_sdk::pecker_thread_base::start_thread
	jmp	SHORT $LN2@start_thre@4
$LN1@start_thre@4:

; 520  : 	}
; 521  : 	return P_ERR;

	or	eax, -1
$LN2@start_thre@4:

; 522  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?start_thread@pecker_thread@pecker_sdk@@UAEJPAUIpecker_runable@2@PAU_SECURITY_ATTRIBUTES@@HJ@Z ENDP ; pecker_sdk::pecker_thread::start_thread
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?start_thread@pecker_thread@pecker_sdk@@UAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?start_thread@pecker_thread@pecker_sdk@@UAEJXZ PROC	; pecker_sdk::pecker_thread::start_thread, COMDAT
; _this$ = ecx

; 525  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 526  : 	return pecker_thread_base::start_thread(&_M_thread_target,_M_pthread_attr,_M_thread_stack_size,_M_thread_creation_flag); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?start_thread@pecker_thread_base@pecker_sdk@@UAEJPAUIpecker_runable@2@PAU_SECURITY_ATTRIBUTES@@HJ@Z ; pecker_sdk::pecker_thread_base::start_thread

; 527  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?start_thread@pecker_thread@pecker_sdk@@UAEJXZ ENDP	; pecker_sdk::pecker_thread::start_thread
_TEXT	ENDS
END
