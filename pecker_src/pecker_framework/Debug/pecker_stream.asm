; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	F:\codes\pecker_framework_git\pecker_src\pecker_framework\native\pecker_stream.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??1Ipecker_read_stream@pecker_sdk@@UAE@XZ	; pecker_sdk::Ipecker_read_stream::~Ipecker_read_stream
PUBLIC	??_7pecker_read_stream_form_memery@pecker_sdk@@6B@ ; pecker_sdk::pecker_read_stream_form_memery::`vftable'
PUBLIC	??0Ipecker_read_stream@pecker_sdk@@QAE@XZ	; pecker_sdk::Ipecker_read_stream::Ipecker_read_stream
PUBLIC	??0pecker_read_stream_form_memery@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_read_stream_form_memery::pecker_read_stream_form_memery
PUBLIC	??_R4pecker_read_stream_form_memery@pecker_sdk@@6B@ ; pecker_sdk::pecker_read_stream_form_memery::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVpecker_read_stream_form_memery@pecker_sdk@@@8 ; pecker_sdk::pecker_read_stream_form_memery `RTTI Type Descriptor'
PUBLIC	??_R3pecker_read_stream_form_memery@pecker_sdk@@8 ; pecker_sdk::pecker_read_stream_form_memery::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2pecker_read_stream_form_memery@pecker_sdk@@8 ; pecker_sdk::pecker_read_stream_form_memery::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@pecker_read_stream_form_memery@pecker_sdk@@8 ; pecker_sdk::pecker_read_stream_form_memery::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Ipecker_read_stream@pecker_sdk@@8	; pecker_sdk::Ipecker_read_stream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIpecker_read_stream@pecker_sdk@@@8	; pecker_sdk::Ipecker_read_stream `RTTI Type Descriptor'
PUBLIC	??_R3Ipecker_read_stream@pecker_sdk@@8		; pecker_sdk::Ipecker_read_stream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Ipecker_read_stream@pecker_sdk@@8		; pecker_sdk::Ipecker_read_stream::`RTTI Base Class Array'
PUBLIC	?read_integer@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAH@Z ; pecker_sdk::pecker_read_stream_form_memery::read_integer
PUBLIC	?read_long@pecker_read_stream_form_memery@pecker_sdk@@UAEJAA_J@Z ; pecker_sdk::pecker_read_stream_form_memery::read_long
PUBLIC	?read_char@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z ; pecker_sdk::pecker_read_stream_form_memery::read_char
PUBLIC	?read_float@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z ; pecker_sdk::pecker_read_stream_form_memery::read_float
PUBLIC	?read_double@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z ; pecker_sdk::pecker_read_stream_form_memery::read_double
PUBLIC	?read_chars@pecker_read_stream_form_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_read_stream_form_memery::read_chars
EXTRN	??0pecker_critical_section@pecker_sdk@@QAE@XZ:PROC ; pecker_sdk::pecker_critical_section::pecker_critical_section
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Epecker_read_stream_form_memery@pecker_sdk@@UAEPAXI@Z:PROC ; pecker_sdk::pecker_read_stream_form_memery::`vector deleting destructor'
;	COMDAT ??_R2Ipecker_read_stream@pecker_sdk@@8
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\native\pecker_stream.cpp
rdata$r	SEGMENT
??_R2Ipecker_read_stream@pecker_sdk@@8 DD FLAT:??_R1A@?0A@EA@Ipecker_read_stream@pecker_sdk@@8 ; pecker_sdk::Ipecker_read_stream::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Ipecker_read_stream@pecker_sdk@@8
rdata$r	SEGMENT
??_R3Ipecker_read_stream@pecker_sdk@@8 DD 00H		; pecker_sdk::Ipecker_read_stream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Ipecker_read_stream@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIpecker_read_stream@pecker_sdk@@@8
_DATA	SEGMENT
??_R0?AUIpecker_read_stream@pecker_sdk@@@8 DD FLAT:??_7type_info@@6B@ ; pecker_sdk::Ipecker_read_stream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIpecker_read_stream@pecker_sdk@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Ipecker_read_stream@pecker_sdk@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Ipecker_read_stream@pecker_sdk@@8 DD FLAT:??_R0?AUIpecker_read_stream@pecker_sdk@@@8 ; pecker_sdk::Ipecker_read_stream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Ipecker_read_stream@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@pecker_read_stream_form_memery@pecker_sdk@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@pecker_read_stream_form_memery@pecker_sdk@@8 DD FLAT:??_R0?AVpecker_read_stream_form_memery@pecker_sdk@@@8 ; pecker_sdk::pecker_read_stream_form_memery::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3pecker_read_stream_form_memery@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R2pecker_read_stream_form_memery@pecker_sdk@@8
rdata$r	SEGMENT
??_R2pecker_read_stream_form_memery@pecker_sdk@@8 DD FLAT:??_R1A@?0A@EA@pecker_read_stream_form_memery@pecker_sdk@@8 ; pecker_sdk::pecker_read_stream_form_memery::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Ipecker_read_stream@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R3pecker_read_stream_form_memery@pecker_sdk@@8
rdata$r	SEGMENT
??_R3pecker_read_stream_form_memery@pecker_sdk@@8 DD 00H ; pecker_sdk::pecker_read_stream_form_memery::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2pecker_read_stream_form_memery@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVpecker_read_stream_form_memery@pecker_sdk@@@8
_DATA	SEGMENT
??_R0?AVpecker_read_stream_form_memery@pecker_sdk@@@8 DD FLAT:??_7type_info@@6B@ ; pecker_sdk::pecker_read_stream_form_memery `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVpecker_read_stream_form_memery@pecker_sdk@@', 00H
_DATA	ENDS
;	COMDAT ??_R4pecker_read_stream_form_memery@pecker_sdk@@6B@
rdata$r	SEGMENT
??_R4pecker_read_stream_form_memery@pecker_sdk@@6B@ DD 00H ; pecker_sdk::pecker_read_stream_form_memery::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVpecker_read_stream_form_memery@pecker_sdk@@@8
	DD	FLAT:??_R3pecker_read_stream_form_memery@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_7pecker_read_stream_form_memery@pecker_sdk@@6B@
CONST	SEGMENT
??_7pecker_read_stream_form_memery@pecker_sdk@@6B@ DD FLAT:??_R4pecker_read_stream_form_memery@pecker_sdk@@6B@ ; pecker_sdk::pecker_read_stream_form_memery::`vftable'
	DD	FLAT:??_Epecker_read_stream_form_memery@pecker_sdk@@UAEPAXI@Z
	DD	FLAT:?read_integer@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAH@Z
	DD	FLAT:?read_long@pecker_read_stream_form_memery@pecker_sdk@@UAEJAA_J@Z
	DD	FLAT:?read_char@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z
	DD	FLAT:?read_float@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z
	DD	FLAT:?read_double@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z
	DD	FLAT:?read_chars@pecker_read_stream_form_memery@pecker_sdk@@UAEHPADH@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0pecker_read_stream_form_memery@pecker_sdk@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0pecker_read_stream_form_memery@pecker_sdk@@QAE@XZ$0
__ehfuncinfo$??0pecker_read_stream_form_memery@pecker_sdk@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0pecker_read_stream_form_memery@pecker_sdk@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0pecker_read_stream_form_memery@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0pecker_read_stream_form_memery@pecker_sdk@@QAE@XZ PROC ; pecker_sdk::pecker_read_stream_form_memery::pecker_read_stream_form_memery, COMDAT
; _this$ = ecx

; 16   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0pecker_read_stream_form_memery@pecker_sdk@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Ipecker_read_stream@pecker_sdk@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7pecker_read_stream_form_memery@pecker_sdk@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0pecker_critical_section@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_section::pecker_critical_section

; 17   : 
; 18   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0pecker_read_stream_form_memery@pecker_sdk@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Ipecker_read_stream@pecker_sdk@@UAE@XZ ; pecker_sdk::Ipecker_read_stream::~Ipecker_read_stream
__ehhandler$??0pecker_read_stream_form_memery@pecker_sdk@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0pecker_read_stream_form_memery@pecker_sdk@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0pecker_read_stream_form_memery@pecker_sdk@@QAE@XZ ENDP ; pecker_sdk::pecker_read_stream_form_memery::pecker_read_stream_form_memery
PUBLIC	??_7Ipecker_read_stream@pecker_sdk@@6B@		; pecker_sdk::Ipecker_read_stream::`vftable'
PUBLIC	??_R4Ipecker_read_stream@pecker_sdk@@6B@	; pecker_sdk::Ipecker_read_stream::`RTTI Complete Object Locator'
EXTRN	??_EIpecker_read_stream@pecker_sdk@@UAEPAXI@Z:PROC ; pecker_sdk::Ipecker_read_stream::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R4Ipecker_read_stream@pecker_sdk@@6B@
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\native\pecker_stream.h
rdata$r	SEGMENT
??_R4Ipecker_read_stream@pecker_sdk@@6B@ DD 00H		; pecker_sdk::Ipecker_read_stream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIpecker_read_stream@pecker_sdk@@@8
	DD	FLAT:??_R3Ipecker_read_stream@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_7Ipecker_read_stream@pecker_sdk@@6B@
CONST	SEGMENT
??_7Ipecker_read_stream@pecker_sdk@@6B@ DD FLAT:??_R4Ipecker_read_stream@pecker_sdk@@6B@ ; pecker_sdk::Ipecker_read_stream::`vftable'
	DD	FLAT:??_EIpecker_read_stream@pecker_sdk@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??1Ipecker_read_stream@pecker_sdk@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Ipecker_read_stream@pecker_sdk@@UAE@XZ PROC		; pecker_sdk::Ipecker_read_stream::~Ipecker_read_stream, COMDAT
; _this$ = ecx

; 22   : 	virtual ~Ipecker_read_stream(){;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Ipecker_read_stream@pecker_sdk@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1Ipecker_read_stream@pecker_sdk@@UAE@XZ ENDP		; pecker_sdk::Ipecker_read_stream::~Ipecker_read_stream
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GIpecker_read_stream@pecker_sdk@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GIpecker_read_stream@pecker_sdk@@UAEPAXI@Z PROC	; pecker_sdk::Ipecker_read_stream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Ipecker_read_stream@pecker_sdk@@UAE@XZ ; pecker_sdk::Ipecker_read_stream::~Ipecker_read_stream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GIpecker_read_stream@pecker_sdk@@UAEPAXI@Z ENDP	; pecker_sdk::Ipecker_read_stream::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1pecker_read_stream_form_memery@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_read_stream_form_memery::~pecker_read_stream_form_memery
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gpecker_read_stream_form_memery@pecker_sdk@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gpecker_read_stream_form_memery@pecker_sdk@@UAEPAXI@Z PROC ; pecker_sdk::pecker_read_stream_form_memery::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1pecker_read_stream_form_memery@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_read_stream_form_memery::~pecker_read_stream_form_memery
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gpecker_read_stream_form_memery@pecker_sdk@@UAEPAXI@Z ENDP ; pecker_sdk::pecker_read_stream_form_memery::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0Ipecker_read_stream@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Ipecker_read_stream@pecker_sdk@@QAE@XZ PROC		; pecker_sdk::Ipecker_read_stream::Ipecker_read_stream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Ipecker_read_stream@pecker_sdk@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Ipecker_read_stream@pecker_sdk@@QAE@XZ ENDP		; pecker_sdk::Ipecker_read_stream::Ipecker_read_stream
_TEXT	ENDS
EXTRN	??1pecker_critical_section@pecker_sdk@@QAE@XZ:PROC ; pecker_sdk::pecker_critical_section::~pecker_critical_section
EXTRN	??1pecker_critical_lock@pecker_sdk@@QAE@XZ:PROC	; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
EXTRN	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z:PROC ; pecker_sdk::pecker_critical_lock::lock
EXTRN	??0pecker_critical_lock@pecker_sdk@@QAE@XZ:PROC	; pecker_sdk::pecker_critical_lock::pecker_critical_lock
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT xdata$x
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\native\pecker_stream.cpp
xdata$x	SEGMENT
__unwindtable$??1pecker_read_stream_form_memery@pecker_sdk@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1pecker_read_stream_form_memery@pecker_sdk@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1pecker_read_stream_form_memery@pecker_sdk@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1pecker_read_stream_form_memery@pecker_sdk@@UAE@XZ$2
__ehfuncinfo$??1pecker_read_stream_form_memery@pecker_sdk@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1pecker_read_stream_form_memery@pecker_sdk@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1pecker_read_stream_form_memery@pecker_sdk@@UAE@XZ
_TEXT	SEGMENT
_cs_lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1pecker_read_stream_form_memery@pecker_sdk@@UAE@XZ PROC ; pecker_sdk::pecker_read_stream_form_memery::~pecker_read_stream_form_memery, COMDAT
; _this$ = ecx

; 20   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1pecker_read_stream_form_memery@pecker_sdk@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7pecker_read_stream_form_memery@pecker_sdk@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 21   : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 22   : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 23   : 	_M_bind_read_buffer = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 24   : 	_M_bind_read_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 25   : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1pecker_critical_section@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_section::~pecker_critical_section
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Ipecker_read_stream@pecker_sdk@@UAE@XZ ; pecker_sdk::Ipecker_read_stream::~Ipecker_read_stream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@pecker_rea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@pecker_rea:
	DD	1
	DD	$LN8@pecker_rea
$LN8@pecker_rea:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN6@pecker_rea
$LN6@pecker_rea:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1pecker_read_stream_form_memery@pecker_sdk@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Ipecker_read_stream@pecker_sdk@@UAE@XZ ; pecker_sdk::Ipecker_read_stream::~Ipecker_read_stream
__unwindfunclet$??1pecker_read_stream_form_memery@pecker_sdk@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1pecker_critical_section@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_section::~pecker_critical_section
__unwindfunclet$??1pecker_read_stream_form_memery@pecker_sdk@@UAE@XZ$2:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$??1pecker_read_stream_form_memery@pecker_sdk@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1pecker_read_stream_form_memery@pecker_sdk@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1pecker_read_stream_form_memery@pecker_sdk@@UAE@XZ ENDP ; pecker_sdk::pecker_read_stream_form_memery::~pecker_read_stream_form_memery
PUBLIC	?bind_read_buffer@pecker_read_stream_form_memery@pecker_sdk@@QAEJPBDH@Z ; pecker_sdk::pecker_read_stream_form_memery::bind_read_buffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?bind_read_buffer@pecker_read_stream_form_memery@pecker_sdk@@QAEJPBDH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?bind_read_buffer@pecker_read_stream_form_memery@pecker_sdk@@QAEJPBDH@Z$0
__ehfuncinfo$?bind_read_buffer@pecker_read_stream_form_memery@pecker_sdk@@QAEJPBDH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?bind_read_buffer@pecker_read_stream_form_memery@pecker_sdk@@QAEJPBDH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?bind_read_buffer@pecker_read_stream_form_memery@pecker_sdk@@QAEJPBDH@Z
_TEXT	SEGMENT
$T67571 = -236						; size = 4
_cs_lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pbind_buffer$ = 8					; size = 4
_bind_size$ = 12					; size = 4
?bind_read_buffer@pecker_read_stream_form_memery@pecker_sdk@@QAEJPBDH@Z PROC ; pecker_sdk::pecker_read_stream_form_memery::bind_read_buffer, COMDAT
; _this$ = ecx

; 27   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?bind_read_buffer@pecker_read_stream_form_memery@pecker_sdk@@QAEJPBDH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 28   : 	if (null == pbind_buffer || bind_size <= 0)

	cmp	DWORD PTR _pbind_buffer$[ebp], 0
	je	SHORT $LN1@bind_read_
	cmp	DWORD PTR _bind_size$[ebp], 0
	jg	SHORT $LN2@bind_read_
$LN1@bind_read_:

; 29   : 	{
; 30   : 		return P_ERR;

	or	eax, -1
	jmp	SHORT $LN3@bind_read_
$LN2@bind_read_:

; 31   : 	}
; 32   : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 33   : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 34   : 
; 35   : 	_M_bind_read_buffer = pbind_buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pbind_buffer$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 36   : 	_M_bind_read_size = bind_size; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _bind_size$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 37   : 	return P_OK;

	mov	DWORD PTR $T67571[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67571[ebp]
$LN3@bind_read_:

; 38   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@bind_read_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN9@bind_read_:
	DD	1
	DD	$LN8@bind_read_
$LN8@bind_read_:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN6@bind_read_
$LN6@bind_read_:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?bind_read_buffer@pecker_read_stream_form_memery@pecker_sdk@@QAEJPBDH@Z$0:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$?bind_read_buffer@pecker_read_stream_form_memery@pecker_sdk@@QAEJPBDH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?bind_read_buffer@pecker_read_stream_form_memery@pecker_sdk@@QAEJPBDH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?bind_read_buffer@pecker_read_stream_form_memery@pecker_sdk@@QAEJPBDH@Z ENDP ; pecker_sdk::pecker_read_stream_form_memery::bind_read_buffer
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
EXTRN	__imp__sscanf:PROC
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?read_integer@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?read_integer@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAH@Z$0
__ehfuncinfo$?read_integer@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?read_integer@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?read_integer@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAH@Z
_TEXT	SEGMENT
$T67584 = -260						; size = 4
$T67585 = -248						; size = 4
_index$ = -44						; size = 4
_cs_lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_read_value$ = 8					; size = 4
?read_integer@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAH@Z PROC ; pecker_sdk::pecker_read_stream_form_memery::read_integer, COMDAT
; _this$ = ecx

; 41   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?read_integer@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 42   : 	if (null == _M_bind_read_buffer || 0 == _M_bind_read_size)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@read_integ
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@read_integ
$LN3@read_integ:

; 43   : 	{
; 44   : 		return P_ERR;

	or	eax, -1
	jmp	$LN5@read_integ
$LN4@read_integ:

; 45   : 	}
; 46   : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 47   : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 48   : 	int index = sscanf(_M_bind_read_buffer,"%d",&read_value);

	mov	esi, esp
	mov	eax, DWORD PTR _read_value$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__sscanf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _index$[ebp], eax

; 49   : 	if (index  > _M_bind_read_size)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $LN2@read_integ

; 50   : 	{
; 51   : 		_M_bind_read_buffer = null; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 52   : 		_M_bind_read_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 53   : 		return P_ERR;

	mov	DWORD PTR $T67584[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67584[ebp]
	jmp	SHORT $LN5@read_integ

; 54   : 	}
; 55   : 	else

	jmp	SHORT $LN1@read_integ
$LN2@read_integ:

; 56   : 	{
; 57   : 		_M_bind_read_buffer += index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 58   : 		_M_bind_read_size -= index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@read_integ:

; 59   : 	}
; 60   : 	return P_OK;

	mov	DWORD PTR $T67585[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67585[ebp]
$LN5@read_integ:

; 61   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@read_integ
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN11@read_integ:
	DD	1
	DD	$LN10@read_integ
$LN10@read_integ:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@read_integ
$LN8@read_integ:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?read_integer@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAH@Z$0:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$?read_integer@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-268]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?read_integer@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?read_integer@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAH@Z ENDP ; pecker_sdk::pecker_read_stream_form_memery::read_integer
PUBLIC	??_C@_03JALODAI@?$CFld?$AA@			; `string'
;	COMDAT ??_C@_03JALODAI@?$CFld?$AA@
CONST	SEGMENT
??_C@_03JALODAI@?$CFld?$AA@ DB '%ld', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?read_long@pecker_read_stream_form_memery@pecker_sdk@@UAEJAA_J@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?read_long@pecker_read_stream_form_memery@pecker_sdk@@UAEJAA_J@Z$0
__ehfuncinfo$?read_long@pecker_read_stream_form_memery@pecker_sdk@@UAEJAA_J@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?read_long@pecker_read_stream_form_memery@pecker_sdk@@UAEJAA_J@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?read_long@pecker_read_stream_form_memery@pecker_sdk@@UAEJAA_J@Z
_TEXT	SEGMENT
$T67598 = -260						; size = 4
$T67599 = -248						; size = 4
_index$ = -44						; size = 4
_cs_lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_read_value$ = 8					; size = 4
?read_long@pecker_read_stream_form_memery@pecker_sdk@@UAEJAA_J@Z PROC ; pecker_sdk::pecker_read_stream_form_memery::read_long, COMDAT
; _this$ = ecx

; 64   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?read_long@pecker_read_stream_form_memery@pecker_sdk@@UAEJAA_J@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 	if (null == _M_bind_read_buffer || 0 == _M_bind_read_size)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@read_long
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@read_long
$LN3@read_long:

; 66   : 	{
; 67   : 		return P_ERR;

	or	eax, -1
	jmp	$LN5@read_long
$LN4@read_long:

; 68   : 	}
; 69   : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 70   : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 71   : 	int index = sscanf(_M_bind_read_buffer,"%ld",&read_value);

	mov	esi, esp
	mov	eax, DWORD PTR _read_value$[ebp]
	push	eax
	push	OFFSET ??_C@_03JALODAI@?$CFld?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__sscanf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _index$[ebp], eax

; 72   : 	if (index  > _M_bind_read_size)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $LN2@read_long

; 73   : 	{
; 74   : 		_M_bind_read_buffer = null; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 75   : 		_M_bind_read_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 76   : 		return P_ERR;

	mov	DWORD PTR $T67598[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67598[ebp]
	jmp	SHORT $LN5@read_long

; 77   : 	}
; 78   : 	else

	jmp	SHORT $LN1@read_long
$LN2@read_long:

; 79   : 	{
; 80   : 		_M_bind_read_buffer += index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 81   : 		_M_bind_read_size -= index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@read_long:

; 82   : 	}
; 83   : 	return P_OK;

	mov	DWORD PTR $T67599[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67599[ebp]
$LN5@read_long:

; 84   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@read_long
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN11@read_long:
	DD	1
	DD	$LN10@read_long
$LN10@read_long:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@read_long
$LN8@read_long:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?read_long@pecker_read_stream_form_memery@pecker_sdk@@UAEJAA_J@Z$0:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$?read_long@pecker_read_stream_form_memery@pecker_sdk@@UAEJAA_J@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-268]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?read_long@pecker_read_stream_form_memery@pecker_sdk@@UAEJAA_J@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?read_long@pecker_read_stream_form_memery@pecker_sdk@@UAEJAA_J@Z ENDP ; pecker_sdk::pecker_read_stream_form_memery::read_long
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?read_char@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?read_char@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z$0
__ehfuncinfo$?read_char@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?read_char@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?read_char@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z
_TEXT	SEGMENT
$T67612 = -260						; size = 4
$T67613 = -248						; size = 4
$T67614 = -236						; size = 4
_cs_lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_read_value$ = 8					; size = 4
?read_char@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z PROC ; pecker_sdk::pecker_read_stream_form_memery::read_char, COMDAT
; _this$ = ecx

; 87   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?read_char@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 88   : 	if (null == _M_bind_read_buffer || 0 == _M_bind_read_size)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@read_char
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@read_char
$LN3@read_char:

; 89   : 	{
; 90   : 		return P_ERR;

	or	eax, -1
	jmp	$LN5@read_char
$LN4@read_char:

; 91   : 	}
; 92   : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 93   : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 94   : 
; 95   : 	if (_M_bind_read_size > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jle	SHORT $LN2@read_char

; 96   : 	{
; 97   : 		read_value = _M_bind_read_buffer[0];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _read_value$[ebp]
	mov	al, BYTE PTR [ecx]
	mov	BYTE PTR [edx], al

; 98   : 		++_M_bind_read_buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 99   : 		--_M_bind_read_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 100  : 		return P_OK;

	mov	DWORD PTR $T67612[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67612[ebp]
	jmp	SHORT $LN5@read_char

; 101  : 	}
; 102  : 	else

	jmp	SHORT $LN1@read_char
$LN2@read_char:

; 103  : 	{
; 104  : 		return P_ERR;

	mov	DWORD PTR $T67613[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67613[ebp]
	jmp	SHORT $LN5@read_char
$LN1@read_char:

; 105  : 	}
; 106  : 	//int index = sscanf(_M_bind_read_buffer,"%c",&read_value);
; 107  : 
; 108  : 	//if (index  > _M_bind_read_size)
; 109  : 	//{
; 110  : 	//	_M_bind_read_buffer = null; 
; 111  : 	//	_M_bind_read_size = 0;
; 112  : 	//	return P_ERR;
; 113  : 	//}
; 114  : 	//else
; 115  : 	//{
; 116  : 	//	_M_bind_read_buffer += index;
; 117  : 	//	_M_bind_read_size -= index;
; 118  : 	//}
; 119  : 	return P_OK;

	mov	DWORD PTR $T67614[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67614[ebp]
$LN5@read_char:

; 120  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@read_char
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN11@read_char:
	DD	1
	DD	$LN10@read_char
$LN10@read_char:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@read_char
$LN8@read_char:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?read_char@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z$0:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$?read_char@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-268]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?read_char@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?read_char@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z ENDP ; pecker_sdk::pecker_read_stream_form_memery::read_char
PUBLIC	??_C@_02NJPGOMH@?$CFf?$AA@			; `string'
;	COMDAT ??_C@_02NJPGOMH@?$CFf?$AA@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf?$AA@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?read_float@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?read_float@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z$0
__ehfuncinfo$?read_float@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?read_float@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?read_float@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z
_TEXT	SEGMENT
$T67627 = -260						; size = 4
$T67628 = -248						; size = 4
_index$ = -44						; size = 4
_cs_lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_read_value$ = 8					; size = 4
?read_float@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z PROC ; pecker_sdk::pecker_read_stream_form_memery::read_float, COMDAT
; _this$ = ecx

; 123  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?read_float@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 	if (null == _M_bind_read_buffer || 0 == _M_bind_read_size)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@read_float
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@read_float
$LN3@read_float:

; 125  : 	{
; 126  : 		return P_ERR;

	or	eax, -1
	jmp	$LN5@read_float
$LN4@read_float:

; 127  : 	}
; 128  : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 129  : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 130  : 	int index = sscanf(_M_bind_read_buffer,"%f",&read_value);

	mov	esi, esp
	mov	eax, DWORD PTR _read_value$[ebp]
	push	eax
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__sscanf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _index$[ebp], eax

; 131  : 	if (index > _M_bind_read_size)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $LN2@read_float

; 132  : 	{
; 133  : 		_M_bind_read_buffer = null; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 134  : 		_M_bind_read_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 135  : 		return P_ERR;

	mov	DWORD PTR $T67627[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67627[ebp]
	jmp	SHORT $LN5@read_float

; 136  : 	}
; 137  : 	else

	jmp	SHORT $LN1@read_float
$LN2@read_float:

; 138  : 	{
; 139  : 		_M_bind_read_buffer += index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 140  : 		_M_bind_read_size -= index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@read_float:

; 141  : 	}
; 142  : 	return P_OK;

	mov	DWORD PTR $T67628[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67628[ebp]
$LN5@read_float:

; 143  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@read_float
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN11@read_float:
	DD	1
	DD	$LN10@read_float
$LN10@read_float:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@read_float
$LN8@read_float:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?read_float@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z$0:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$?read_float@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-268]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?read_float@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?read_float@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z ENDP ; pecker_sdk::pecker_read_stream_form_memery::read_float
PUBLIC	??_C@_03DLDNIBIK@?$CFlf?$AA@			; `string'
;	COMDAT ??_C@_03DLDNIBIK@?$CFlf?$AA@
CONST	SEGMENT
??_C@_03DLDNIBIK@?$CFlf?$AA@ DB '%lf', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?read_double@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?read_double@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z$0
__ehfuncinfo$?read_double@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?read_double@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?read_double@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z
_TEXT	SEGMENT
$T67641 = -260						; size = 4
$T67642 = -248						; size = 4
_index$ = -44						; size = 4
_cs_lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_read_value$ = 8					; size = 4
?read_double@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z PROC ; pecker_sdk::pecker_read_stream_form_memery::read_double, COMDAT
; _this$ = ecx

; 146  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?read_double@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 	if (null == _M_bind_read_buffer || 0 == _M_bind_read_size)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@read_doubl
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@read_doubl
$LN3@read_doubl:

; 148  : 	{
; 149  : 		return P_ERR;

	or	eax, -1
	jmp	$LN5@read_doubl
$LN4@read_doubl:

; 150  : 	}
; 151  : 
; 152  : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 153  : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 154  : 	int index = sscanf(_M_bind_read_buffer,"%lf",&read_value);

	mov	esi, esp
	mov	eax, DWORD PTR _read_value$[ebp]
	push	eax
	push	OFFSET ??_C@_03DLDNIBIK@?$CFlf?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__sscanf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _index$[ebp], eax

; 155  : 	if (index > _M_bind_read_size)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jle	SHORT $LN2@read_doubl

; 156  : 	{
; 157  : 		_M_bind_read_buffer = null; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 158  : 		_M_bind_read_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 159  : 		return P_ERR;

	mov	DWORD PTR $T67641[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67641[ebp]
	jmp	SHORT $LN5@read_doubl

; 160  : 	}
; 161  : 	else

	jmp	SHORT $LN1@read_doubl
$LN2@read_doubl:

; 162  : 	{
; 163  : 		_M_bind_read_buffer += index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 164  : 		_M_bind_read_size -= index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@read_doubl:

; 165  : 	}
; 166  : 	return P_OK;

	mov	DWORD PTR $T67642[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67642[ebp]
$LN5@read_doubl:

; 167  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@read_doubl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN11@read_doubl:
	DD	1
	DD	$LN10@read_doubl
$LN10@read_doubl:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@read_doubl
$LN8@read_doubl:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?read_double@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z$0:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$?read_double@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-268]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?read_double@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?read_double@pecker_read_stream_form_memery@pecker_sdk@@UAEJAAD@Z ENDP ; pecker_sdk::pecker_read_stream_form_memery::read_double
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?read_chars@pecker_read_stream_form_memery@pecker_sdk@@UAEHPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?read_chars@pecker_read_stream_form_memery@pecker_sdk@@UAEHPADH@Z$0
__ehfuncinfo$?read_chars@pecker_read_stream_form_memery@pecker_sdk@@UAEHPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?read_chars@pecker_read_stream_form_memery@pecker_sdk@@UAEHPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?read_chars@pecker_read_stream_form_memery@pecker_sdk@@UAEHPADH@Z
_TEXT	SEGMENT
$T67655 = -272						; size = 4
_ireadsize$ = -68					; size = 4
_isubsize$ = -56					; size = 4
_read_char_value$ = -41					; size = 1
_cs_lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pread_buffer$ = 8					; size = 4
_read_buffer_size$ = 12					; size = 4
?read_chars@pecker_read_stream_form_memery@pecker_sdk@@UAEHPADH@Z PROC ; pecker_sdk::pecker_read_stream_form_memery::read_chars, COMDAT
; _this$ = ecx

; 170  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?read_chars@pecker_read_stream_form_memery@pecker_sdk@@UAEHPADH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 	if (null == _M_bind_read_buffer || 0 == _M_bind_read_size)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN9@read_chars
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN10@read_chars
$LN9@read_chars:

; 172  : 	{
; 173  : 		return 0;

	xor	eax, eax
	jmp	$LN11@read_chars
$LN10@read_chars:

; 174  : 	}
; 175  : 
; 176  : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 177  : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 178  : 	
; 179  : 	char read_char_value = 0;

	mov	BYTE PTR _read_char_value$[ebp], 0

; 180  : 	int isubsize = 0;

	mov	DWORD PTR _isubsize$[ebp], 0

; 181  : 	int ireadsize = 0;

	mov	DWORD PTR _ireadsize$[ebp], 0

; 182  : 	for (ireadsize=0;ireadsize<read_buffer_size;++ireadsize)

	mov	DWORD PTR _ireadsize$[ebp], 0
	jmp	SHORT $LN8@read_chars
$LN7@read_chars:
	mov	eax, DWORD PTR _ireadsize$[ebp]
	add	eax, 1
	mov	DWORD PTR _ireadsize$[ebp], eax
$LN8@read_chars:
	mov	eax, DWORD PTR _ireadsize$[ebp]
	cmp	eax, DWORD PTR _read_buffer_size$[ebp]
	jge	SHORT $LN6@read_chars

; 183  : 	{
; 184  : 		if (P_OK == read_char(read_char_value))

	mov	esi, esp
	lea	eax, DWORD PTR _read_char_value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN5@read_chars

; 185  : 		{
; 186  : 			if ( '\n' == read_char_value || 0 == read_char_value)

	movsx	eax, BYTE PTR _read_char_value$[ebp]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN3@read_chars
	movsx	eax, BYTE PTR _read_char_value$[ebp]
	test	eax, eax
	jne	SHORT $LN4@read_chars
$LN3@read_chars:

; 187  : 			{
; 188  : 				ireadsize -= isubsize;

	mov	eax, DWORD PTR _ireadsize$[ebp]
	sub	eax, DWORD PTR _isubsize$[ebp]
	mov	DWORD PTR _ireadsize$[ebp], eax

; 189  : 				break;

	jmp	SHORT $LN6@read_chars
$LN4@read_chars:

; 190  : 			}
; 191  : 			if ('\r' == read_char_value)

	movsx	eax, BYTE PTR _read_char_value$[ebp]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN2@read_chars

; 192  : 			{
; 193  : 				++isubsize;

	mov	eax, DWORD PTR _isubsize$[ebp]
	add	eax, 1
	mov	DWORD PTR _isubsize$[ebp], eax

; 194  : 				continue;

	jmp	SHORT $LN7@read_chars
$LN2@read_chars:

; 195  : 			}
; 196  : 			pread_buffer[ireadsize] = read_char_value;

	mov	eax, DWORD PTR _pread_buffer$[ebp]
	add	eax, DWORD PTR _ireadsize$[ebp]
	mov	cl, BYTE PTR _read_char_value$[ebp]
	mov	BYTE PTR [eax], cl

; 197  : 		}
; 198  : 		else

	jmp	SHORT $LN1@read_chars
$LN5@read_chars:

; 199  : 		{
; 200  : 			break;

	jmp	SHORT $LN6@read_chars
$LN1@read_chars:

; 201  : 		}
; 202  : 	}

	jmp	SHORT $LN7@read_chars
$LN6@read_chars:

; 203  : 
; 204  : 	return ireadsize;

	mov	eax, DWORD PTR _ireadsize$[ebp]
	mov	DWORD PTR $T67655[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67655[ebp]
$LN11@read_chars:

; 205  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@read_chars
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN18@read_chars:
	DD	2
	DD	$LN17@read_chars
$LN17@read_chars:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN14@read_chars
	DD	-41					; ffffffd7H
	DD	1
	DD	$LN15@read_chars
$LN15@read_chars:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN14@read_chars:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?read_chars@pecker_read_stream_form_memery@pecker_sdk@@UAEHPADH@Z$0:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$?read_chars@pecker_read_stream_form_memery@pecker_sdk@@UAEHPADH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-280]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?read_chars@pecker_read_stream_form_memery@pecker_sdk@@UAEHPADH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?read_chars@pecker_read_stream_form_memery@pecker_sdk@@UAEHPADH@Z ENDP ; pecker_sdk::pecker_read_stream_form_memery::read_chars
PUBLIC	??1Ipecker_write_stream@pecker_sdk@@UAE@XZ	; pecker_sdk::Ipecker_write_stream::~Ipecker_write_stream
PUBLIC	??_7pecker_write_stream_to_memery@pecker_sdk@@6B@ ; pecker_sdk::pecker_write_stream_to_memery::`vftable'
PUBLIC	??0Ipecker_write_stream@pecker_sdk@@QAE@XZ	; pecker_sdk::Ipecker_write_stream::Ipecker_write_stream
PUBLIC	??0pecker_write_stream_to_memery@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_write_stream_to_memery::pecker_write_stream_to_memery
PUBLIC	??_R4pecker_write_stream_to_memery@pecker_sdk@@6B@ ; pecker_sdk::pecker_write_stream_to_memery::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVpecker_write_stream_to_memery@pecker_sdk@@@8 ; pecker_sdk::pecker_write_stream_to_memery `RTTI Type Descriptor'
PUBLIC	??_R3pecker_write_stream_to_memery@pecker_sdk@@8 ; pecker_sdk::pecker_write_stream_to_memery::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2pecker_write_stream_to_memery@pecker_sdk@@8 ; pecker_sdk::pecker_write_stream_to_memery::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@pecker_write_stream_to_memery@pecker_sdk@@8 ; pecker_sdk::pecker_write_stream_to_memery::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Ipecker_write_stream@pecker_sdk@@8 ; pecker_sdk::Ipecker_write_stream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIpecker_write_stream@pecker_sdk@@@8	; pecker_sdk::Ipecker_write_stream `RTTI Type Descriptor'
PUBLIC	??_R3Ipecker_write_stream@pecker_sdk@@8		; pecker_sdk::Ipecker_write_stream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Ipecker_write_stream@pecker_sdk@@8		; pecker_sdk::Ipecker_write_stream::`RTTI Base Class Array'
PUBLIC	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer
PUBLIC	?write_unsigned_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJI@Z ; pecker_sdk::pecker_write_stream_to_memery::write_unsigned_integer
PUBLIC	?write_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_J@Z ; pecker_sdk::pecker_write_stream_to_memery::write_long
PUBLIC	?write_unsigned_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_K@Z ; pecker_sdk::pecker_write_stream_to_memery::write_unsigned_long
PUBLIC	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char
PUBLIC	?write_byte@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_byte
PUBLIC	?write_float@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_float
PUBLIC	?write_double@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_double
PUBLIC	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars
EXTRN	??_Epecker_write_stream_to_memery@pecker_sdk@@UAEPAXI@Z:PROC ; pecker_sdk::pecker_write_stream_to_memery::`vector deleting destructor'
;	COMDAT ??_R2Ipecker_write_stream@pecker_sdk@@8
rdata$r	SEGMENT
??_R2Ipecker_write_stream@pecker_sdk@@8 DD FLAT:??_R1A@?0A@EA@Ipecker_write_stream@pecker_sdk@@8 ; pecker_sdk::Ipecker_write_stream::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Ipecker_write_stream@pecker_sdk@@8
rdata$r	SEGMENT
??_R3Ipecker_write_stream@pecker_sdk@@8 DD 00H		; pecker_sdk::Ipecker_write_stream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Ipecker_write_stream@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIpecker_write_stream@pecker_sdk@@@8
_DATA	SEGMENT
??_R0?AUIpecker_write_stream@pecker_sdk@@@8 DD FLAT:??_7type_info@@6B@ ; pecker_sdk::Ipecker_write_stream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIpecker_write_stream@pecker_sdk@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Ipecker_write_stream@pecker_sdk@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Ipecker_write_stream@pecker_sdk@@8 DD FLAT:??_R0?AUIpecker_write_stream@pecker_sdk@@@8 ; pecker_sdk::Ipecker_write_stream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Ipecker_write_stream@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@pecker_write_stream_to_memery@pecker_sdk@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@pecker_write_stream_to_memery@pecker_sdk@@8 DD FLAT:??_R0?AVpecker_write_stream_to_memery@pecker_sdk@@@8 ; pecker_sdk::pecker_write_stream_to_memery::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3pecker_write_stream_to_memery@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R2pecker_write_stream_to_memery@pecker_sdk@@8
rdata$r	SEGMENT
??_R2pecker_write_stream_to_memery@pecker_sdk@@8 DD FLAT:??_R1A@?0A@EA@pecker_write_stream_to_memery@pecker_sdk@@8 ; pecker_sdk::pecker_write_stream_to_memery::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Ipecker_write_stream@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R3pecker_write_stream_to_memery@pecker_sdk@@8
rdata$r	SEGMENT
??_R3pecker_write_stream_to_memery@pecker_sdk@@8 DD 00H	; pecker_sdk::pecker_write_stream_to_memery::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2pecker_write_stream_to_memery@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVpecker_write_stream_to_memery@pecker_sdk@@@8
_DATA	SEGMENT
??_R0?AVpecker_write_stream_to_memery@pecker_sdk@@@8 DD FLAT:??_7type_info@@6B@ ; pecker_sdk::pecker_write_stream_to_memery `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVpecker_write_stream_to_memery@pecker_sdk@@', 00H
_DATA	ENDS
;	COMDAT ??_R4pecker_write_stream_to_memery@pecker_sdk@@6B@
rdata$r	SEGMENT
??_R4pecker_write_stream_to_memery@pecker_sdk@@6B@ DD 00H ; pecker_sdk::pecker_write_stream_to_memery::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVpecker_write_stream_to_memery@pecker_sdk@@@8
	DD	FLAT:??_R3pecker_write_stream_to_memery@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_7pecker_write_stream_to_memery@pecker_sdk@@6B@
CONST	SEGMENT
??_7pecker_write_stream_to_memery@pecker_sdk@@6B@ DD FLAT:??_R4pecker_write_stream_to_memery@pecker_sdk@@6B@ ; pecker_sdk::pecker_write_stream_to_memery::`vftable'
	DD	FLAT:??_Epecker_write_stream_to_memery@pecker_sdk@@UAEPAXI@Z
	DD	FLAT:?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z
	DD	FLAT:?write_unsigned_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJI@Z
	DD	FLAT:?write_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_J@Z
	DD	FLAT:?write_unsigned_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_K@Z
	DD	FLAT:?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
	DD	FLAT:?write_byte@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
	DD	FLAT:?write_float@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
	DD	FLAT:?write_double@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
	DD	FLAT:?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0pecker_write_stream_to_memery@pecker_sdk@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0pecker_write_stream_to_memery@pecker_sdk@@QAE@XZ$0
__ehfuncinfo$??0pecker_write_stream_to_memery@pecker_sdk@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0pecker_write_stream_to_memery@pecker_sdk@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0pecker_write_stream_to_memery@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0pecker_write_stream_to_memery@pecker_sdk@@QAE@XZ PROC ; pecker_sdk::pecker_write_stream_to_memery::pecker_write_stream_to_memery, COMDAT
; _this$ = ecx

; 210  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0pecker_write_stream_to_memery@pecker_sdk@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Ipecker_write_stream@pecker_sdk@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7pecker_write_stream_to_memery@pecker_sdk@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0pecker_critical_section@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_section::pecker_critical_section

; 211  : 
; 212  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0pecker_write_stream_to_memery@pecker_sdk@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Ipecker_write_stream@pecker_sdk@@UAE@XZ ; pecker_sdk::Ipecker_write_stream::~Ipecker_write_stream
__ehhandler$??0pecker_write_stream_to_memery@pecker_sdk@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0pecker_write_stream_to_memery@pecker_sdk@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0pecker_write_stream_to_memery@pecker_sdk@@QAE@XZ ENDP ; pecker_sdk::pecker_write_stream_to_memery::pecker_write_stream_to_memery
PUBLIC	??_7Ipecker_write_stream@pecker_sdk@@6B@	; pecker_sdk::Ipecker_write_stream::`vftable'
PUBLIC	??_R4Ipecker_write_stream@pecker_sdk@@6B@	; pecker_sdk::Ipecker_write_stream::`RTTI Complete Object Locator'
EXTRN	??_EIpecker_write_stream@pecker_sdk@@UAEPAXI@Z:PROC ; pecker_sdk::Ipecker_write_stream::`vector deleting destructor'
;	COMDAT ??_R4Ipecker_write_stream@pecker_sdk@@6B@
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\native\pecker_stream.h
rdata$r	SEGMENT
??_R4Ipecker_write_stream@pecker_sdk@@6B@ DD 00H	; pecker_sdk::Ipecker_write_stream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIpecker_write_stream@pecker_sdk@@@8
	DD	FLAT:??_R3Ipecker_write_stream@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_7Ipecker_write_stream@pecker_sdk@@6B@
CONST	SEGMENT
??_7Ipecker_write_stream@pecker_sdk@@6B@ DD FLAT:??_R4Ipecker_write_stream@pecker_sdk@@6B@ ; pecker_sdk::Ipecker_write_stream::`vftable'
	DD	FLAT:??_EIpecker_write_stream@pecker_sdk@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??1Ipecker_write_stream@pecker_sdk@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Ipecker_write_stream@pecker_sdk@@UAE@XZ PROC		; pecker_sdk::Ipecker_write_stream::~Ipecker_write_stream, COMDAT
; _this$ = ecx

; 33   : 	virtual ~Ipecker_write_stream(){;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Ipecker_write_stream@pecker_sdk@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1Ipecker_write_stream@pecker_sdk@@UAE@XZ ENDP		; pecker_sdk::Ipecker_write_stream::~Ipecker_write_stream
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_GIpecker_write_stream@pecker_sdk@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GIpecker_write_stream@pecker_sdk@@UAEPAXI@Z PROC	; pecker_sdk::Ipecker_write_stream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Ipecker_write_stream@pecker_sdk@@UAE@XZ ; pecker_sdk::Ipecker_write_stream::~Ipecker_write_stream
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GIpecker_write_stream@pecker_sdk@@UAEPAXI@Z ENDP	; pecker_sdk::Ipecker_write_stream::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_write_stream_to_memery::~pecker_write_stream_to_memery
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gpecker_write_stream_to_memery@pecker_sdk@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gpecker_write_stream_to_memery@pecker_sdk@@UAEPAXI@Z PROC ; pecker_sdk::pecker_write_stream_to_memery::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_write_stream_to_memery::~pecker_write_stream_to_memery
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gpecker_write_stream_to_memery@pecker_sdk@@UAEPAXI@Z ENDP ; pecker_sdk::pecker_write_stream_to_memery::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0Ipecker_write_stream@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Ipecker_write_stream@pecker_sdk@@QAE@XZ PROC		; pecker_sdk::Ipecker_write_stream::Ipecker_write_stream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Ipecker_write_stream@pecker_sdk@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Ipecker_write_stream@pecker_sdk@@QAE@XZ ENDP		; pecker_sdk::Ipecker_write_stream::Ipecker_write_stream
_TEXT	ENDS
;	COMDAT xdata$x
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\native\pecker_stream.cpp
xdata$x	SEGMENT
__unwindtable$??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ$2
__ehfuncinfo$??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ
_TEXT	SEGMENT
_cs_lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ PROC ; pecker_sdk::pecker_write_stream_to_memery::~pecker_write_stream_to_memery, COMDAT
; _this$ = ecx

; 215  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7pecker_write_stream_to_memery@pecker_sdk@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 216  : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 217  : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 218  : 
; 219  : 	_M_bind_write_buffer = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 220  : 	_M_bind_write_size = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 221  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1pecker_critical_section@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_section::~pecker_critical_section
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Ipecker_write_stream@pecker_sdk@@UAE@XZ ; pecker_sdk::Ipecker_write_stream::~Ipecker_write_stream
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@pecker_wri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@pecker_wri:
	DD	1
	DD	$LN8@pecker_wri
$LN8@pecker_wri:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN6@pecker_wri
$LN6@pecker_wri:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1Ipecker_write_stream@pecker_sdk@@UAE@XZ ; pecker_sdk::Ipecker_write_stream::~Ipecker_write_stream
__unwindfunclet$??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1pecker_critical_section@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_section::~pecker_critical_section
__unwindfunclet$??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ$2:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ ENDP ; pecker_sdk::pecker_write_stream_to_memery::~pecker_write_stream_to_memery
PUBLIC	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z$0
__ehfuncinfo$?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z
_TEXT	SEGMENT
$T67701 = -236						; size = 4
_cs_lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pbind_buffer$ = 8					; size = 4
_bind_size$ = 12					; size = 4
?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z PROC ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer, COMDAT
; _this$ = ecx

; 224  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 225  : 	if (null == pbind_buffer || bind_size <= 0)

	cmp	DWORD PTR _pbind_buffer$[ebp], 0
	je	SHORT $LN1@bind_write
	cmp	DWORD PTR _bind_size$[ebp], 0
	jg	SHORT $LN2@bind_write
$LN1@bind_write:

; 226  : 	{
; 227  : 		return P_ERR;

	or	eax, -1
	jmp	SHORT $LN3@bind_write
$LN2@bind_write:

; 228  : 	}
; 229  : 
; 230  : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 231  : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 232  : 
; 233  : 	_M_bind_write_buffer = pbind_buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pbind_buffer$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 234  : 	_M_bind_write_size = bind_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _bind_size$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 235  : 	
; 236  : 	return P_OK;

	mov	DWORD PTR $T67701[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67701[ebp]
$LN3@bind_write:

; 237  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@bind_write
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN9@bind_write:
	DD	1
	DD	$LN8@bind_write
$LN8@bind_write:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN6@bind_write
$LN6@bind_write:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z$0:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ENDP ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer
PUBLIC	__$ArrayPad$
EXTRN	__imp__sprintf:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z$0
__ehfuncinfo$?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z
_TEXT	SEGMENT
$T67715 = -292						; size = 4
$T67716 = -280						; size = 4
_i$67244 = -76						; size = 4
_index$ = -64						; size = 4
_tempstring$ = -52					; size = 5
_cs_lock$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_write_value$ = 8					; size = 4
?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z PROC ; pecker_sdk::pecker_write_stream_to_memery::write_integer, COMDAT
; _this$ = ecx

; 240  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 241  : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 242  : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 243  : 	
; 244  : 	char tempstring[5];
; 245  : 	int index = sprintf(tempstring,"%d",write_value);

	mov	esi, esp
	mov	eax, DWORD PTR _write_value$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _tempstring$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _index$[ebp], eax

; 246  : 	if (index < _M_bind_write_size)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN4@write_inte

; 247  : 	{
; 248  : 		for (int i=0;i<index;++i)

	mov	DWORD PTR _i$67244[ebp], 0
	jmp	SHORT $LN3@write_inte
$LN2@write_inte:
	mov	eax, DWORD PTR _i$67244[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67244[ebp], eax
$LN3@write_inte:
	mov	eax, DWORD PTR _i$67244[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	jge	SHORT $LN1@write_inte

; 249  : 		{
; 250  : 			_M_bind_write_buffer[i] = tempstring[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$67244[ebp]
	mov	eax, DWORD PTR _i$67244[ebp]
	mov	al, BYTE PTR _tempstring$[ebp+eax]
	mov	BYTE PTR [ecx+edx], al

; 251  : 		}

	jmp	SHORT $LN2@write_inte
$LN1@write_inte:

; 252  : 		_M_bind_write_buffer[index] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	mov	BYTE PTR [ecx+edx], 0

; 253  : 		_M_bind_write_buffer+=index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 254  : 		_M_bind_write_size -= index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 255  : 		return P_OK;

	mov	DWORD PTR $T67715[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67715[ebp]
	jmp	SHORT $LN5@write_inte
$LN4@write_inte:

; 256  : 	}
; 257  : 	return P_ERR;

	mov	DWORD PTR $T67716[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67716[ebp]
$LN5@write_inte:

; 258  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@write_inte
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN12@write_inte:
	DD	2
	DD	$LN11@write_inte
$LN11@write_inte:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN8@write_inte
	DD	-52					; ffffffccH
	DD	5
	DD	$LN9@write_inte
$LN9@write_inte:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN8@write_inte:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z$0:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-300]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ENDP ; pecker_sdk::pecker_write_stream_to_memery::write_integer
PUBLIC	??_C@_02GMHACPFF@?$CFu?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02GMHACPFF@?$CFu?$AA@
CONST	SEGMENT
??_C@_02GMHACPFF@?$CFu?$AA@ DB '%u', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?write_unsigned_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?write_unsigned_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJI@Z$0
__ehfuncinfo$?write_unsigned_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?write_unsigned_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?write_unsigned_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJI@Z
_TEXT	SEGMENT
$T67731 = -292						; size = 4
$T67732 = -280						; size = 4
_i$67259 = -76						; size = 4
_index$ = -64						; size = 4
_tempstring$ = -52					; size = 5
_cs_lock$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_write_value$ = 8					; size = 4
?write_unsigned_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJI@Z PROC ; pecker_sdk::pecker_write_stream_to_memery::write_unsigned_integer, COMDAT
; _this$ = ecx

; 261  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?write_unsigned_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 262  : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 263  : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 264  : 
; 265  : 	char tempstring[5];
; 266  : 	int index = sprintf(tempstring,"%u",write_value);

	mov	esi, esp
	mov	eax, DWORD PTR _write_value$[ebp]
	push	eax
	push	OFFSET ??_C@_02GMHACPFF@?$CFu?$AA@
	lea	ecx, DWORD PTR _tempstring$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _index$[ebp], eax

; 267  : 	if (index < _M_bind_write_size)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN4@write_unsi

; 268  : 	{
; 269  : 		for (int i=0;i<index;++i)

	mov	DWORD PTR _i$67259[ebp], 0
	jmp	SHORT $LN3@write_unsi
$LN2@write_unsi:
	mov	eax, DWORD PTR _i$67259[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67259[ebp], eax
$LN3@write_unsi:
	mov	eax, DWORD PTR _i$67259[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	jge	SHORT $LN1@write_unsi

; 270  : 		{
; 271  : 			_M_bind_write_buffer[i] = tempstring[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$67259[ebp]
	mov	eax, DWORD PTR _i$67259[ebp]
	mov	al, BYTE PTR _tempstring$[ebp+eax]
	mov	BYTE PTR [ecx+edx], al

; 272  : 		}

	jmp	SHORT $LN2@write_unsi
$LN1@write_unsi:

; 273  : 		_M_bind_write_buffer[index] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	mov	BYTE PTR [ecx+edx], 0

; 274  : 		_M_bind_write_buffer+=index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 275  : 		_M_bind_write_size -= index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 276  : 		return P_OK;

	mov	DWORD PTR $T67731[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67731[ebp]
	jmp	SHORT $LN5@write_unsi
$LN4@write_unsi:

; 277  : 	}
; 278  : 	return P_ERR;

	mov	DWORD PTR $T67732[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67732[ebp]
$LN5@write_unsi:

; 279  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@write_unsi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN12@write_unsi:
	DD	2
	DD	$LN11@write_unsi
$LN11@write_unsi:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN8@write_unsi
	DD	-52					; ffffffccH
	DD	5
	DD	$LN9@write_unsi
$LN9@write_unsi:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN8@write_unsi:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?write_unsigned_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJI@Z$0:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$?write_unsigned_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-300]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?write_unsigned_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?write_unsigned_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJI@Z ENDP ; pecker_sdk::pecker_write_stream_to_memery::write_unsigned_integer
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?write_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_J@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?write_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_J@Z$0
__ehfuncinfo$?write_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_J@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?write_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_J@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?write_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_J@Z
_TEXT	SEGMENT
$T67747 = -296						; size = 4
$T67748 = -284						; size = 4
_i$67273 = -80						; size = 4
_index$ = -68						; size = 4
_tempstring$ = -56					; size = 9
_cs_lock$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_write_value$ = 8					; size = 8
?write_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_J@Z PROC ; pecker_sdk::pecker_write_stream_to_memery::write_long, COMDAT
; _this$ = ecx

; 282  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?write_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_J@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 283  : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 284  : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 285  : 	char tempstring[9];
; 286  : 	int index = sprintf(tempstring,"%ld",write_value);

	mov	esi, esp
	mov	eax, DWORD PTR _write_value$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _write_value$[ebp]
	push	ecx
	push	OFFSET ??_C@_03JALODAI@?$CFld?$AA@
	lea	edx, DWORD PTR _tempstring$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _index$[ebp], eax

; 287  : 	if (index < _M_bind_write_size)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN4@write_long

; 288  : 	{
; 289  : 		for (int i=0;i<index;++i)

	mov	DWORD PTR _i$67273[ebp], 0
	jmp	SHORT $LN3@write_long
$LN2@write_long:
	mov	eax, DWORD PTR _i$67273[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67273[ebp], eax
$LN3@write_long:
	mov	eax, DWORD PTR _i$67273[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	jge	SHORT $LN1@write_long

; 290  : 		{
; 291  : 			_M_bind_write_buffer[i] = tempstring[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$67273[ebp]
	mov	eax, DWORD PTR _i$67273[ebp]
	mov	al, BYTE PTR _tempstring$[ebp+eax]
	mov	BYTE PTR [ecx+edx], al

; 292  : 		}

	jmp	SHORT $LN2@write_long
$LN1@write_long:

; 293  : 		_M_bind_write_buffer[index] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	mov	BYTE PTR [ecx+edx], 0

; 294  : 		_M_bind_write_buffer+=index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 295  : 		_M_bind_write_size -= index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 296  : 		return P_OK;

	mov	DWORD PTR $T67747[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67747[ebp]
	jmp	SHORT $LN5@write_long
$LN4@write_long:

; 297  : 	}
; 298  : 	return P_ERR;

	mov	DWORD PTR $T67748[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67748[ebp]
$LN5@write_long:

; 299  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@write_long
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN12@write_long:
	DD	2
	DD	$LN11@write_long
$LN11@write_long:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN8@write_long
	DD	-56					; ffffffc8H
	DD	9
	DD	$LN9@write_long
$LN9@write_long:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN8@write_long:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?write_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_J@Z$0:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$?write_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_J@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-304]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?write_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_J@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?write_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_J@Z ENDP ; pecker_sdk::pecker_write_stream_to_memery::write_long
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?write_unsigned_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?write_unsigned_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_K@Z$0
__ehfuncinfo$?write_unsigned_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?write_unsigned_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?write_unsigned_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_K@Z
_TEXT	SEGMENT
$T67763 = -296						; size = 4
$T67764 = -284						; size = 4
_i$67287 = -80						; size = 4
_index$ = -68						; size = 4
_tempstring$ = -56					; size = 9
_cs_lock$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_write_value$ = 8					; size = 8
?write_unsigned_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_K@Z PROC ; pecker_sdk::pecker_write_stream_to_memery::write_unsigned_long, COMDAT
; _this$ = ecx

; 302  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?write_unsigned_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_K@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 303  : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 304  : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 305  : 	char tempstring[9];
; 306  : 	int index = sprintf(tempstring,"%ld",write_value);

	mov	esi, esp
	mov	eax, DWORD PTR _write_value$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _write_value$[ebp]
	push	ecx
	push	OFFSET ??_C@_03JALODAI@?$CFld?$AA@
	lea	edx, DWORD PTR _tempstring$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _index$[ebp], eax

; 307  : 	if (index < _M_bind_write_size)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN4@write_unsi@2

; 308  : 	{
; 309  : 		for (int i=0;i<index;++i)

	mov	DWORD PTR _i$67287[ebp], 0
	jmp	SHORT $LN3@write_unsi@2
$LN2@write_unsi@2:
	mov	eax, DWORD PTR _i$67287[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67287[ebp], eax
$LN3@write_unsi@2:
	mov	eax, DWORD PTR _i$67287[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	jge	SHORT $LN1@write_unsi@2

; 310  : 		{
; 311  : 			_M_bind_write_buffer[i] = tempstring[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$67287[ebp]
	mov	eax, DWORD PTR _i$67287[ebp]
	mov	al, BYTE PTR _tempstring$[ebp+eax]
	mov	BYTE PTR [ecx+edx], al

; 312  : 		}

	jmp	SHORT $LN2@write_unsi@2
$LN1@write_unsi@2:

; 313  : 		_M_bind_write_buffer[index] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	mov	BYTE PTR [ecx+edx], 0

; 314  : 		_M_bind_write_buffer+=index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 315  : 		_M_bind_write_size -= index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 316  : 		return P_OK;

	mov	DWORD PTR $T67763[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67763[ebp]
	jmp	SHORT $LN5@write_unsi@2
$LN4@write_unsi@2:

; 317  : 	}
; 318  : 	return P_ERR;

	mov	DWORD PTR $T67764[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67764[ebp]
$LN5@write_unsi@2:

; 319  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@write_unsi@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN12@write_unsi@2:
	DD	2
	DD	$LN11@write_unsi@2
$LN11@write_unsi@2:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN8@write_unsi@2
	DD	-56					; ffffffc8H
	DD	9
	DD	$LN9@write_unsi@2
$LN9@write_unsi@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN8@write_unsi@2:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?write_unsigned_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_K@Z$0:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$?write_unsigned_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_K@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-304]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?write_unsigned_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_K@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?write_unsigned_long@pecker_write_stream_to_memery@pecker_sdk@@UAEJ_K@Z ENDP ; pecker_sdk::pecker_write_stream_to_memery::write_unsigned_long
PUBLIC	??_C@_02HAOIJKIC@?$CFc?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_02HAOIJKIC@?$CFc?$AA@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc?$AA@ DB '%c', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z$0
__ehfuncinfo$?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
_TEXT	SEGMENT
$T67779 = -292						; size = 4
$T67780 = -280						; size = 4
_i$67302 = -76						; size = 4
_index$ = -64						; size = 4
_tempstring$ = -52					; size = 5
_cs_lock$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_write_value$ = 8					; size = 1
?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z PROC ; pecker_sdk::pecker_write_stream_to_memery::write_char, COMDAT
; _this$ = ecx

; 322  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 323  : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 324  : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 325  : 
; 326  : 	char tempstring[5];
; 327  : 	int index = sprintf(tempstring,"%c",write_value);

	movsx	eax, BYTE PTR _write_value$[ebp]
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_02HAOIJKIC@?$CFc?$AA@
	lea	ecx, DWORD PTR _tempstring$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _index$[ebp], eax

; 328  : 	if (index < _M_bind_write_size)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN4@write_char

; 329  : 	{
; 330  : 		for (int i=0;i<index;++i)

	mov	DWORD PTR _i$67302[ebp], 0
	jmp	SHORT $LN3@write_char
$LN2@write_char:
	mov	eax, DWORD PTR _i$67302[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67302[ebp], eax
$LN3@write_char:
	mov	eax, DWORD PTR _i$67302[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	jge	SHORT $LN1@write_char

; 331  : 		{
; 332  : 			_M_bind_write_buffer[i] = tempstring[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$67302[ebp]
	mov	eax, DWORD PTR _i$67302[ebp]
	mov	al, BYTE PTR _tempstring$[ebp+eax]
	mov	BYTE PTR [ecx+edx], al

; 333  : 		}

	jmp	SHORT $LN2@write_char
$LN1@write_char:

; 334  : 		_M_bind_write_buffer[index] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	mov	BYTE PTR [ecx+edx], 0

; 335  : 		_M_bind_write_buffer+=index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 336  : 		_M_bind_write_size -= index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 337  : 		return P_OK;

	mov	DWORD PTR $T67779[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67779[ebp]
	jmp	SHORT $LN5@write_char
$LN4@write_char:

; 338  : 	}
; 339  : 	return P_ERR;

	mov	DWORD PTR $T67780[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67780[ebp]
$LN5@write_char:

; 340  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@write_char
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN12@write_char:
	DD	2
	DD	$LN11@write_char
$LN11@write_char:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN8@write_char
	DD	-52					; ffffffccH
	DD	5
	DD	$LN9@write_char
$LN9@write_char:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN8@write_char:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z$0:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-300]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ENDP ; pecker_sdk::pecker_write_stream_to_memery::write_char
PUBLIC	??_C@_04NOJCDH@?$CF02x?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_04NOJCDH@?$CF02x?$AA@
CONST	SEGMENT
??_C@_04NOJCDH@?$CF02x?$AA@ DB '%02x', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?write_byte@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?write_byte@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z$0
__ehfuncinfo$?write_byte@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?write_byte@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?write_byte@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
_TEXT	SEGMENT
$T67795 = -292						; size = 4
$T67796 = -280						; size = 4
_i$67317 = -76						; size = 4
_index$ = -64						; size = 4
_tempstring$ = -52					; size = 5
_cs_lock$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_write_value$ = 8					; size = 1
?write_byte@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z PROC ; pecker_sdk::pecker_write_stream_to_memery::write_byte, COMDAT
; _this$ = ecx

; 343  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?write_byte@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 344  : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 345  : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 346  : 
; 347  : 
; 348  : 	char tempstring[5];
; 349  : 	int index = sprintf(tempstring,"%02x",write_value);

	movsx	eax, BYTE PTR _write_value$[ebp]
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_04NOJCDH@?$CF02x?$AA@
	lea	ecx, DWORD PTR _tempstring$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _index$[ebp], eax

; 350  : 	if (index < _M_bind_write_size)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN4@write_byte

; 351  : 	{
; 352  : 		for (int i=0;i<index;++i)

	mov	DWORD PTR _i$67317[ebp], 0
	jmp	SHORT $LN3@write_byte
$LN2@write_byte:
	mov	eax, DWORD PTR _i$67317[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67317[ebp], eax
$LN3@write_byte:
	mov	eax, DWORD PTR _i$67317[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	jge	SHORT $LN1@write_byte

; 353  : 		{
; 354  : 			_M_bind_write_buffer[i] = tempstring[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$67317[ebp]
	mov	eax, DWORD PTR _i$67317[ebp]
	mov	al, BYTE PTR _tempstring$[ebp+eax]
	mov	BYTE PTR [ecx+edx], al

; 355  : 		}

	jmp	SHORT $LN2@write_byte
$LN1@write_byte:

; 356  : 		_M_bind_write_buffer[index] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	mov	BYTE PTR [ecx+edx], 0

; 357  : 		_M_bind_write_buffer+=index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 358  : 		_M_bind_write_size -= index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 359  : 		return P_OK;

	mov	DWORD PTR $T67795[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67795[ebp]
	jmp	SHORT $LN5@write_byte
$LN4@write_byte:

; 360  : 	}
; 361  : 	return P_ERR;

	mov	DWORD PTR $T67796[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67796[ebp]
$LN5@write_byte:

; 362  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@write_byte
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN12@write_byte:
	DD	2
	DD	$LN11@write_byte
$LN11@write_byte:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN8@write_byte
	DD	-52					; ffffffccH
	DD	5
	DD	$LN9@write_byte
$LN9@write_byte:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN8@write_byte:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?write_byte@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z$0:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$?write_byte@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-300]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?write_byte@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?write_byte@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ENDP ; pecker_sdk::pecker_write_stream_to_memery::write_byte
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?write_float@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?write_float@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z$0
__ehfuncinfo$?write_float@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?write_float@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?write_float@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
_TEXT	SEGMENT
$T67811 = -292						; size = 4
$T67812 = -280						; size = 4
_i$67331 = -76						; size = 4
_index$ = -64						; size = 4
_tempstring$ = -52					; size = 5
_cs_lock$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_write_value$ = 8					; size = 1
?write_float@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z PROC ; pecker_sdk::pecker_write_stream_to_memery::write_float, COMDAT
; _this$ = ecx

; 365  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?write_float@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 366  : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 367  : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 368  : 
; 369  : 	char tempstring[5];
; 370  : 	int index = sprintf(tempstring,"%f",write_value);

	movsx	eax, BYTE PTR _write_value$[ebp]
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	lea	ecx, DWORD PTR _tempstring$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _index$[ebp], eax

; 371  : 	if (index < _M_bind_write_size)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN4@write_floa

; 372  : 	{
; 373  : 		for (int i=0;i<index;++i)

	mov	DWORD PTR _i$67331[ebp], 0
	jmp	SHORT $LN3@write_floa
$LN2@write_floa:
	mov	eax, DWORD PTR _i$67331[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67331[ebp], eax
$LN3@write_floa:
	mov	eax, DWORD PTR _i$67331[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	jge	SHORT $LN1@write_floa

; 374  : 		{
; 375  : 			_M_bind_write_buffer[i] = tempstring[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$67331[ebp]
	mov	eax, DWORD PTR _i$67331[ebp]
	mov	al, BYTE PTR _tempstring$[ebp+eax]
	mov	BYTE PTR [ecx+edx], al

; 376  : 		}

	jmp	SHORT $LN2@write_floa
$LN1@write_floa:

; 377  : 		_M_bind_write_buffer[index] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	mov	BYTE PTR [ecx+edx], 0

; 378  : 		_M_bind_write_buffer+=index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 379  : 		_M_bind_write_size -= index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 380  : 		return P_OK;

	mov	DWORD PTR $T67811[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67811[ebp]
	jmp	SHORT $LN5@write_floa
$LN4@write_floa:

; 381  : 	}
; 382  : 	return P_ERR;

	mov	DWORD PTR $T67812[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67812[ebp]
$LN5@write_floa:

; 383  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@write_floa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN12@write_floa:
	DD	2
	DD	$LN11@write_floa
$LN11@write_floa:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN8@write_floa
	DD	-52					; ffffffccH
	DD	5
	DD	$LN9@write_floa
$LN9@write_floa:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN8@write_floa:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?write_float@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z$0:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$?write_float@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-300]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?write_float@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?write_float@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ENDP ; pecker_sdk::pecker_write_stream_to_memery::write_float
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?write_double@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?write_double@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z$0
__ehfuncinfo$?write_double@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?write_double@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?write_double@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
_TEXT	SEGMENT
$T67827 = -292						; size = 4
$T67828 = -280						; size = 4
_i$67345 = -76						; size = 4
_index$ = -64						; size = 4
_tempstring$ = -52					; size = 5
_cs_lock$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_write_value$ = 8					; size = 1
?write_double@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z PROC ; pecker_sdk::pecker_write_stream_to_memery::write_double, COMDAT
; _this$ = ecx

; 386  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?write_double@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 387  : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 388  : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 389  : 	char tempstring[5];
; 390  : 	int index = sprintf(tempstring,"%f",write_value);

	movsx	eax, BYTE PTR _write_value$[ebp]
	mov	esi, esp
	push	eax
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	lea	ecx, DWORD PTR _tempstring$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _index$[ebp], eax

; 391  : 	if (index < _M_bind_write_size)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN4@write_doub

; 392  : 	{
; 393  : 		for (int i=0;i<index;++i)

	mov	DWORD PTR _i$67345[ebp], 0
	jmp	SHORT $LN3@write_doub
$LN2@write_doub:
	mov	eax, DWORD PTR _i$67345[ebp]
	add	eax, 1
	mov	DWORD PTR _i$67345[ebp], eax
$LN3@write_doub:
	mov	eax, DWORD PTR _i$67345[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	jge	SHORT $LN1@write_doub

; 394  : 		{
; 395  : 			_M_bind_write_buffer[i] = tempstring[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$67345[ebp]
	mov	eax, DWORD PTR _i$67345[ebp]
	mov	al, BYTE PTR _tempstring$[ebp+eax]
	mov	BYTE PTR [ecx+edx], al

; 396  : 		}

	jmp	SHORT $LN2@write_doub
$LN1@write_doub:

; 397  : 		_M_bind_write_buffer[index] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	mov	BYTE PTR [ecx+edx], 0

; 398  : 		_M_bind_write_buffer+=index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 399  : 		_M_bind_write_size -= index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 400  : 		return P_OK;

	mov	DWORD PTR $T67827[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67827[ebp]
	jmp	SHORT $LN5@write_doub
$LN4@write_doub:

; 401  : 	}
; 402  : 	return P_ERR;

	mov	DWORD PTR $T67828[ebp], -1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67828[ebp]
$LN5@write_doub:

; 403  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@write_doub
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN12@write_doub:
	DD	2
	DD	$LN11@write_doub
$LN11@write_doub:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN8@write_doub
	DD	-52					; ffffffccH
	DD	5
	DD	$LN9@write_doub
$LN9@write_doub:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN8@write_doub:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?write_double@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z$0:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$?write_double@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-300]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?write_double@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?write_double@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ENDP ; pecker_sdk::pecker_write_stream_to_memery::write_double
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z$0
__ehfuncinfo$?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z
_TEXT	SEGMENT
$T67842 = -260						; size = 4
_iwritesize$ = -56					; size = 4
_write_char_value$ = -41				; size = 1
_cs_lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pwrite_buffer$ = 8					; size = 4
_write_buffer_size$ = 12				; size = 4
?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z PROC ; pecker_sdk::pecker_write_stream_to_memery::write_chars, COMDAT
; _this$ = ecx

; 406  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 407  : 	pecker_critical_lock cs_lock;

	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??0pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::pecker_critical_lock
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 408  : 	cs_lock.lock(&_M_critical_section);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	?lock@pecker_critical_lock@pecker_sdk@@QAEJPAVpecker_critical_section@2@@Z ; pecker_sdk::pecker_critical_lock::lock

; 409  : 
; 410  : 	char write_char_value = 0;

	mov	BYTE PTR _write_char_value$[ebp], 0

; 411  : 
; 412  : 	int iwritesize = 0;

	mov	DWORD PTR _iwritesize$[ebp], 0

; 413  : 	for (iwritesize=0;iwritesize<write_buffer_size;++iwritesize)

	mov	DWORD PTR _iwritesize$[ebp], 0
	jmp	SHORT $LN5@write_char@2
$LN4@write_char@2:
	mov	eax, DWORD PTR _iwritesize$[ebp]
	add	eax, 1
	mov	DWORD PTR _iwritesize$[ebp], eax
$LN5@write_char@2:
	mov	eax, DWORD PTR _iwritesize$[ebp]
	cmp	eax, DWORD PTR _write_buffer_size$[ebp]
	jge	SHORT $LN3@write_char@2

; 414  : 	{
; 415  : 		write_char_value = pwrite_buffer[iwritesize];

	mov	eax, DWORD PTR _pwrite_buffer$[ebp]
	add	eax, DWORD PTR _iwritesize$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _write_char_value$[ebp], cl

; 416  : 		if (0 == write_char_value)

	movsx	eax, BYTE PTR _write_char_value$[ebp]
	test	eax, eax
	jne	SHORT $LN2@write_char@2

; 417  : 		{
; 418  : 			--iwritesize;

	mov	eax, DWORD PTR _iwritesize$[ebp]
	sub	eax, 1
	mov	DWORD PTR _iwritesize$[ebp], eax

; 419  : 			break;

	jmp	SHORT $LN3@write_char@2
$LN2@write_char@2:

; 420  : 		}
; 421  : 		if (P_OK != write_char(write_char_value))

	mov	esi, esp
	movzx	eax, BYTE PTR _write_char_value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@write_char@2

; 422  : 		{
; 423  : 			break;

	jmp	SHORT $LN3@write_char@2
$LN1@write_char@2:

; 424  : 		}
; 425  : 	}

	jmp	SHORT $LN4@write_char@2
$LN3@write_char@2:

; 426  : 
; 427  : 	return iwritesize;

	mov	eax, DWORD PTR _iwritesize$[ebp]
	mov	DWORD PTR $T67842[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	call	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
	mov	eax, DWORD PTR $T67842[ebp]

; 428  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@write_char@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN12@write_char@2:
	DD	1
	DD	$LN11@write_char@2
$LN11@write_char@2:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN9@write_char@2
$LN9@write_char@2:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z$0:
	lea	ecx, DWORD PTR _cs_lock$[ebp]
	jmp	??1pecker_critical_lock@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_critical_lock::~pecker_critical_lock
__ehhandler$?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-268]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ENDP ; pecker_sdk::pecker_write_stream_to_memery::write_chars
END
