; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	F:\codes\pecker_framework_git\pecker_src\pecker_framework\share_string_test.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
_BSS	SEGMENT
?printf_char_buff@?1??print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z@4PADA DB 01000H DUP (?) ; `print_share_string'::`2'::printf_char_buff
_BSS	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??_C@_04MLLLIHIP@null?$AA@			; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	?get_data@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEPBDXZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_data
PUBLIC	?get_string_length@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_string_length
PUBLIC	?print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z ; print_share_string
EXTRN	__imp__printf:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_04MLLLIHIP@null?$AA@
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\share_string_test.cpp
CONST	SEGMENT
??_C@_04MLLLIHIP@null?$AA@ DB 'null', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z
_TEXT	SEGMENT
_pstring_char$84478 = -20				; size = 4
_i$84477 = -8						; size = 4
_string_share$ = 8					; size = 4
?print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z PROC ; print_share_string, COMDAT

; 8    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9    : 	static char printf_char_buff[4096] = {0};
; 10   : 	if (string_share.get_string_length() < 4096)

	mov	ecx, DWORD PTR _string_share$[ebp]
	call	?get_string_length@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_string_length
	cmp	eax, 4096				; 00001000H
	jge	SHORT $LN5@print_shar

; 11   : 	{
; 12   : 		int i=0;

	mov	DWORD PTR _i$84477[ebp], 0

; 13   : 		const char* pstring_char = string_share.get_data();

	mov	ecx, DWORD PTR _string_share$[ebp]
	call	?get_data@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEPBDXZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_data
	mov	DWORD PTR _pstring_char$84478[ebp], eax
	jmp	SHORT $LN4@print_shar
$LN3@print_shar:

; 14   : 		for (;i<string_share.get_string_length();++i)

	mov	eax, DWORD PTR _i$84477[ebp]
	add	eax, 1
	mov	DWORD PTR _i$84477[ebp], eax
$LN4@print_shar:
	mov	ecx, DWORD PTR _string_share$[ebp]
	call	?get_string_length@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_string_length
	cmp	DWORD PTR _i$84477[ebp], eax
	jge	SHORT $LN2@print_shar

; 15   : 		{
; 16   : 			printf_char_buff[i] =  pstring_char[i];

	mov	eax, DWORD PTR _pstring_char$84478[ebp]
	add	eax, DWORD PTR _i$84477[ebp]
	mov	ecx, DWORD PTR _i$84477[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR ?printf_char_buff@?1??print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z@4PADA[ecx], dl

; 17   : 		}

	jmp	SHORT $LN3@print_shar
$LN2@print_shar:

; 18   : 		printf_char_buff[i] = 0;

	mov	eax, DWORD PTR _i$84477[ebp]
	mov	BYTE PTR ?printf_char_buff@?1??print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z@4PADA[eax], 0

; 19   : 		printf("%s",printf_char_buff);

	mov	esi, esp
	push	OFFSET ?printf_char_buff@?1??print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z@4PADA
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 20   : 	}
; 21   : 	else

	jmp	SHORT $LN6@print_shar
$LN5@print_shar:

; 22   : 	{
; 23   : 		printf("null");

	mov	esi, esp
	push	OFFSET ??_C@_04MLLLIHIP@null?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@print_shar:

; 24   : 	}
; 25   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z ENDP ; print_share_string
_TEXT	ENDS
PUBLIC	??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::~pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
PUBLIC	??_C@_02MIGHPNDL@12?$AA@			; `string'
PUBLIC	??_C@_06BHEBDDGP@123456?$AA@			; `string'
PUBLIC	??_C@_0O@COBJGBOC@clip_string?5?$DN?$AA@	; `string'
PUBLIC	?clip_string_in_share_buffer_left_part@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@H@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::clip_string_in_share_buffer_left_part
PUBLIC	??_C@_0P@BGPCHGGG@merge_string?5?$DN?$AA@	; `string'
PUBLIC	?merge_neighbour_sub_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@SAJAAV12@00@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::merge_neighbour_sub_string
PUBLIC	?swap@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::swap
PUBLIC	?find_first_string_index@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHABV12@@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::find_first_string_index
PUBLIC	?find_begin_same_string_size@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHABV12@H@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::find_begin_same_string_size
PUBLIC	??_C@_0BB@KLAIIECM@share_string_3?5?$DN?$AA@	; `string'
PUBLIC	??_C@_0BB@BDLEODEJ@share_string_2?5?$DN?$AA@	; `string'
PUBLIC	??_C@_0BB@BABEMKH@share_string_1?5?$DN?$AA@	; `string'
PUBLIC	?get_share_buffer_sub_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@HH@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_share_buffer_sub_string
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??_C@_0L@GCAKMMFM@mystring?5?$DN?$AA@		; `string'
PUBLIC	?init@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJPBDH_N@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::init
PUBLIC	??_C@_0L@PNLLBLCL@1234567890?$AA@		; `string'
PUBLIC	??0?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
PUBLIC	__$ArrayPad$
PUBLIC	?string_share_test@@YAHXZ			; string_share_test
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_02MIGHPNDL@12?$AA@
CONST	SEGMENT
??_C@_02MIGHPNDL@12?$AA@ DB '12', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BHEBDDGP@123456?$AA@
CONST	SEGMENT
??_C@_06BHEBDDGP@123456?$AA@ DB '123456', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@COBJGBOC@clip_string?5?$DN?$AA@
CONST	SEGMENT
??_C@_0O@COBJGBOC@clip_string?5?$DN?$AA@ DB 'clip_string =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BGPCHGGG@merge_string?5?$DN?$AA@
CONST	SEGMENT
??_C@_0P@BGPCHGGG@merge_string?5?$DN?$AA@ DB 'merge_string =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KLAIIECM@share_string_3?5?$DN?$AA@
CONST	SEGMENT
??_C@_0BB@KLAIIECM@share_string_3?5?$DN?$AA@ DB 'share_string_3 =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BDLEODEJ@share_string_2?5?$DN?$AA@
CONST	SEGMENT
??_C@_0BB@BDLEODEJ@share_string_2?5?$DN?$AA@ DB 'share_string_2 =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BABEMKH@share_string_1?5?$DN?$AA@
CONST	SEGMENT
??_C@_0BB@BABEMKH@share_string_1?5?$DN?$AA@ DB 'share_string_1 =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GCAKMMFM@mystring?5?$DN?$AA@
CONST	SEGMENT
??_C@_0L@GCAKMMFM@mystring?5?$DN?$AA@ DB 'mystring =', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PNLLBLCL@1234567890?$AA@
CONST	SEGMENT
??_C@_0L@PNLLBLCL@1234567890?$AA@ DB '1234567890', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?string_share_test@@YAHXZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?string_share_test@@YAHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?string_share_test@@YAHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?string_share_test@@YAHXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?string_share_test@@YAHXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?string_share_test@@YAHXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?string_share_test@@YAHXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?string_share_test@@YAHXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?string_share_test@@YAHXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?string_share_test@@YAHXZ$6
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?string_share_test@@YAHXZ
_TEXT	SEGMENT
$T92097 = -524						; size = 4
_copy_string$ = -320					; size = 36
_clip_string$ = -276					; size = 36
_merge_string$ = -232					; size = 36
_share_string_3$ = -188					; size = 36
_share_string_2$ = -144					; size = 36
_share_string_1$ = -100					; size = 36
_mystring$ = -56					; size = 36
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?string_share_test@@YAHXZ PROC				; string_share_test, COMDAT

; 28   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?string_share_test@@YAHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 516				; 00000204H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-528]
	mov	ecx, 129				; 00000081H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 29   : 	pecker_share_string_base_t<char,pecker_value_compare<char>> mystring;

	lea	ecx, DWORD PTR _mystring$[ebp]
	call	??0?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 30   : 	pecker_share_string_base_t<char,pecker_value_compare<char>> share_string_1;

	lea	ecx, DWORD PTR _share_string_1$[ebp]
	call	??0?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 31   : 	pecker_share_string_base_t<char,pecker_value_compare<char>> share_string_2;

	lea	ecx, DWORD PTR _share_string_2$[ebp]
	call	??0?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 32   : 	pecker_share_string_base_t<char,pecker_value_compare<char>> share_string_3;

	lea	ecx, DWORD PTR _share_string_3$[ebp]
	call	??0?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 33   : 	pecker_share_string_base_t<char,pecker_value_compare<char>> merge_string;

	lea	ecx, DWORD PTR _merge_string$[ebp]
	call	??0?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 34   : 	pecker_share_string_base_t<char,pecker_value_compare<char>> clip_string;

	lea	ecx, DWORD PTR _clip_string$[ebp]
	call	??0?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 35   : 	pecker_share_string_base_t<char,pecker_value_compare<char>> copy_string;

	lea	ecx, DWORD PTR _copy_string$[ebp]
	call	??0?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 36   : 
; 37   : 	mystring.init("1234567890",10);

	push	0
	push	10					; 0000000aH
	push	OFFSET ??_C@_0L@PNLLBLCL@1234567890?$AA@
	lea	ecx, DWORD PTR _mystring$[ebp]
	call	?init@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJPBDH_N@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::init

; 38   : 
; 39   : 	std::cout << "mystring =";

	push	OFFSET ??_C@_0L@GCAKMMFM@mystring?5?$DN?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 40   : 	print_share_string(mystring);

	lea	eax, DWORD PTR _mystring$[ebp]
	push	eax
	call	?print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z ; print_share_string
	add	esp, 4

; 41   : 	std::cout << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 42   : 
; 43   : 	mystring.get_share_buffer_sub_string(share_string_1,0,4);

	push	4
	push	0
	lea	eax, DWORD PTR _share_string_1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mystring$[ebp]
	call	?get_share_buffer_sub_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@HH@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_share_buffer_sub_string

; 44   : 	mystring.get_share_buffer_sub_string(share_string_2,2,8);

	push	8
	push	2
	lea	eax, DWORD PTR _share_string_2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mystring$[ebp]
	call	?get_share_buffer_sub_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@HH@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_share_buffer_sub_string

; 45   : 	mystring.get_share_buffer_sub_string(share_string_3,4,3);

	push	3
	push	4
	lea	eax, DWORD PTR _share_string_3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mystring$[ebp]
	call	?get_share_buffer_sub_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@HH@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_share_buffer_sub_string

; 46   : 	mystring.get_share_buffer_sub_string(share_string_3,0,10);

	push	10					; 0000000aH
	push	0
	lea	eax, DWORD PTR _share_string_3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mystring$[ebp]
	call	?get_share_buffer_sub_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@HH@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_share_buffer_sub_string

; 47   : 
; 48   : 	std::cout << "share_string_1 =";

	push	OFFSET ??_C@_0BB@BABEMKH@share_string_1?5?$DN?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 49   : 	print_share_string(share_string_1);

	lea	eax, DWORD PTR _share_string_1$[ebp]
	push	eax
	call	?print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z ; print_share_string
	add	esp, 4

; 50   : 	std::cout << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 51   : 
; 52   : 	std::cout << "share_string_2 =";

	push	OFFSET ??_C@_0BB@BDLEODEJ@share_string_2?5?$DN?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 53   : 	print_share_string(share_string_2);

	lea	eax, DWORD PTR _share_string_2$[ebp]
	push	eax
	call	?print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z ; print_share_string
	add	esp, 4

; 54   : 	std::cout << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 55   : 
; 56   : 	std::cout << "share_string_3 =";

	push	OFFSET ??_C@_0BB@KLAIIECM@share_string_3?5?$DN?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 57   : 	print_share_string(share_string_3);

	lea	eax, DWORD PTR _share_string_3$[ebp]
	push	eax
	call	?print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z ; print_share_string
	add	esp, 4

; 58   : 	std::cout << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 59   : 
; 60   : 	std::cout <<  mystring.find_begin_same_string_size(share_string_1) << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	push	0
	lea	ecx, DWORD PTR _share_string_1$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mystring$[ebp]
	call	?find_begin_same_string_size@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHABV12@H@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::find_begin_same_string_size
	mov	edi, esp
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 61   : 	std::cout <<  mystring.find_begin_same_string_size(share_string_2) << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	push	0
	lea	ecx, DWORD PTR _share_string_2$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mystring$[ebp]
	call	?find_begin_same_string_size@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHABV12@H@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::find_begin_same_string_size
	mov	edi, esp
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 62   : 	std::cout <<  mystring.find_begin_same_string_size(share_string_3) << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	push	0
	lea	ecx, DWORD PTR _share_string_3$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mystring$[ebp]
	call	?find_begin_same_string_size@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHABV12@H@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::find_begin_same_string_size
	mov	edi, esp
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 63   : 	std::cout <<  mystring.find_begin_same_string_size(share_string_2,2) << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	push	2
	lea	ecx, DWORD PTR _share_string_2$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mystring$[ebp]
	call	?find_begin_same_string_size@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHABV12@H@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::find_begin_same_string_size
	mov	edi, esp
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 64   : 	std::cout <<  mystring.find_begin_same_string_size(share_string_3,4) << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	push	4
	lea	ecx, DWORD PTR _share_string_3$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mystring$[ebp]
	call	?find_begin_same_string_size@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHABV12@H@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::find_begin_same_string_size
	mov	edi, esp
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 65   : 
; 66   : 
; 67   : 	std::cout <<  mystring.find_first_string_index(share_string_1) << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	lea	ecx, DWORD PTR _share_string_1$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mystring$[ebp]
	call	?find_first_string_index@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHABV12@@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::find_first_string_index
	mov	edi, esp
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 68   : 	std::cout <<  mystring.find_first_string_index(share_string_2) << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	lea	ecx, DWORD PTR _share_string_2$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mystring$[ebp]
	call	?find_first_string_index@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHABV12@@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::find_first_string_index
	mov	edi, esp
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 69   : 	std::cout <<  mystring.find_first_string_index(share_string_3) << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	lea	ecx, DWORD PTR _share_string_3$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mystring$[ebp]
	call	?find_first_string_index@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHABV12@@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::find_first_string_index
	mov	edi, esp
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 70   : 
; 71   : 	share_string_1.swap(share_string_3);

	lea	eax, DWORD PTR _share_string_3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _share_string_1$[ebp]
	call	?swap@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::swap

; 72   : 	pecker_share_string_base_t<char,pecker_value_compare<char>>::merge_neighbour_sub_string(share_string_1,share_string_3,merge_string);

	lea	eax, DWORD PTR _merge_string$[ebp]
	push	eax
	lea	ecx, DWORD PTR _share_string_3$[ebp]
	push	ecx
	lea	edx, DWORD PTR _share_string_1$[ebp]
	push	edx
	call	?merge_neighbour_sub_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@SAJAAV12@00@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::merge_neighbour_sub_string
	add	esp, 12					; 0000000cH

; 73   : 	std::cout << "merge_string =";

	push	OFFSET ??_C@_0P@BGPCHGGG@merge_string?5?$DN?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 74   : 	print_share_string(merge_string);

	lea	eax, DWORD PTR _merge_string$[ebp]
	push	eax
	call	?print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z ; print_share_string
	add	esp, 4

; 75   : 	std::cout << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 76   : 
; 77   : 	merge_string.clip_string_in_share_buffer_left_part(clip_string,2);

	push	2
	lea	eax, DWORD PTR _clip_string$[ebp]
	push	eax
	lea	ecx, DWORD PTR _merge_string$[ebp]
	call	?clip_string_in_share_buffer_left_part@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@H@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::clip_string_in_share_buffer_left_part

; 78   : 	std::cout << "merge_string =";

	push	OFFSET ??_C@_0P@BGPCHGGG@merge_string?5?$DN?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 79   : 	print_share_string(merge_string);

	lea	eax, DWORD PTR _merge_string$[ebp]
	push	eax
	call	?print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z ; print_share_string
	add	esp, 4

; 80   : 	std::cout << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 81   : 	std::cout << "clip_string =";

	push	OFFSET ??_C@_0O@COBJGBOC@clip_string?5?$DN?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 82   : 	print_share_string(clip_string);

	lea	eax, DWORD PTR _clip_string$[ebp]
	push	eax
	call	?print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z ; print_share_string
	add	esp, 4

; 83   : 	std::cout << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 84   : 
; 85   : 
; 86   : 	share_string_1.init("123456",6);

	push	0
	push	6
	push	OFFSET ??_C@_06BHEBDDGP@123456?$AA@
	lea	ecx, DWORD PTR _share_string_1$[ebp]
	call	?init@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJPBDH_N@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::init

; 87   : 	share_string_2.init("12",2);

	push	0
	push	2
	push	OFFSET ??_C@_02MIGHPNDL@12?$AA@
	lea	ecx, DWORD PTR _share_string_2$[ebp]
	call	?init@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJPBDH_N@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::init

; 88   : 	share_string_1.swap(share_string_2);

	lea	eax, DWORD PTR _share_string_2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _share_string_1$[ebp]
	call	?swap@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::swap

; 89   : 	
; 90   : 	std::cout << "share_string_1 =";

	push	OFFSET ??_C@_0BB@BABEMKH@share_string_1?5?$DN?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 91   : 	print_share_string(share_string_1);

	lea	eax, DWORD PTR _share_string_1$[ebp]
	push	eax
	call	?print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z ; print_share_string
	add	esp, 4

; 92   : 	std::cout << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 93   : 
; 94   : 	std::cout << "share_string_2 =";

	push	OFFSET ??_C@_0BB@BDLEODEJ@share_string_2?5?$DN?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 95   : 	print_share_string(share_string_2);

	lea	eax, DWORD PTR _share_string_2$[ebp]
	push	eax
	call	?print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z ; print_share_string
	add	esp, 4

; 96   : 	std::cout << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 97   : 
; 98   : 	share_string_2.swap(share_string_3);

	lea	eax, DWORD PTR _share_string_3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _share_string_2$[ebp]
	call	?swap@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::swap

; 99   : 	std::cout << "share_string_2 =";

	push	OFFSET ??_C@_0BB@BDLEODEJ@share_string_2?5?$DN?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 100  : 	print_share_string(share_string_2);

	lea	eax, DWORD PTR _share_string_2$[ebp]
	push	eax
	call	?print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z ; print_share_string
	add	esp, 4

; 101  : 	std::cout << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 102  : 
; 103  : 	std::cout << "share_string_3 =";

	push	OFFSET ??_C@_0BB@KLAIIECM@share_string_3?5?$DN?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 104  : 	print_share_string(share_string_3);

	lea	eax, DWORD PTR _share_string_3$[ebp]
	push	eax
	call	?print_share_string@@YAXABV?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@@Z ; print_share_string
	add	esp, 4

; 105  : 	std::cout << std::endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 106  : 
; 107  : 	return 0;

	mov	DWORD PTR $T92097[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _copy_string$[ebp]
	call	??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::~pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _clip_string$[ebp]
	call	??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::~pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _merge_string$[ebp]
	call	??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::~pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _share_string_3$[ebp]
	call	??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::~pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _share_string_2$[ebp]
	call	??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::~pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _share_string_1$[ebp]
	call	??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::~pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mystring$[ebp]
	call	??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::~pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
	mov	eax, DWORD PTR $T92097[ebp]

; 108  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@string_sha
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 528				; 00000210H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN19@string_sha:
	DD	7
	DD	$LN18@string_sha
$LN18@string_sha:
	DD	-56					; ffffffc8H
	DD	36					; 00000024H
	DD	$LN10@string_sha
	DD	-100					; ffffff9cH
	DD	36					; 00000024H
	DD	$LN11@string_sha
	DD	-144					; ffffff70H
	DD	36					; 00000024H
	DD	$LN12@string_sha
	DD	-188					; ffffff44H
	DD	36					; 00000024H
	DD	$LN13@string_sha
	DD	-232					; ffffff18H
	DD	36					; 00000024H
	DD	$LN14@string_sha
	DD	-276					; fffffeecH
	DD	36					; 00000024H
	DD	$LN15@string_sha
	DD	-320					; fffffec0H
	DD	36					; 00000024H
	DD	$LN16@string_sha
$LN16@string_sha:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN15@string_sha:
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN14@string_sha:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN13@string_sha:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	51					; 00000033H
	DB	0
$LN12@string_sha:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	50					; 00000032H
	DB	0
$LN11@string_sha:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	95					; 0000005fH
	DB	49					; 00000031H
	DB	0
$LN10@string_sha:
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?string_share_test@@YAHXZ$0:
	lea	ecx, DWORD PTR _mystring$[ebp]
	jmp	??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::~pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
__unwindfunclet$?string_share_test@@YAHXZ$1:
	lea	ecx, DWORD PTR _share_string_1$[ebp]
	jmp	??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::~pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
__unwindfunclet$?string_share_test@@YAHXZ$2:
	lea	ecx, DWORD PTR _share_string_2$[ebp]
	jmp	??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::~pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
__unwindfunclet$?string_share_test@@YAHXZ$3:
	lea	ecx, DWORD PTR _share_string_3$[ebp]
	jmp	??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::~pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
__unwindfunclet$?string_share_test@@YAHXZ$4:
	lea	ecx, DWORD PTR _merge_string$[ebp]
	jmp	??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::~pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
__unwindfunclet$?string_share_test@@YAHXZ$5:
	lea	ecx, DWORD PTR _clip_string$[ebp]
	jmp	??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::~pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
__unwindfunclet$?string_share_test@@YAHXZ$6:
	lea	ecx, DWORD PTR _copy_string$[ebp]
	jmp	??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::~pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
__ehhandler$?string_share_test@@YAHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-532]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?string_share_test@@YAHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?string_share_test@@YAHXZ ENDP				; string_share_test
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_string.h
;	COMDAT ??0?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ PROC ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>, COMDAT
; _this$ = ecx

; 176  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 16			; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 177  : 		_M_pstring_data_header._Large_buffer = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 178  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ENDP ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
_TEXT	ENDS
PUBLIC	?clear@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJXZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::clear
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ PROC ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::~pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>, COMDAT
; _this$ = ecx

; 195  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 196  : 		clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJXZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::clear

; 197  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAE@XZ ENDP ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::~pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?swap@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@@Z
_TEXT	SEGMENT
_tmp_string$87056 = -140				; size = 4
_tmp_size$ = -128					; size = 4
_index$87045 = -116					; size = 4
_tmp_swap_value$87044 = -101				; size = 1
_index$87040 = -92					; size = 4
_index$87035 = -80					; size = 4
_tmp_swap_value$87034 = -65				; size = 1
_index$87030 = -56					; size = 4
_index$87024 = -44					; size = 4
_index$87018 = -32					; size = 4
_ptmp_header$ = -20					; size = 4
_this$ = -8						; size = 4
_other_string$ = 8					; size = 4
?swap@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@@Z PROC ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::swap, COMDAT
; _this$ = ecx

; 230  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 231  : 		if (this == &other_string)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _other_string$[ebp]
	jne	SHORT $LN38@swap

; 232  : 		{
; 233  : 			return P_OK;

	xor	eax, eax
	jmp	$LN39@swap
$LN38@swap:

; 234  : 		}
; 235  : 
; 236  : 		char_value_t* ptmp_header = null;

	mov	DWORD PTR _ptmp_header$[ebp], 0

; 237  : 		
; 238  : 		if (_M_string_buffer_size > _BUFFER_SIZE && other_string._M_string_buffer_size > _BUFFER_SIZE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jle	SHORT $LN37@swap
	mov	eax, DWORD PTR _other_string$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jle	SHORT $LN37@swap

; 239  : 		{
; 240  : 			ptmp_header = _M_pstring_data_header._Large_buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ptmp_header$[ebp], ecx

; 241  : 			if (ptmp_header != other_string._M_pstring_data_header._Large_buffer)

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR _ptmp_header$[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN36@swap

; 242  : 			{
; 243  : 				_M_pstring_data_header._Large_buffer = other_string._M_pstring_data_header._Large_buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other_string$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 244  : 				other_string._M_pstring_data_header._Large_buffer = ptmp_header;

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR _ptmp_header$[ebp]
	mov	DWORD PTR [eax], ecx
$LN36@swap:

; 245  : 			}
; 246  : 
; 247  : 			ptmp_header = _M_pthis_string_data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _ptmp_header$[ebp], ecx

; 248  : 			_M_pthis_string_data = other_string._M_pthis_string_data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other_string$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 249  : 			other_string._M_pthis_string_data = ptmp_header;

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR _ptmp_header$[ebp]
	mov	DWORD PTR [eax+16], ecx
	jmp	$LN35@swap
$LN37@swap:

; 250  : 		}
; 251  : 		else if (_M_string_buffer_size > _BUFFER_SIZE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jle	SHORT $LN34@swap

; 252  : 		{
; 253  : 			ptmp_header = _M_pstring_data_header._Large_buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ptmp_header$[ebp], ecx

; 254  : 			for (string_char_index index =0;index<other_string._M_string_length;++index)

	mov	DWORD PTR _index$87018[ebp], 0
	jmp	SHORT $LN33@swap
$LN32@swap:
	mov	eax, DWORD PTR _index$87018[ebp]
	add	eax, 1
	mov	DWORD PTR _index$87018[ebp], eax
$LN33@swap:
	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR _index$87018[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN31@swap

; 255  : 			{
; 256  : 				_M_pstring_data_header._Small_buffer[index] = other_string._M_pthis_string_data[index];

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _index$87018[ebp]
	mov	eax, DWORD PTR _index$87018[ebp]
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [edx], cl

; 257  : 			}

	jmp	SHORT $LN32@swap
$LN31@swap:

; 258  : 			other_string._M_pstring_data_header._Large_buffer = ptmp_header;

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR _ptmp_header$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	$LN35@swap
$LN34@swap:

; 259  : 		}
; 260  : 		else if (other_string._M_string_buffer_size > _BUFFER_SIZE)

	mov	eax, DWORD PTR _other_string$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jle	SHORT $LN29@swap

; 261  : 		{
; 262  : 			ptmp_header = other_string._M_pstring_data_header._Large_buffer;

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ptmp_header$[ebp], ecx

; 263  : 			for (string_char_index index =0;index< _M_string_length; ++index)

	mov	DWORD PTR _index$87024[ebp], 0
	jmp	SHORT $LN28@swap
$LN27@swap:
	mov	eax, DWORD PTR _index$87024[ebp]
	add	eax, 1
	mov	DWORD PTR _index$87024[ebp], eax
$LN28@swap:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$87024[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN26@swap

; 264  : 			{
; 265  : 				other_string._M_pstring_data_header._Small_buffer[index] = _M_pthis_string_data[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _other_string$[ebp]
	add	edx, DWORD PTR _index$87024[ebp]
	mov	eax, DWORD PTR _index$87024[ebp]
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [edx], cl

; 266  : 			}

	jmp	SHORT $LN27@swap
$LN26@swap:

; 267  : 			_M_pstring_data_header._Large_buffer = ptmp_header;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ptmp_header$[ebp]
	mov	DWORD PTR [eax], ecx

; 268  : 		}
; 269  : 		else

	jmp	$LN35@swap
$LN29@swap:

; 270  : 		{
; 271  : 			if (other_string._M_string_length > _M_string_length)

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	cmp	edx, DWORD PTR [ecx+24]
	jle	$LN24@swap

; 272  : 			{
; 273  : 				for (string_char_index index=0; index<_M_string_length; ++index)

	mov	DWORD PTR _index$87030[ebp], 0
	jmp	SHORT $LN23@swap
$LN22@swap:
	mov	eax, DWORD PTR _index$87030[ebp]
	add	eax, 1
	mov	DWORD PTR _index$87030[ebp], eax
$LN23@swap:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$87030[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN21@swap

; 274  : 				{
; 275  : 					char_value_t tmp_swap_value = _M_pthis_string_data[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _index$87030[ebp]
	mov	al, BYTE PTR [ecx+edx]
	mov	BYTE PTR _tmp_swap_value$87034[ebp], al

; 276  : 					_M_pthis_string_data[index] = other_string._M_pthis_string_data[index];

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _index$87030[ebp]
	mov	esi, DWORD PTR _index$87030[ebp]
	mov	cl, BYTE PTR [ecx+esi]
	mov	BYTE PTR [eax+edx], cl

; 277  : 					other_string._M_pthis_string_data[index] = tmp_swap_value;

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _index$87030[ebp]
	mov	al, BYTE PTR _tmp_swap_value$87034[ebp]
	mov	BYTE PTR [ecx+edx], al

; 278  : 				}

	jmp	SHORT $LN22@swap
$LN21@swap:

; 279  : 
; 280  : 				for (string_char_index index = _M_string_length;index<other_string._M_string_length;++index)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _index$87035[ebp], ecx
	jmp	SHORT $LN20@swap
$LN19@swap:
	mov	eax, DWORD PTR _index$87035[ebp]
	add	eax, 1
	mov	DWORD PTR _index$87035[ebp], eax
$LN20@swap:
	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR _index$87035[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN18@swap

; 281  : 				{
; 282  : 					_M_pthis_string_data[index] = other_string._M_pthis_string_data[index];

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _index$87035[ebp]
	mov	esi, DWORD PTR _index$87035[ebp]
	mov	cl, BYTE PTR [ecx+esi]
	mov	BYTE PTR [eax+edx], cl

; 283  : 				}

	jmp	SHORT $LN19@swap
$LN18@swap:

; 284  : 			}
; 285  : 			else

	jmp	$LN35@swap
$LN24@swap:

; 286  : 			{
; 287  : 				for (string_char_index index=0; index< other_string._M_string_length; ++index)

	mov	DWORD PTR _index$87040[ebp], 0
	jmp	SHORT $LN16@swap
$LN15@swap:
	mov	eax, DWORD PTR _index$87040[ebp]
	add	eax, 1
	mov	DWORD PTR _index$87040[ebp], eax
$LN16@swap:
	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR _index$87040[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN14@swap

; 288  : 				{
; 289  : 					char_value_t tmp_swap_value = _M_pthis_string_data[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _index$87040[ebp]
	mov	al, BYTE PTR [ecx+edx]
	mov	BYTE PTR _tmp_swap_value$87044[ebp], al

; 290  : 					_M_pthis_string_data[index] = other_string._M_pthis_string_data[index];

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _index$87040[ebp]
	mov	esi, DWORD PTR _index$87040[ebp]
	mov	cl, BYTE PTR [ecx+esi]
	mov	BYTE PTR [eax+edx], cl

; 291  : 					other_string._M_pthis_string_data[index] = tmp_swap_value;

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _index$87040[ebp]
	mov	al, BYTE PTR _tmp_swap_value$87044[ebp]
	mov	BYTE PTR [ecx+edx], al

; 292  : 				}

	jmp	SHORT $LN15@swap
$LN14@swap:

; 293  : 
; 294  : 				for (string_char_index index = other_string._M_string_length;index<_M_string_length;++index)

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _index$87045[ebp], ecx
	jmp	SHORT $LN13@swap
$LN12@swap:
	mov	eax, DWORD PTR _index$87045[ebp]
	add	eax, 1
	mov	DWORD PTR _index$87045[ebp], eax
$LN13@swap:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$87045[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN35@swap

; 295  : 				{
; 296  : 					 other_string._M_pthis_string_data[index] = _M_pthis_string_data[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _other_string$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _index$87045[ebp]
	mov	esi, DWORD PTR _index$87045[ebp]
	mov	cl, BYTE PTR [ecx+esi]
	mov	BYTE PTR [eax+edx], cl

; 297  : 				}

	jmp	SHORT $LN12@swap
$LN35@swap:

; 298  : 			}
; 299  : 
; 300  : 
; 301  : 		}
; 302  : 		
; 303  : 		string_size_t tmp_size = _M_string_buffer_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _tmp_size$[ebp], ecx

; 304  : 		_M_string_buffer_size = other_string._M_string_buffer_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other_string$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 305  : 		other_string._M_string_buffer_size = tmp_size;

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR _tmp_size$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 306  : 
; 307  : 		tmp_size = _M_string_length;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _tmp_size$[ebp], ecx

; 308  : 		_M_string_length = other_string._M_string_length;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other_string$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 309  : 		other_string._M_string_length = tmp_size;

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR _tmp_size$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 310  : 
; 311  : 		if (_M_string_buffer_size > _BUFFER_SIZE || other_string._M_string_buffer_size > _BUFFER_SIZE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jg	SHORT $LN9@swap
	mov	eax, DWORD PTR _other_string$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jle	$LN10@swap
$LN9@swap:

; 312  : 		{
; 313  : 			if (_M_shared_buffer_next_string == &other_string)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	ecx, DWORD PTR _other_string$[ebp]
	jne	SHORT $LN8@swap

; 314  : 			{
; 315  : 				_M_shared_buffer_next_string = other_string._M_shared_buffer_next_string;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other_string$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx

; 316  : 				other_string._M_shared_buffer_next_string = this;

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 317  : 				other_string._M_shared_buffer_pre_string = _M_shared_buffer_pre_string;

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx

; 318  : 				_M_shared_buffer_pre_string = &other_string;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other_string$[ebp]
	mov	DWORD PTR [eax+28], ecx
	jmp	SHORT $LN7@swap
$LN8@swap:

; 319  : 			}
; 320  : 			else if (_M_shared_buffer_pre_string == &other_string)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	ecx, DWORD PTR _other_string$[ebp]
	jne	SHORT $LN6@swap

; 321  : 			{
; 322  : 				_M_shared_buffer_pre_string = other_string._M_shared_buffer_pre_string;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other_string$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx

; 323  : 				other_string._M_shared_buffer_pre_string = this;

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 324  : 				other_string._M_shared_buffer_next_string = _M_shared_buffer_next_string;

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx

; 325  : 				_M_shared_buffer_next_string = &other_string;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other_string$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 326  : 			}
; 327  : 			else

	jmp	SHORT $LN7@swap
$LN6@swap:

; 328  : 			{
; 329  : 				String_base* tmp_string = _M_shared_buffer_pre_string;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _tmp_string$87056[ebp], ecx

; 330  : 				_M_shared_buffer_pre_string = other_string._M_shared_buffer_pre_string;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other_string$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx

; 331  : 				other_string._M_shared_buffer_pre_string = tmp_string;

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR _tmp_string$87056[ebp]
	mov	DWORD PTR [eax+28], ecx

; 332  : 
; 333  : 				tmp_string = _M_shared_buffer_next_string;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _tmp_string$87056[ebp], ecx

; 334  : 				_M_shared_buffer_next_string = other_string._M_shared_buffer_next_string;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other_string$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx

; 335  : 				other_string._M_shared_buffer_next_string = tmp_string;

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR _tmp_string$87056[ebp]
	mov	DWORD PTR [eax+32], ecx
$LN7@swap:

; 336  : 			}
; 337  : 
; 338  : 			if (null != _M_shared_buffer_pre_string)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN4@swap

; 339  : 			{
; 340  : 				_M_shared_buffer_pre_string->_M_shared_buffer_next_string = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], edx
$LN4@swap:

; 341  : 			}
; 342  : 			if (null != _M_shared_buffer_next_string)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN3@swap

; 343  : 			{
; 344  : 				_M_shared_buffer_next_string->_M_shared_buffer_pre_string = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], edx
$LN3@swap:

; 345  : 			}
; 346  : 			if (null != other_string._M_shared_buffer_pre_string)

	mov	eax, DWORD PTR _other_string$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@swap

; 347  : 			{
; 348  : 				other_string._M_shared_buffer_pre_string->_M_shared_buffer_next_string = &other_string;

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _other_string$[ebp]
	mov	DWORD PTR [ecx+32], edx
$LN2@swap:

; 349  : 			}
; 350  : 			if (null != other_string._M_shared_buffer_next_string)

	mov	eax, DWORD PTR _other_string$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN10@swap

; 351  : 			{
; 352  : 				other_string._M_shared_buffer_next_string->_M_shared_buffer_pre_string = &other_string;

	mov	eax, DWORD PTR _other_string$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _other_string$[ebp]
	mov	DWORD PTR [ecx+28], edx
$LN10@swap:

; 353  : 			}
; 354  : 		}
; 355  : 
; 356  : 
; 357  : 		return P_OK;

	xor	eax, eax
$LN39@swap:

; 358  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?swap@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@@Z ENDP ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::swap
_TEXT	ENDS
PUBLIC	?init@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJH_N@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::init
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?init@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJPBDH_N@Z
_TEXT	SEGMENT
_index$87066 = -32					; size = 4
_init_result$ = -20					; size = 4
_this$ = -8						; size = 4
_pstring_chars$ = 8					; size = 4
_string_length$ = 12					; size = 4
_bnew_buffer$ = 16					; size = 1
?init@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJPBDH_N@Z PROC ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::init, COMDAT
; _this$ = ecx

; 449  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 450  : 		if ( (null == pstring_chars && 0 >= string_length) )

	cmp	DWORD PTR _pstring_chars$[ebp], 0
	jne	SHORT $LN5@init
	cmp	DWORD PTR _string_length$[ebp], 0
	jg	SHORT $LN5@init

; 451  : 		{
; 452  : 			return P_ERR;

	or	eax, -1
	jmp	SHORT $LN6@init
$LN5@init:

; 453  : 		}
; 454  : 
; 455  : 		string_result init_result = init(string_length,bnew_buffer);

	movzx	eax, BYTE PTR _bnew_buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string_length$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJH_N@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::init
	mov	DWORD PTR _init_result$[ebp], eax

; 456  : 		if (P_OK != init_result)

	cmp	DWORD PTR _init_result$[ebp], 0
	je	SHORT $LN4@init

; 457  : 		{
; 458  : 			return init_result;

	mov	eax, DWORD PTR _init_result$[ebp]
	jmp	SHORT $LN6@init
$LN4@init:

; 459  : 		}
; 460  : 
; 461  : 		_M_string_length = string_length;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _string_length$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 462  : 		for (string_char_index index = 0; index < string_length; ++index)

	mov	DWORD PTR _index$87066[ebp], 0
	jmp	SHORT $LN3@init
$LN2@init:
	mov	eax, DWORD PTR _index$87066[ebp]
	add	eax, 1
	mov	DWORD PTR _index$87066[ebp], eax
$LN3@init:
	mov	eax, DWORD PTR _index$87066[ebp]
	cmp	eax, DWORD PTR _string_length$[ebp]
	jge	SHORT $LN1@init

; 463  : 		{
; 464  : 			*(_M_pthis_string_data+index) = *(pstring_chars + index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pstring_chars$[ebp]
	add	edx, DWORD PTR _index$87066[ebp]
	mov	eax, DWORD PTR _index$87066[ebp]
	mov	dl, BYTE PTR [edx]
	mov	BYTE PTR [ecx+eax], dl

; 465  : 		}

	jmp	SHORT $LN2@init
$LN1@init:

; 466  : 
; 467  : 		return P_OK;

	xor	eax, eax
$LN6@init:

; 468  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?init@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJPBDH_N@Z ENDP ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::init
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_share_buffer_sub_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_reference_sub_string$ = 8				; size = 4
_ioffset$ = 12						; size = 4
_sub_string_length$ = 16				; size = 4
?get_share_buffer_sub_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@HH@Z PROC ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_share_buffer_sub_string, COMDAT
; _this$ = ecx

; 478  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 479  : 		if ( (ioffset >= _M_string_length) || (ioffset < 0) || (this == &reference_sub_string) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ioffset$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN7@get_share_
	cmp	DWORD PTR _ioffset$[ebp], 0
	jl	SHORT $LN7@get_share_
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _reference_sub_string$[ebp]
	jne	SHORT $LN8@get_share_
$LN7@get_share_:

; 480  : 		{
; 481  : 			return P_FAIL;

	mov	eax, 1
	jmp	$LN9@get_share_
$LN8@get_share_:

; 482  : 		}
; 483  : 		
; 484  : 		if (ioffset < 0)

	cmp	DWORD PTR _ioffset$[ebp], 0
	jge	SHORT $LN6@get_share_

; 485  : 		{
; 486  : 			ioffset = 0;

	mov	DWORD PTR _ioffset$[ebp], 0
$LN6@get_share_:

; 487  : 		}
; 488  : 
; 489  : 		if ((sub_string_length < 0) || (sub_string_length + ioffset > _M_string_length))

	cmp	DWORD PTR _sub_string_length$[ebp], 0
	jl	SHORT $LN4@get_share_
	mov	eax, DWORD PTR _sub_string_length$[ebp]
	add	eax, DWORD PTR _ioffset$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+24]
	jle	SHORT $LN5@get_share_
$LN4@get_share_:

; 490  : 		{
; 491  : 			sub_string_length = _M_string_length - ioffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR _ioffset$[ebp]
	mov	DWORD PTR _sub_string_length$[ebp], ecx
$LN5@get_share_:

; 492  : 		}
; 493  : 
; 494  : 		if (_M_string_buffer_size > _BUFFER_SIZE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jle	SHORT $LN3@get_share_

; 495  : 		{
; 496  : 			reference_sub_string.clear();

	mov	ecx, DWORD PTR _reference_sub_string$[ebp]
	call	?clear@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJXZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::clear

; 497  : 			reference_sub_string._M_pstring_data_header._Large_buffer = _M_pstring_data_header._Large_buffer;

	mov	eax, DWORD PTR _reference_sub_string$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 498  : 			reference_sub_string._M_string_buffer_size = _M_string_buffer_size;

	mov	eax, DWORD PTR _reference_sub_string$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 499  : 			reference_sub_string._M_pthis_string_data = ioffset + _M_pthis_string_data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _ioffset$[ebp]
	mov	edx, DWORD PTR _reference_sub_string$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 500  : 			reference_sub_string._M_string_length = sub_string_length;

	mov	eax, DWORD PTR _reference_sub_string$[ebp]
	mov	ecx, DWORD PTR _sub_string_length$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 501  : 			reference_sub_string._M_shared_buffer_pre_string = this;

	mov	eax, DWORD PTR _reference_sub_string$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 502  : 			reference_sub_string._M_shared_buffer_next_string = _M_shared_buffer_next_string;

	mov	eax, DWORD PTR _reference_sub_string$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx

; 503  : 
; 504  : 			if (null != _M_shared_buffer_next_string)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN2@get_share_

; 505  : 			{
; 506  : 				_M_shared_buffer_next_string->_M_shared_buffer_pre_string = &reference_sub_string;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _reference_sub_string$[ebp]
	mov	DWORD PTR [ecx+28], edx
$LN2@get_share_:

; 507  : 			}
; 508  : 			_M_shared_buffer_next_string = &reference_sub_string;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _reference_sub_string$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 509  : 
; 510  : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN9@get_share_

; 511  : 		}
; 512  : 		else

	jmp	SHORT $LN9@get_share_
$LN3@get_share_:

; 513  : 		{
; 514  : 			return reference_sub_string.init(ioffset + _M_pthis_string_data,sub_string_length,STRING_BOOLEAN_FALSE);

	push	0
	mov	eax, DWORD PTR _sub_string_length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _ioffset$[ebp]
	push	edx
	mov	ecx, DWORD PTR _reference_sub_string$[ebp]
	call	?init@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJPBDH_N@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::init
$LN9@get_share_:

; 515  : 		}
; 516  : 	
; 517  : 
; 518  : 		
; 519  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?get_share_buffer_sub_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@HH@Z ENDP ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_share_buffer_sub_string
_TEXT	ENDS
PUBLIC	??$find_first_string_index_@DU?$pecker_value_compare@D@pecker_sdk@@@pecker_sdk@@YAHPBDH0H@Z ; pecker_sdk::find_first_string_index_<char,pecker_sdk::pecker_value_compare<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?find_first_string_index@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_sub_string$ = 8					; size = 4
?find_first_string_index@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHABV12@@Z PROC ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::find_first_string_index, COMDAT
; _this$ = ecx

; 678  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 679  : 		if (this == &sub_string)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _sub_string$[ebp]
	jne	SHORT $LN2@find_first

; 680  : 		{
; 681  : 			return 0;

	xor	eax, eax
	jmp	SHORT $LN3@find_first

; 682  : 		}
; 683  : 		else

	jmp	SHORT $LN3@find_first
$LN2@find_first:

; 684  : 		{
; 685  : 			return find_first_string_index_<char_value_t,__cmp_t>( _M_pthis_string_data, _M_string_length,sub_string.get_data(),sub_string.get_string_length());

	mov	ecx, DWORD PTR _sub_string$[ebp]
	call	?get_string_length@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_string_length
	push	eax
	mov	ecx, DWORD PTR _sub_string$[ebp]
	call	?get_data@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEPBDXZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_data
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	??$find_first_string_index_@DU?$pecker_value_compare@D@pecker_sdk@@@pecker_sdk@@YAHPBDH0H@Z ; pecker_sdk::find_first_string_index_<char,pecker_sdk::pecker_value_compare<char> >
	add	esp, 16					; 00000010H
$LN3@find_first:

; 686  : 		}
; 687  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?find_first_string_index@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHABV12@@Z ENDP ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::find_first_string_index
_TEXT	ENDS
PUBLIC	??$find_begin_same_string_size_@DU?$pecker_value_compare@D@pecker_sdk@@@pecker_sdk@@YAHPBDH0H@Z ; pecker_sdk::find_begin_same_string_size_<char,pecker_sdk::pecker_value_compare<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?find_begin_same_string_size@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHABV12@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_sub_string$ = 8					; size = 4
_string_cmp_index$ = 12					; size = 4
?find_begin_same_string_size@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHABV12@H@Z PROC ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::find_begin_same_string_size, COMDAT
; _this$ = ecx

; 697  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 698  : 		if (string_cmp_index >= _M_string_length)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _string_cmp_index$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jl	SHORT $LN1@find_begin

; 699  : 		{
; 700  : 			return -1;

	or	eax, -1
	jmp	SHORT $LN2@find_begin
$LN1@find_begin:

; 701  : 		}
; 702  : 		return  find_begin_same_string_size_<char_value_t,__cmp_t>((_M_pthis_string_data+string_cmp_index),(_M_string_length-string_cmp_index),sub_string.get_data(),sub_string.get_string_length());

	mov	ecx, DWORD PTR _sub_string$[ebp]
	call	?get_string_length@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_string_length
	push	eax
	mov	ecx, DWORD PTR _sub_string$[ebp]
	call	?get_data@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEPBDXZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_data
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR _string_cmp_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR _string_cmp_index$[ebp]
	push	eax
	call	??$find_begin_same_string_size_@DU?$pecker_value_compare@D@pecker_sdk@@@pecker_sdk@@YAHPBDH0H@Z ; pecker_sdk::find_begin_same_string_size_<char,pecker_sdk::pecker_value_compare<char> >
	add	esp, 16					; 00000010H
$LN2@find_begin:

; 703  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?find_begin_same_string_size@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHABV12@H@Z ENDP ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::find_begin_same_string_size
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?clip_string_in_share_buffer_left_part@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@H@Z
_TEXT	SEGMENT
_sub_string_reslut$ = -20				; size = 4
_this$ = -8						; size = 4
_new_string$ = 8					; size = 4
_nclip_index$ = 12					; size = 4
?clip_string_in_share_buffer_left_part@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@H@Z PROC ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::clip_string_in_share_buffer_left_part, COMDAT
; _this$ = ecx

; 705  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 706  : 		if (nclip_index >= _M_string_length)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nclip_index$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jl	SHORT $LN2@clip_strin

; 707  : 		{
; 708  : 			return P_ERR;

	or	eax, -1
	jmp	SHORT $LN3@clip_strin
$LN2@clip_strin:

; 709  : 		}
; 710  : 		string_result sub_string_reslut = get_share_buffer_sub_string(new_string,nclip_index);

	push	-1
	mov	eax, DWORD PTR _nclip_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_string$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_share_buffer_sub_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@HH@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_share_buffer_sub_string
	mov	DWORD PTR _sub_string_reslut$[ebp], eax

; 711  : 		if (P_OK == sub_string_reslut)

	cmp	DWORD PTR _sub_string_reslut$[ebp], 0
	jne	SHORT $LN1@clip_strin

; 712  : 		{
; 713  : 			_M_string_length = nclip_index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nclip_index$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN1@clip_strin:

; 714  : 		}
; 715  : 
; 716  : 		return sub_string_reslut;

	mov	eax, DWORD PTR _sub_string_reslut$[ebp]
$LN3@clip_strin:

; 717  : 
; 718  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?clip_string_in_share_buffer_left_part@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJAAV12@H@Z ENDP ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::clip_string_in_share_buffer_left_part
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_data@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_data@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEPBDXZ PROC ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_data, COMDAT
; _this$ = ecx

; 778  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 779  : 		return _M_pthis_string_data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 780  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_data@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEPBDXZ ENDP ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_data
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_string_length@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_string_length@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHXZ PROC ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_string_length, COMDAT
; _this$ = ecx

; 782  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 783  : 		return _M_string_length;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]

; 784  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_string_length@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHXZ ENDP ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_string_length
_TEXT	ENDS
PUBLIC	?append_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJABV12@@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::append_string
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?merge_neighbour_sub_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@SAJAAV12@00@Z
_TEXT	SEGMENT
_psub_string1_next$ = -116				; size = 4
_psub_string1$ = -104					; size = 4
_index$87143 = -92					; size = 4
_index$87139 = -80					; size = 4
_pheader$87138 = -68					; size = 4
_index$87132 = -56					; size = 4
_index$87128 = -44					; size = 4
_pheader$87127 = -32					; size = 4
_str_size$87125 = -20					; size = 4
_str_result$87121 = -8					; size = 4
_sub_string1$ = 8					; size = 4
_sub_string2$ = 12					; size = 4
_new_string$ = 16					; size = 4
?merge_neighbour_sub_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@SAJAAV12@00@Z PROC ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::merge_neighbour_sub_string, COMDAT

; 852  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 853  : 
; 854  : 		if ( 
; 855  : 			(sub_string1._M_string_buffer_size <= _BUFFER_SIZE || sub_string2._M_string_buffer_size <= _BUFFER_SIZE) ||
; 856  : 			(sub_string1._M_pstring_data_header._Large_buffer != sub_string2._M_pstring_data_header._Large_buffer) ||
; 857  : 			(( (sub_string1._M_pthis_string_data+sub_string1._M_string_length) != sub_string2._M_pthis_string_data) &&
; 858  : 			( (sub_string2._M_pthis_string_data+sub_string2._M_string_length) != sub_string1._M_pthis_string_data)) ||
; 859  : 			(null == sub_string1._M_shared_buffer_pre_string && null == sub_string1._M_shared_buffer_next_string) ||
; 860  : 			(null == sub_string2._M_shared_buffer_pre_string && null == sub_string2._M_shared_buffer_next_string) )

	mov	eax, DWORD PTR _sub_string1$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jle	SHORT $LN24@merge_neig
	mov	eax, DWORD PTR _sub_string2$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jle	SHORT $LN24@merge_neig
	mov	eax, DWORD PTR _sub_string1$[ebp]
	mov	ecx, DWORD PTR _sub_string2$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN24@merge_neig
	mov	eax, DWORD PTR _sub_string1$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _sub_string1$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _sub_string2$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	je	SHORT $LN23@merge_neig
	mov	eax, DWORD PTR _sub_string2$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _sub_string2$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _sub_string1$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jne	SHORT $LN24@merge_neig
$LN23@merge_neig:
	mov	eax, DWORD PTR _sub_string1$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN22@merge_neig
	mov	eax, DWORD PTR _sub_string1$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN24@merge_neig
$LN22@merge_neig:
	mov	eax, DWORD PTR _sub_string2$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	$LN25@merge_neig
	mov	eax, DWORD PTR _sub_string2$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	$LN25@merge_neig
$LN24@merge_neig:

; 861  : 		{
; 862  : 			string_result str_result = P_ERR;

	mov	DWORD PTR _str_result$87121[ebp], -1

; 863  : 
; 864  : 			if (&sub_string1 == &new_string)

	mov	eax, DWORD PTR _sub_string1$[ebp]
	cmp	eax, DWORD PTR _new_string$[ebp]
	jne	SHORT $LN21@merge_neig

; 865  : 			{
; 866  : 				str_result = new_string.append_string(sub_string2);

	mov	eax, DWORD PTR _sub_string2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_string$[ebp]
	call	?append_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJABV12@@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::append_string
	mov	DWORD PTR _str_result$87121[ebp], eax
	jmp	$LN20@merge_neig
$LN21@merge_neig:

; 867  : 			}
; 868  : 			else if (&sub_string2 == &new_string)

	mov	eax, DWORD PTR _sub_string2$[ebp]
	cmp	eax, DWORD PTR _new_string$[ebp]
	jne	$LN19@merge_neig

; 869  : 			{
; 870  : 				string_size_t str_size = sub_string2._M_string_length;

	mov	eax, DWORD PTR _sub_string2$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _str_size$87125[ebp], ecx

; 871  : 				str_result = new_string.append_string(sub_string1);

	mov	eax, DWORD PTR _sub_string1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_string$[ebp]
	call	?append_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJABV12@@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::append_string
	mov	DWORD PTR _str_result$87121[ebp], eax

; 872  : 				if (P_OK == str_result)

	cmp	DWORD PTR _str_result$87121[ebp], 0
	jne	SHORT $LN18@merge_neig

; 873  : 				{
; 874  : 					char_value_t* pheader = new_string._M_pthis_string_data + sub_string1._M_string_length;

	mov	eax, DWORD PTR _new_string$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _sub_string1$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR _pheader$87127[ebp], ecx

; 875  : 					for (string_char_index index = 0;index<str_size; ++index)

	mov	DWORD PTR _index$87128[ebp], 0
	jmp	SHORT $LN17@merge_neig
$LN16@merge_neig:
	mov	eax, DWORD PTR _index$87128[ebp]
	add	eax, 1
	mov	DWORD PTR _index$87128[ebp], eax
$LN17@merge_neig:
	mov	eax, DWORD PTR _index$87128[ebp]
	cmp	eax, DWORD PTR _str_size$87125[ebp]
	jge	SHORT $LN15@merge_neig

; 876  : 					{
; 877  : 						pheader[index] = new_string._M_pthis_string_data[index];

	mov	eax, DWORD PTR _new_string$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pheader$87127[ebp]
	add	edx, DWORD PTR _index$87128[ebp]
	mov	eax, DWORD PTR _index$87128[ebp]
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [edx], cl

; 878  : 					}

	jmp	SHORT $LN16@merge_neig
$LN15@merge_neig:

; 879  : 					for (string_char_index index =0; index < sub_string1._M_string_length; ++index)

	mov	DWORD PTR _index$87132[ebp], 0
	jmp	SHORT $LN14@merge_neig
$LN13@merge_neig:
	mov	eax, DWORD PTR _index$87132[ebp]
	add	eax, 1
	mov	DWORD PTR _index$87132[ebp], eax
$LN14@merge_neig:
	mov	eax, DWORD PTR _sub_string1$[ebp]
	mov	ecx, DWORD PTR _index$87132[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN18@merge_neig

; 880  : 					{
; 881  : 						new_string._M_pthis_string_data[index] = sub_string1._M_pthis_string_data[index];

	mov	eax, DWORD PTR _sub_string1$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _new_string$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _index$87132[ebp]
	mov	esi, DWORD PTR _index$87132[ebp]
	mov	cl, BYTE PTR [ecx+esi]
	mov	BYTE PTR [eax+edx], cl

; 882  : 					}

	jmp	SHORT $LN13@merge_neig
$LN18@merge_neig:

; 883  : 				}
; 884  : 			}
; 885  : 			else

	jmp	$LN20@merge_neig
$LN19@merge_neig:

; 886  : 			{
; 887  : 				str_result = new_string.init(sub_string1.get_string_length() + sub_string2.get_string_length());

	push	0
	mov	ecx, DWORD PTR _sub_string1$[ebp]
	call	?get_string_length@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_string_length
	mov	esi, eax
	mov	ecx, DWORD PTR _sub_string2$[ebp]
	call	?get_string_length@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_string_length
	add	esi, eax
	push	esi
	mov	ecx, DWORD PTR _new_string$[ebp]
	call	?init@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJH_N@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::init
	mov	DWORD PTR _str_result$87121[ebp], eax

; 888  : 				if (P_OK == str_result)

	cmp	DWORD PTR _str_result$87121[ebp], 0
	jne	SHORT $LN20@merge_neig

; 889  : 				{
; 890  : 					char_value_t* pheader = new_string._M_pthis_string_data;

	mov	eax, DWORD PTR _new_string$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pheader$87138[ebp], ecx

; 891  : 					for (string_char_index index = 0;index<sub_string1._M_string_length; ++index)

	mov	DWORD PTR _index$87139[ebp], 0
	jmp	SHORT $LN9@merge_neig
$LN8@merge_neig:
	mov	eax, DWORD PTR _index$87139[ebp]
	add	eax, 1
	mov	DWORD PTR _index$87139[ebp], eax
$LN9@merge_neig:
	mov	eax, DWORD PTR _sub_string1$[ebp]
	mov	ecx, DWORD PTR _index$87139[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN7@merge_neig

; 892  : 					{
; 893  : 						pheader[index] = sub_string1._M_pthis_string_data[index];

	mov	eax, DWORD PTR _sub_string1$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pheader$87138[ebp]
	add	edx, DWORD PTR _index$87139[ebp]
	mov	eax, DWORD PTR _index$87139[ebp]
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [edx], cl

; 894  : 					}

	jmp	SHORT $LN8@merge_neig
$LN7@merge_neig:

; 895  : 					pheader += sub_string1._M_string_length;

	mov	eax, DWORD PTR _sub_string1$[ebp]
	mov	ecx, DWORD PTR _pheader$87138[ebp]
	add	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _pheader$87138[ebp], ecx

; 896  : 					for (string_char_index index = 0; index <sub_string2._M_string_length;++index)

	mov	DWORD PTR _index$87143[ebp], 0
	jmp	SHORT $LN6@merge_neig
$LN5@merge_neig:
	mov	eax, DWORD PTR _index$87143[ebp]
	add	eax, 1
	mov	DWORD PTR _index$87143[ebp], eax
$LN6@merge_neig:
	mov	eax, DWORD PTR _sub_string2$[ebp]
	mov	ecx, DWORD PTR _index$87143[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN20@merge_neig

; 897  : 					{
; 898  : 						pheader[index] = sub_string2._M_pthis_string_data[index];

	mov	eax, DWORD PTR _sub_string2$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pheader$87138[ebp]
	add	edx, DWORD PTR _index$87143[ebp]
	mov	eax, DWORD PTR _index$87143[ebp]
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [edx], cl

; 899  : 					}

	jmp	SHORT $LN5@merge_neig
$LN20@merge_neig:

; 900  : 				}
; 901  : 			}
; 902  : 			return str_result;

	mov	eax, DWORD PTR _str_result$87121[ebp]
	jmp	$LN26@merge_neig
$LN25@merge_neig:

; 903  : 		}
; 904  : 		new_string._M_pstring_data_header._Large_buffer = sub_string1._M_pstring_data_header._Large_buffer;

	mov	eax, DWORD PTR _new_string$[ebp]
	mov	ecx, DWORD PTR _sub_string1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 905  : 		new_string._M_string_length = sub_string1._M_string_length + sub_string2._M_string_length;

	mov	eax, DWORD PTR _sub_string1$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _sub_string2$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _new_string$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 906  : 		new_string._M_string_buffer_size = sub_string1._M_string_buffer_size;

	mov	eax, DWORD PTR _new_string$[ebp]
	mov	ecx, DWORD PTR _sub_string1$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 907  : 
; 908  : 		String_base* psub_string1 = (String_base*)(&sub_string1);

	mov	eax, DWORD PTR _sub_string1$[ebp]
	mov	DWORD PTR _psub_string1$[ebp], eax

; 909  : 		String_base* psub_string1_next = psub_string1->_M_shared_buffer_next_string;

	mov	eax, DWORD PTR _psub_string1$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _psub_string1_next$[ebp], ecx

; 910  : 
; 911  : 		new_string._M_shared_buffer_pre_string = psub_string1;

	mov	eax, DWORD PTR _new_string$[ebp]
	mov	ecx, DWORD PTR _psub_string1$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 912  : 		new_string._M_shared_buffer_next_string = psub_string1->_M_shared_buffer_next_string;

	mov	eax, DWORD PTR _new_string$[ebp]
	mov	ecx, DWORD PTR _psub_string1$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx

; 913  : 		psub_string1->_M_shared_buffer_next_string = &new_string;

	mov	eax, DWORD PTR _psub_string1$[ebp]
	mov	ecx, DWORD PTR _new_string$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 914  : 		if (psub_string1_next)

	cmp	DWORD PTR _psub_string1_next$[ebp], 0
	je	SHORT $LN3@merge_neig

; 915  : 		{
; 916  : 			psub_string1_next->_M_shared_buffer_pre_string = &new_string;

	mov	eax, DWORD PTR _psub_string1_next$[ebp]
	mov	ecx, DWORD PTR _new_string$[ebp]
	mov	DWORD PTR [eax+28], ecx
$LN3@merge_neig:

; 917  : 		}
; 918  : 
; 919  : 		if (sub_string1._M_pthis_string_data < sub_string2._M_pthis_string_data)

	mov	eax, DWORD PTR _sub_string1$[ebp]
	mov	ecx, DWORD PTR _sub_string2$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+16]
	jae	SHORT $LN2@merge_neig

; 920  : 		{
; 921  : 			new_string._M_pthis_string_data = sub_string1._M_pthis_string_data;

	mov	eax, DWORD PTR _new_string$[ebp]
	mov	ecx, DWORD PTR _sub_string1$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 922  : 		}
; 923  : 		else

	jmp	SHORT $LN1@merge_neig
$LN2@merge_neig:

; 924  : 		{
; 925  : 			new_string._M_pthis_string_data = sub_string2._M_pthis_string_data;

	mov	eax, DWORD PTR _new_string$[ebp]
	mov	ecx, DWORD PTR _sub_string2$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
$LN1@merge_neig:

; 926  : 		}
; 927  : 
; 928  : 		return P_OK;

	xor	eax, eax
$LN26@merge_neig:

; 929  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?merge_neighbour_sub_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@SAJAAV12@00@Z ENDP ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::merge_neighbour_sub_string
_TEXT	ENDS
PUBLIC	?deallocate_objects@?$pecker_simple_allocator@D@pecker_sdk@@SAXPAD@Z ; pecker_sdk::pecker_simple_allocator<char>::deallocate_objects
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?clear@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJXZ PROC ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::clear, COMDAT
; _this$ = ecx

; 200  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 201  : 		if (_M_string_buffer_size > _BUFFER_SIZE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jle	SHORT $LN4@clear

; 202  : 		{
; 203  : 			if (null == _M_shared_buffer_next_string && null == _M_shared_buffer_pre_string)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN3@clear
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN3@clear

; 204  : 			{
; 205  : 				allocate_object_t::deallocate_objects(_M_pstring_data_header._Large_buffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?deallocate_objects@?$pecker_simple_allocator@D@pecker_sdk@@SAXPAD@Z ; pecker_sdk::pecker_simple_allocator<char>::deallocate_objects
	add	esp, 4
$LN3@clear:

; 206  : 			}
; 207  : 
; 208  : 			if (null != _M_shared_buffer_pre_string)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@clear

; 209  : 			{
; 210  : 				_M_shared_buffer_pre_string->_M_shared_buffer_next_string = _M_shared_buffer_next_string;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax

; 211  : 				_M_shared_buffer_pre_string = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
$LN2@clear:

; 212  : 			}
; 213  : 
; 214  : 			if (null != _M_shared_buffer_next_string)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN1@clear

; 215  : 			{
; 216  : 				_M_shared_buffer_next_string->_M_shared_buffer_pre_string = _M_shared_buffer_pre_string;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax

; 217  : 				_M_shared_buffer_next_string = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
$LN1@clear:

; 218  : 			}
; 219  : 
; 220  : 			_M_string_buffer_size = _BUFFER_SIZE;	

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 16			; 00000010H
$LN4@clear:

; 221  : 		}
; 222  : 
; 223  : 		_M_pthis_string_data = _M_pstring_data_header._Small_buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 224  : 		_M_string_length = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 225  : 
; 226  : 		return P_OK;

	xor	eax, eax

; 227  : 
; 228  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJXZ ENDP ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::clear
_TEXT	ENDS
PUBLIC	?allocate_objects@?$pecker_simple_allocator@D@pecker_sdk@@SAPADH@Z ; pecker_sdk::pecker_simple_allocator<char>::allocate_objects
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?init@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJH_N@Z
_TEXT	SEGMENT
tv69 = -232						; size = 4
_bis_release_buffer$ = -29				; size = 1
_pheaderpointer$ = -20					; size = 4
_this$ = -8						; size = 4
_string_length$ = 8					; size = 4
_bnew_buffer$ = 12					; size = 1
?init@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJH_N@Z PROC ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::init, COMDAT
; _this$ = ecx

; 361  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 		if ( (0 >= string_length) )

	cmp	DWORD PTR _string_length$[ebp], 0
	jg	SHORT $LN18@init@2

; 363  : 		{
; 364  : 			return P_ERR;

	or	eax, -1
	jmp	$LN19@init@2
$LN18@init@2:

; 365  : 		}
; 366  : 
; 367  : 		char_value_t* pheaderpointer = null;

	mov	DWORD PTR _pheaderpointer$[ebp], 0

; 368  : 		bool bis_release_buffer = (null == _M_shared_buffer_pre_string && null == _M_shared_buffer_next_string);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN21@init@2
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	jne	SHORT $LN21@init@2
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN22@init@2
$LN21@init@2:
	mov	DWORD PTR tv69[ebp], 0
$LN22@init@2:
	mov	dl, BYTE PTR tv69[ebp]
	mov	BYTE PTR _bis_release_buffer$[ebp], dl

; 369  : 
; 370  : 		if (string_length <= _BUFFER_SIZE)

	cmp	DWORD PTR _string_length$[ebp], 16	; 00000010H
	jg	SHORT $LN17@init@2

; 371  : 		{
; 372  : 			if (_M_string_buffer_size > _BUFFER_SIZE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jle	SHORT $LN16@init@2

; 373  : 			{
; 374  : 				if (STRING_BOOLEAN_FALSE == bnew_buffer)

	movzx	eax, BYTE PTR _bnew_buffer$[ebp]
	test	eax, eax
	jne	SHORT $LN15@init@2

; 375  : 				{
; 376  : 					if (bis_release_buffer)

	movzx	eax, BYTE PTR _bis_release_buffer$[ebp]
	test	eax, eax
	je	SHORT $LN14@init@2

; 377  : 					{
; 378  : 						pheaderpointer = _M_pstring_data_header._Large_buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pheaderpointer$[ebp], ecx

; 379  : 					}
; 380  : 					else

	jmp	SHORT $LN13@init@2
$LN14@init@2:

; 381  : 					{
; 382  : 						pheaderpointer = _M_pstring_data_header._Small_buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _pheaderpointer$[ebp], eax

; 383  : 						_M_string_buffer_size = _BUFFER_SIZE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 16			; 00000010H
$LN13@init@2:

; 384  : 					}
; 385  : 				}
; 386  : 				else

	jmp	SHORT $LN12@init@2
$LN15@init@2:

; 387  : 				{
; 388  : 					if (bis_release_buffer)

	movzx	eax, BYTE PTR _bis_release_buffer$[ebp]
	test	eax, eax
	je	SHORT $LN11@init@2

; 389  : 					{
; 390  : 						allocate_object_t::deallocate_objects(_M_pstring_data_header._Large_buffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?deallocate_objects@?$pecker_simple_allocator@D@pecker_sdk@@SAXPAD@Z ; pecker_sdk::pecker_simple_allocator<char>::deallocate_objects
	add	esp, 4
$LN11@init@2:

; 391  : 					}
; 392  : 					pheaderpointer = _M_pstring_data_header._Small_buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _pheaderpointer$[ebp], eax

; 393  : 					_M_string_buffer_size = _BUFFER_SIZE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 16			; 00000010H
$LN12@init@2:

; 394  : 				}
; 395  : 			}
; 396  : 			else

	jmp	SHORT $LN10@init@2
$LN16@init@2:

; 397  : 			{
; 398  : 				pheaderpointer = _M_pstring_data_header._Small_buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _pheaderpointer$[ebp], eax

; 399  : 				_M_string_buffer_size = _BUFFER_SIZE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 16			; 00000010H
$LN10@init@2:

; 400  : 			}
; 401  : 		}
; 402  : 		else

	jmp	SHORT $LN9@init@2
$LN17@init@2:

; 403  : 		{
; 404  : 			if ((string_length > _M_string_buffer_size) ||  
; 405  : 				 false == bis_release_buffer || 
; 406  : 				bnew_buffer)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _string_length$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jg	SHORT $LN7@init@2
	movzx	eax, BYTE PTR _bis_release_buffer$[ebp]
	test	eax, eax
	je	SHORT $LN7@init@2
	movzx	eax, BYTE PTR _bnew_buffer$[ebp]
	test	eax, eax
	je	SHORT $LN8@init@2
$LN7@init@2:

; 407  : 			{
; 408  : 				pheaderpointer = allocate_object_t::allocate_objects(string_length);

	mov	eax, DWORD PTR _string_length$[ebp]
	push	eax
	call	?allocate_objects@?$pecker_simple_allocator@D@pecker_sdk@@SAPADH@Z ; pecker_sdk::pecker_simple_allocator<char>::allocate_objects
	add	esp, 4
	mov	DWORD PTR _pheaderpointer$[ebp], eax

; 409  : 				if (null != pheaderpointer)

	cmp	DWORD PTR _pheaderpointer$[ebp], 0
	je	SHORT $LN6@init@2

; 410  : 				{
; 411  : 						if ( bis_release_buffer && _M_string_buffer_size > _BUFFER_SIZE )

	movzx	eax, BYTE PTR _bis_release_buffer$[ebp]
	test	eax, eax
	je	SHORT $LN5@init@2
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jle	SHORT $LN5@init@2

; 412  : 						{
; 413  : 							allocate_object_t::deallocate_objects(_M_pstring_data_header._Large_buffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?deallocate_objects@?$pecker_simple_allocator@D@pecker_sdk@@SAXPAD@Z ; pecker_sdk::pecker_simple_allocator<char>::deallocate_objects
	add	esp, 4
$LN5@init@2:

; 414  : 						}
; 415  : 						_M_pstring_data_header._Large_buffer = pheaderpointer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pheaderpointer$[ebp]
	mov	DWORD PTR [eax], ecx

; 416  : 						_M_string_buffer_size = string_length;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _string_length$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN6@init@2:

; 417  : 				}
; 418  : 			}
; 419  : 			else

	jmp	SHORT $LN9@init@2
$LN8@init@2:

; 420  : 			{
; 421  : 				pheaderpointer = _M_pstring_data_header._Large_buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pheaderpointer$[ebp], ecx
$LN9@init@2:

; 422  : 			}
; 423  : 		}
; 424  : 	
; 425  : 		if (null == pheaderpointer)

	cmp	DWORD PTR _pheaderpointer$[ebp], 0
	jne	SHORT $LN3@init@2

; 426  : 		{
; 427  : 			return P_ERR;

	or	eax, -1
	jmp	SHORT $LN19@init@2
$LN3@init@2:

; 428  : 		}
; 429  : 
; 430  : 		if (null != _M_shared_buffer_pre_string)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@init@2

; 431  : 		{
; 432  : 			_M_shared_buffer_pre_string->_M_shared_buffer_next_string = _M_shared_buffer_next_string;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax

; 433  : 			_M_shared_buffer_pre_string = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
$LN2@init@2:

; 434  : 		}
; 435  : 
; 436  : 		if (null != _M_shared_buffer_next_string)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN1@init@2

; 437  : 		{
; 438  : 			_M_shared_buffer_next_string->_M_shared_buffer_pre_string = _M_shared_buffer_pre_string;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax

; 439  : 			_M_shared_buffer_next_string = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
$LN1@init@2:

; 440  : 		}
; 441  : 
; 442  : 		_M_pthis_string_data = pheaderpointer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pheaderpointer$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 443  : 		_M_string_length = 0;//string_length;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 444  : 
; 445  : 		return P_OK;

	xor	eax, eax
$LN19@init@2:

; 446  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?init@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJH_N@Z ENDP ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::init
_TEXT	ENDS
PUBLIC	?append_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJPBDH@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::append_string
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?append_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_otherstring$ = 8					; size = 4
?append_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJABV12@@Z PROC ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::append_string, COMDAT
; _this$ = ecx

; 662  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 663  : 		return append_string(otherstring.get_data(),otherstring.get_string_length());

	mov	ecx, DWORD PTR _otherstring$[ebp]
	call	?get_string_length@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_string_length
	push	eax
	mov	ecx, DWORD PTR _otherstring$[ebp]
	call	?get_data@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QBEPBDXZ ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::get_data
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJPBDH@Z ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::append_string

; 664  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?append_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJABV12@@Z ENDP ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::append_string
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?append_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJPBDH@Z
_TEXT	SEGMENT
tv72 = -292						; size = 4
_index$88746 = -92					; size = 4
_index$88738 = -80					; size = 4
_index$88730 = -68					; size = 4
_index$88724 = -56					; size = 4
_bis_release_buffer$ = -41				; size = 1
_pheaderpointer$ = -32					; size = 4
_new_string_length$ = -20				; size = 4
_this$ = -8						; size = 4
_pstring_chars$ = 8					; size = 4
_string_length$ = 12					; size = 4
?append_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJPBDH@Z PROC ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::append_string, COMDAT
; _this$ = ecx

; 571  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 572  : 		if ( (null == pstring_chars && 0 >= string_length) )

	cmp	DWORD PTR _pstring_chars$[ebp], 0
	jne	SHORT $LN26@append_str
	cmp	DWORD PTR _string_length$[ebp], 0
	jg	SHORT $LN26@append_str

; 573  : 		{
; 574  : 			return P_OK;

	xor	eax, eax
	jmp	$LN27@append_str
$LN26@append_str:

; 575  : 		}
; 576  : 
; 577  : 		string_size_t new_string_length = string_length + _M_string_length;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _string_length$[ebp]
	add	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _new_string_length$[ebp], ecx

; 578  : 		char_value_t* pheaderpointer = null;

	mov	DWORD PTR _pheaderpointer$[ebp], 0

; 579  : 		bool bis_release_buffer = (null == _M_shared_buffer_pre_string && null == _M_shared_buffer_next_string);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN29@append_str
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	jne	SHORT $LN29@append_str
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN30@append_str
$LN29@append_str:
	mov	DWORD PTR tv72[ebp], 0
$LN30@append_str:
	mov	dl, BYTE PTR tv72[ebp]
	mov	BYTE PTR _bis_release_buffer$[ebp], dl

; 580  : 
; 581  : 		if (new_string_length <= _BUFFER_SIZE)

	cmp	DWORD PTR _new_string_length$[ebp], 16	; 00000010H
	jg	$LN25@append_str

; 582  : 		{
; 583  : 			if (_M_string_buffer_size > _BUFFER_SIZE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jle	SHORT $LN24@append_str

; 584  : 			{
; 585  : 					if (!bis_release_buffer)

	movzx	eax, BYTE PTR _bis_release_buffer$[ebp]
	test	eax, eax
	jne	SHORT $LN23@append_str

; 586  : 					{
; 587  : 						for (string_char_index index = 0;index<_M_string_length;++index)

	mov	DWORD PTR _index$88724[ebp], 0
	jmp	SHORT $LN22@append_str
$LN21@append_str:
	mov	eax, DWORD PTR _index$88724[ebp]
	add	eax, 1
	mov	DWORD PTR _index$88724[ebp], eax
$LN22@append_str:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$88724[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN20@append_str

; 588  : 						{
; 589  : 							_M_pstring_data_header._Small_buffer[index] = *(_M_pthis_string_data + index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _index$88724[ebp]
	mov	eax, DWORD PTR _index$88724[ebp]
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [edx], cl

; 590  : 						}

	jmp	SHORT $LN21@append_str
$LN20@append_str:

; 591  : 						_M_pthis_string_data =  _M_pstring_data_header._Small_buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 592  : 						_M_string_buffer_size = _BUFFER_SIZE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 16			; 00000010H
$LN23@append_str:

; 593  : 					}
; 594  : 			}
; 595  : 			else

	jmp	SHORT $LN19@append_str
$LN24@append_str:

; 596  : 			{
; 597  : 				if (_M_pthis_string_data - _M_pstring_data_header._Small_buffer + new_string_length > _BUFFER_SIZE)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _new_string_length$[ebp]
	cmp	ecx, 16					; 00000010H
	jle	SHORT $LN19@append_str

; 598  : 				{
; 599  : 					for (string_char_index index = 0;index<_M_string_length;++index)

	mov	DWORD PTR _index$88730[ebp], 0
	jmp	SHORT $LN17@append_str
$LN16@append_str:
	mov	eax, DWORD PTR _index$88730[ebp]
	add	eax, 1
	mov	DWORD PTR _index$88730[ebp], eax
$LN17@append_str:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$88730[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN15@append_str

; 600  : 					{
; 601  : 						_M_pstring_data_header._Small_buffer[index] = *(_M_pthis_string_data + index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _index$88730[ebp]
	mov	eax, DWORD PTR _index$88730[ebp]
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [edx], cl

; 602  : 					}

	jmp	SHORT $LN16@append_str
$LN15@append_str:

; 603  : 					_M_pthis_string_data =  _M_pstring_data_header._Small_buffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 604  : 					_M_string_buffer_size = _BUFFER_SIZE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 16			; 00000010H
$LN19@append_str:

; 605  : 				}
; 606  : 			}
; 607  : 		}
; 608  : 		else

	jmp	$LN14@append_str
$LN25@append_str:

; 609  : 		{
; 610  : 			if ((new_string_length > _M_string_buffer_size) ||  
; 611  : 				false == bis_release_buffer )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _new_string_length$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jg	SHORT $LN12@append_str
	movzx	eax, BYTE PTR _bis_release_buffer$[ebp]
	test	eax, eax
	jne	$LN14@append_str
$LN12@append_str:

; 612  : 			{
; 613  : 				pheaderpointer = allocate_object_t::allocate_objects(new_string_length);

	mov	eax, DWORD PTR _new_string_length$[ebp]
	push	eax
	call	?allocate_objects@?$pecker_simple_allocator@D@pecker_sdk@@SAPADH@Z ; pecker_sdk::pecker_simple_allocator<char>::allocate_objects
	add	esp, 4
	mov	DWORD PTR _pheaderpointer$[ebp], eax

; 614  : 				if (null != pheaderpointer)

	cmp	DWORD PTR _pheaderpointer$[ebp], 0
	je	SHORT $LN11@append_str

; 615  : 				{
; 616  : 					for (string_char_index index = 0;index<_M_string_length;++index)

	mov	DWORD PTR _index$88738[ebp], 0
	jmp	SHORT $LN10@append_str
$LN9@append_str:
	mov	eax, DWORD PTR _index$88738[ebp]
	add	eax, 1
	mov	DWORD PTR _index$88738[ebp], eax
$LN10@append_str:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$88738[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN8@append_str

; 617  : 					{
; 618  : 						*(pheaderpointer + index) = *(_M_pthis_string_data + index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pheaderpointer$[ebp]
	add	edx, DWORD PTR _index$88738[ebp]
	mov	eax, DWORD PTR _index$88738[ebp]
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [edx], cl

; 619  : 					}

	jmp	SHORT $LN9@append_str
$LN8@append_str:

; 620  : 
; 621  : 					if ( bis_release_buffer && _M_string_buffer_size > _BUFFER_SIZE )

	movzx	eax, BYTE PTR _bis_release_buffer$[ebp]
	test	eax, eax
	je	SHORT $LN7@append_str
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 16			; 00000010H
	jle	SHORT $LN7@append_str

; 622  : 					{
; 623  : 						allocate_object_t::deallocate_objects(_M_pstring_data_header._Large_buffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?deallocate_objects@?$pecker_simple_allocator@D@pecker_sdk@@SAXPAD@Z ; pecker_sdk::pecker_simple_allocator<char>::deallocate_objects
	add	esp, 4
$LN7@append_str:

; 624  : 					}
; 625  : 
; 626  : 					_M_pstring_data_header._Large_buffer = pheaderpointer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pheaderpointer$[ebp]
	mov	DWORD PTR [eax], ecx

; 627  : 					_M_string_buffer_size = new_string_length;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _new_string_length$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 628  : 				}
; 629  : 				else

	jmp	SHORT $LN14@append_str
$LN11@append_str:

; 630  : 				{
; 631  : 					return P_ERR;

	or	eax, -1
	jmp	$LN27@append_str
$LN14@append_str:

; 632  : 				}
; 633  : 			}
; 634  : 		}
; 635  : 
; 636  : 
; 637  : 		if (null != _M_shared_buffer_pre_string)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN5@append_str

; 638  : 		{
; 639  : 			_M_shared_buffer_pre_string->_M_shared_buffer_next_string = _M_shared_buffer_next_string;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax

; 640  : 			_M_shared_buffer_pre_string = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
$LN5@append_str:

; 641  : 		}
; 642  : 
; 643  : 		if (null != _M_shared_buffer_next_string)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN4@append_str

; 644  : 		{
; 645  : 			_M_shared_buffer_next_string->_M_shared_buffer_pre_string = _M_shared_buffer_pre_string;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax

; 646  : 			_M_shared_buffer_next_string = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
$LN4@append_str:

; 647  : 		}
; 648  : 
; 649  : 		pheaderpointer = _M_pthis_string_data +  _M_string_length;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR _pheaderpointer$[ebp], ecx

; 650  : 
; 651  : 		for (string_char_index index = 0 ;index<string_length; ++index)

	mov	DWORD PTR _index$88746[ebp], 0
	jmp	SHORT $LN3@append_str
$LN2@append_str:
	mov	eax, DWORD PTR _index$88746[ebp]
	add	eax, 1
	mov	DWORD PTR _index$88746[ebp], eax
$LN3@append_str:
	mov	eax, DWORD PTR _index$88746[ebp]
	cmp	eax, DWORD PTR _string_length$[ebp]
	jge	SHORT $LN1@append_str

; 652  : 		{
; 653  : 			*(pheaderpointer + index) = *(pstring_chars + index);

	mov	eax, DWORD PTR _pheaderpointer$[ebp]
	add	eax, DWORD PTR _index$88746[ebp]
	mov	ecx, DWORD PTR _pstring_chars$[ebp]
	add	ecx, DWORD PTR _index$88746[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 654  : 		}

	jmp	SHORT $LN2@append_str
$LN1@append_str:

; 655  : 		_M_string_length = new_string_length;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _new_string_length$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 656  : 
; 657  : 		return P_OK;

	xor	eax, eax
$LN27@append_str:

; 658  : 
; 659  : 
; 660  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?append_string@?$pecker_share_string_base_t@DU?$pecker_value_compare@D@pecker_sdk@@V?$pecker_simple_allocator@D@2@$0BA@@pecker_sdk@@QAEJPBDH@Z ENDP ; pecker_sdk::pecker_share_string_base_t<char,pecker_sdk::pecker_value_compare<char>,pecker_sdk::pecker_simple_allocator<char>,16>::append_string
_TEXT	ENDS
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\native\pecker_allocator.h
;	COMDAT ?allocate_objects@?$pecker_simple_allocator@D@pecker_sdk@@SAPADH@Z
_TEXT	SEGMENT
$T92162 = -200						; size = 4
_nSize$ = 8						; size = 4
?allocate_objects@?$pecker_simple_allocator@D@pecker_sdk@@SAPADH@Z PROC ; pecker_sdk::pecker_simple_allocator<char>::allocate_objects, COMDAT

; 45   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 46   : 			if(nSize > 0)

	cmp	DWORD PTR _nSize$[ebp], 0
	jle	SHORT $LN1@allocate_o

; 47   : 			{
; 48   : 				return new className[nSize];

	mov	eax, DWORD PTR _nSize$[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T92162[ebp], eax
	mov	eax, DWORD PTR $T92162[ebp]
	jmp	SHORT $LN2@allocate_o
$LN1@allocate_o:

; 49   : 			}
; 50   : 			return null;

	xor	eax, eax
$LN2@allocate_o:

; 51   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?allocate_objects@?$pecker_simple_allocator@D@pecker_sdk@@SAPADH@Z ENDP ; pecker_sdk::pecker_simple_allocator<char>::allocate_objects
_TEXT	ENDS
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?deallocate_objects@?$pecker_simple_allocator@D@pecker_sdk@@SAXPAD@Z
_TEXT	SEGMENT
$T92165 = -200						; size = 4
_pDelObject$ = 8					; size = 4
?deallocate_objects@?$pecker_simple_allocator@D@pecker_sdk@@SAXPAD@Z PROC ; pecker_sdk::pecker_simple_allocator<char>::deallocate_objects, COMDAT

; 54   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 55   : 			if(null != pDelObject)

	cmp	DWORD PTR _pDelObject$[ebp], 0
	je	SHORT $LN2@deallocate

; 56   : 			{
; 57   : 				delete [] pDelObject;

	mov	eax, DWORD PTR _pDelObject$[ebp]
	mov	DWORD PTR $T92165[ebp], eax
	mov	ecx, DWORD PTR $T92165[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@deallocate:

; 58   : 			}
; 59   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate_objects@?$pecker_simple_allocator@D@pecker_sdk@@SAXPAD@Z ENDP ; pecker_sdk::pecker_simple_allocator<char>::deallocate_objects
_TEXT	ENDS
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 10.0\vc\include\ostream
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -352						; size = 8
tv293 = -345						; size = 1
tv286 = -345						; size = 1
tv345 = -344						; size = 8
tv292 = -344						; size = 4
tv285 = -344						; size = 4
tv291 = -340						; size = 4
tv288 = -340						; size = 8
tv284 = -340						; size = 4
tv331 = -336						; size = 8
tv290 = -336						; size = 4
tv283 = -336						; size = 4
tv287 = -332						; size = 4
tv137 = -332						; size = 4
tv289 = -329						; size = 1
tv282 = -329						; size = 1
$T92170 = -324						; size = 4
$T92171 = -312						; size = 4
$T92172 = -300						; size = 4
$T92173 = -288						; size = 4
$T92174 = -276						; size = 4
__Ok$ = -72						; size = 8
__Pad$ = -56						; size = 8
__Count$ = -40						; size = 8
__State$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 767  : 	{	// insert NTBS into char stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 768  : 	typedef char _Elem;
; 769  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 770  : 	ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR __State$[ebp], 0

; 771  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	xor	ecx, ecx
	mov	DWORD PTR __Count$[ebp], eax
	mov	DWORD PTR __Count$[ebp+4], ecx

; 772  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 773  : 		? 0 : _Ostr.width() - _Count;

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv331[ebp], eax
	mov	DWORD PTR tv331[ebp+4], edx
	cmp	DWORD PTR tv331[ebp+4], 0
	jl	SHORT $LN17@operator
	jg	SHORT $LN25@operator
	cmp	DWORD PTR tv331[ebp], 0
	jbe	SHORT $LN17@operator
$LN25@operator:
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv345[ebp], eax
	mov	DWORD PTR tv345[ebp+4], edx
	mov	eax, DWORD PTR tv345[ebp+4]
	cmp	eax, DWORD PTR __Count$[ebp+4]
	jl	SHORT $LN17@operator
	jg	SHORT $LN26@operator
	mov	ecx, DWORD PTR tv345[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jbe	SHORT $LN17@operator
$LN26@operator:
	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR __Count$[ebp]
	sbb	edx, DWORD PTR __Count$[ebp+4]
	mov	DWORD PTR tv135[ebp], eax
	mov	DWORD PTR tv135[ebp+4], edx
	jmp	SHORT $LN18@operator
$LN17@operator:
	mov	DWORD PTR tv135[ebp], 0
	mov	DWORD PTR tv135[ebp+4], 0
$LN18@operator:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR __Pad$[ebp], ecx
	mov	edx, DWORD PTR tv135[ebp+4]
	mov	DWORD PTR __Pad$[ebp+4], edx

; 774  : 	const typename _Myos::sentry _Ok(_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 775  : 
; 776  : 	if (!_Ok)

	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
	cmp	eax, -1
	jne	SHORT $LN14@operator

; 777  : 		_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 778  : 	else

	jmp	$LN13@operator
$LN14@operator:

; 779  : 		{	// state okay, insert
; 780  : 		_TRY_IO_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 781  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv137[ebp], eax
	mov	eax, DWORD PTR tv137[ebp]
	and	eax, 448				; 000001c0H
	cmp	eax, 64					; 00000040H
	je	$LN11@operator
	jmp	SHORT $LN10@operator
$LN9@operator:

; 782  : 			for (; 0 < _Pad; --_Pad)	// pad on left

	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN10@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	$LN11@operator
	jg	SHORT $LN27@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	$LN11@operator
$LN27@operator:

; 783  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 784  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv282[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv283[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv282[ebp]
	push	eax
	mov	ecx, DWORD PTR tv283[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv284[ebp], eax
	mov	ecx, DWORD PTR tv284[ebp]
	mov	DWORD PTR $T92170[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR tv285[ebp], eax
	mov	edx, DWORD PTR tv285[ebp]
	mov	DWORD PTR $T92171[ebp], edx
	lea	eax, DWORD PTR $T92170[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92171[ebp]
	push	ecx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	mov	BYTE PTR tv286[ebp], al
	movzx	edx, BYTE PTR tv286[ebp]
	test	edx, edx
	je	SHORT $LN7@operator

; 785  : 					{	// insertion failed, quit
; 786  : 					_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 787  : 					break;

	jmp	SHORT $LN11@operator
$LN7@operator:

; 788  : 					}
; 789  : 
; 790  : 		if (_State == ios_base::goodbit

	jmp	$LN9@operator
$LN11@operator:

; 791  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

	cmp	DWORD PTR __State$[ebp], 0
	jne	SHORT $LN6@operator
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv287[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR __Count$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR tv287[ebp]
	call	DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv288[ebp], eax
	mov	DWORD PTR tv288[ebp+4], edx
	mov	eax, DWORD PTR tv288[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jne	SHORT $LN28@operator
	mov	ecx, DWORD PTR tv288[ebp+4]
	cmp	ecx, DWORD PTR __Count$[ebp+4]
	je	SHORT $LN6@operator
$LN28@operator:

; 792  : 			_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN6@operator:

; 793  : 
; 794  : 		if (_State == ios_base::goodbit)

	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN5@operator
	jmp	SHORT $LN4@operator
$LN3@operator:

; 795  : 			for (; 0 < _Pad; --_Pad)	// pad on right

	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	$LN5@operator
	jg	SHORT $LN29@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	$LN5@operator
$LN29@operator:

; 796  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 797  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv289[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv290[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv289[ebp]
	push	eax
	mov	ecx, DWORD PTR tv290[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv291[ebp], eax
	mov	ecx, DWORD PTR tv291[ebp]
	mov	DWORD PTR $T92172[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR tv292[ebp], eax
	mov	edx, DWORD PTR tv292[ebp]
	mov	DWORD PTR $T92173[ebp], edx
	lea	eax, DWORD PTR $T92172[ebp]
	push	eax
	lea	ecx, DWORD PTR $T92173[ebp]
	push	ecx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	mov	BYTE PTR tv293[ebp], al
	movzx	edx, BYTE PTR tv293[ebp]
	test	edx, edx
	je	SHORT $LN1@operator

; 798  : 					{	// insertion failed, quit
; 799  : 					_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 800  : 					break;

	jmp	SHORT $LN5@operator
$LN1@operator:

; 801  : 					}

	jmp	$LN3@operator
$LN5@operator:

; 802  : 		_Ostr.width(0);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 803  : 		_CATCH_IO_(_Ostr)

	mov	esi, esp
	push	1
	push	4
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN13@operator
	ret	0
$LN19@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN13@operator:

; 804  : 		}
; 805  : 
; 806  : 	_Ostr.setstate(_State);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 807  : 	return (_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR $T92174[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	eax, DWORD PTR $T92174[ebp]

; 808  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN33@operator:
	DD	1
	DD	$LN32@operator
$LN32@operator:
	DD	-72					; ffffffb8H
	DD	8
	DD	$LN30@operator
$LN30@operator:
	DB	95					; 0000005fH
	DB	79					; 0000004fH
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-356]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 491  : 		return (_CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	_strlen
	add	esp, 4

; 492  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 552  : 		{	// test for metacharacter equality

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 553  : 		return (_Left == _Right);

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al

; 554  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 562  : 		{	// return end-of-file metacharacter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 563  : 		return (EOF);

	or	eax, -1

; 564  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio 10.0\vc\include\ostream
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 114  : 			{	// construct locking and testing stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 115  : 			if (_Ostr.good() && _Ostr.tie() != 0)

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@sentry
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@sentry

; 116  : 				_Ostr.tie()->flush();

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, eax
	call	DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@sentry:

; 117  : 			_Ok = _Ostr.good();	// store test only after flushing tie

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], al

; 118  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 121  : 			{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 122  :  #if _HAS_EXCEPTIONS
; 123  : 			if (!uncaught_exception())

	mov	esi, esp
	call	DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@sentry@2

; 124  : 				this->_Myostr._Osfx();

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@sentry@2:

; 125  : 
; 126  :  #else /* _HAS_EXCEPTIONS */
; 127  : 			this->_Myostr._Osfx();
; 128  :  #endif /* _HAS_EXCEPTIONS */
; 129  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*, COMDAT
; _this$ = ecx

; 132  : 			{	// test if stream state okay

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 			return (_Ok ? _CONVERTIBLE_TO_TRUE : 0);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+4]
	neg	eax
	sbb	eax, eax
	neg	eax
	sub	eax, 1

; 134  : 			}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv90 = -208						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 91   : 			{	// lock the stream buffer, if there

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR [eax], ecx

; 92   : 			if (_Myostr.rdbuf() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@Sentry_bas

; 93   : 				_Myostr.rdbuf()->_Lock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv90[ebp], eax
	mov	ecx, DWORD PTR tv90[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Sentry_bas:

; 94   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv90 = -208						; size = 4
_this$ = -8						; size = 4
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 97   : 			{	// destroy after unlocking

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 			if (_Myostr.rdbuf() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@Sentry_bas@2

; 99   : 				_Myostr.rdbuf()->_Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv90[ebp], eax
	mov	ecx, DWORD PTR tv90[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Sentry_bas@2:

; 100  : 			}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
PUBLIC	?compare@?$pecker_value_compare@D@pecker_sdk@@SAHABD0@Z ; pecker_sdk::pecker_value_compare<char>::compare
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_string.h
;	COMDAT ??$find_first_string_index_@DU?$pecker_value_compare@D@pecker_sdk@@@pecker_sdk@@YAHPBDH0H@Z
_TEXT	SEGMENT
_itemp_index$89861 = -44				; size = 4
_icmp_result$89859 = -32				; size = 4
_index$ = -20						; size = 4
_same_chars_count$ = -8					; size = 4
_pstring_chars$ = 8					; size = 4
_string_length$ = 12					; size = 4
_pfind_string_chars$ = 16				; size = 4
_cmp_string_length$ = 20				; size = 4
??$find_first_string_index_@DU?$pecker_value_compare@D@pecker_sdk@@@pecker_sdk@@YAHPBDH0H@Z PROC ; pecker_sdk::find_first_string_index_<char,pecker_sdk::pecker_value_compare<char> >, COMDAT

; 30   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 31   : 	if (cmp_string_length > string_length || null == pstring_chars || 0 >= string_length || null == pfind_string_chars || 0 >= cmp_string_length)

	mov	eax, DWORD PTR _cmp_string_length$[ebp]
	cmp	eax, DWORD PTR _string_length$[ebp]
	jg	SHORT $LN15@find_first@2
	cmp	DWORD PTR _pstring_chars$[ebp], 0
	je	SHORT $LN15@find_first@2
	cmp	DWORD PTR _string_length$[ebp], 0
	jle	SHORT $LN15@find_first@2
	cmp	DWORD PTR _pfind_string_chars$[ebp], 0
	je	SHORT $LN15@find_first@2
	cmp	DWORD PTR _cmp_string_length$[ebp], 0
	jg	SHORT $LN16@find_first@2
$LN15@find_first@2:

; 32   : 	{
; 33   : 		return -1;

	or	eax, -1
	jmp	$LN17@find_first@2
$LN16@find_first@2:

; 34   : 	}
; 35   : 	string_size_t same_chars_count = 0;

	mov	DWORD PTR _same_chars_count$[ebp], 0

; 36   : 	string_char_index index=0;

	mov	DWORD PTR _index$[ebp], 0
	jmp	SHORT $LN14@find_first@2
$LN13@find_first@2:

; 37   : 	for (;index<string_length;++index)

	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN14@find_first@2:
	mov	eax, DWORD PTR _index$[ebp]
	cmp	eax, DWORD PTR _string_length$[ebp]
	jge	$LN12@find_first@2

; 38   : 	{
; 39   : 		int icmp_result = __cmp_t::compare(*(pstring_chars+index),*(pfind_string_chars+same_chars_count));

	mov	eax, DWORD PTR _pfind_string_chars$[ebp]
	add	eax, DWORD PTR _same_chars_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pstring_chars$[ebp]
	add	ecx, DWORD PTR _index$[ebp]
	push	ecx
	call	?compare@?$pecker_value_compare@D@pecker_sdk@@SAHABD0@Z ; pecker_sdk::pecker_value_compare<char>::compare
	add	esp, 8
	mov	DWORD PTR _icmp_result$89859[ebp], eax

; 40   : 		if (0 == icmp_result)

	cmp	DWORD PTR _icmp_result$89859[ebp], 0
	jne	SHORT $LN11@find_first@2

; 41   : 		{
; 42   : 			string_char_index itemp_index = index + 1;

	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _itemp_index$89861[ebp], eax

; 43   : 			++same_chars_count;

	mov	eax, DWORD PTR _same_chars_count$[ebp]
	add	eax, 1
	mov	DWORD PTR _same_chars_count$[ebp], eax
	jmp	SHORT $LN10@find_first@2
$LN9@find_first@2:

; 44   : 			for (;itemp_index<string_length;++itemp_index)

	mov	eax, DWORD PTR _itemp_index$89861[ebp]
	add	eax, 1
	mov	DWORD PTR _itemp_index$89861[ebp], eax
$LN10@find_first@2:
	mov	eax, DWORD PTR _itemp_index$89861[ebp]
	cmp	eax, DWORD PTR _string_length$[ebp]
	jge	SHORT $LN8@find_first@2

; 45   : 			{
; 46   : 				icmp_result = __cmp_t::compare(*(pstring_chars+itemp_index),*(pfind_string_chars+same_chars_count));

	mov	eax, DWORD PTR _pfind_string_chars$[ebp]
	add	eax, DWORD PTR _same_chars_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pstring_chars$[ebp]
	add	ecx, DWORD PTR _itemp_index$89861[ebp]
	push	ecx
	call	?compare@?$pecker_value_compare@D@pecker_sdk@@SAHABD0@Z ; pecker_sdk::pecker_value_compare<char>::compare
	add	esp, 8
	mov	DWORD PTR _icmp_result$89859[ebp], eax

; 47   : 
; 48   : 				if (0 != icmp_result || same_chars_count == cmp_string_length)

	cmp	DWORD PTR _icmp_result$89859[ebp], 0
	jne	SHORT $LN6@find_first@2
	mov	eax, DWORD PTR _same_chars_count$[ebp]
	cmp	eax, DWORD PTR _cmp_string_length$[ebp]
	jne	SHORT $LN7@find_first@2
$LN6@find_first@2:

; 49   : 				{
; 50   : 					break;

	jmp	SHORT $LN8@find_first@2

; 51   : 				}
; 52   : 				else

	jmp	SHORT $LN5@find_first@2
$LN7@find_first@2:

; 53   : 				{
; 54   : 					++same_chars_count;

	mov	eax, DWORD PTR _same_chars_count$[ebp]
	add	eax, 1
	mov	DWORD PTR _same_chars_count$[ebp], eax
$LN5@find_first@2:

; 55   : 				}
; 56   : 			}

	jmp	SHORT $LN9@find_first@2
$LN8@find_first@2:

; 57   : 			if (same_chars_count == cmp_string_length)

	mov	eax, DWORD PTR _same_chars_count$[ebp]
	cmp	eax, DWORD PTR _cmp_string_length$[ebp]
	jne	SHORT $LN4@find_first@2

; 58   : 			{
; 59   : 				break;

	jmp	SHORT $LN12@find_first@2

; 60   : 			}
; 61   : 			else

	jmp	SHORT $LN11@find_first@2
$LN4@find_first@2:

; 62   : 			{
; 63   : 				index = itemp_index;

	mov	eax, DWORD PTR _itemp_index$89861[ebp]
	mov	DWORD PTR _index$[ebp], eax

; 64   : 				same_chars_count = 0;

	mov	DWORD PTR _same_chars_count$[ebp], 0
$LN11@find_first@2:

; 65   : 			}
; 66   : 		}
; 67   : 	}

	jmp	$LN13@find_first@2
$LN12@find_first@2:

; 68   : 
; 69   : 	if (0 == same_chars_count)

	cmp	DWORD PTR _same_chars_count$[ebp], 0
	jne	SHORT $LN2@find_first@2

; 70   : 	{
; 71   : 		return -1;

	or	eax, -1
	jmp	SHORT $LN17@find_first@2

; 72   : 	}
; 73   : 	else

	jmp	SHORT $LN17@find_first@2
$LN2@find_first@2:

; 74   : 	{
; 75   : 		return index;

	mov	eax, DWORD PTR _index$[ebp]
$LN17@find_first@2:

; 76   : 	}
; 77   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$find_first_string_index_@DU?$pecker_value_compare@D@pecker_sdk@@@pecker_sdk@@YAHPBDH0H@Z ENDP ; pecker_sdk::find_first_string_index_<char,pecker_sdk::pecker_value_compare<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_value_compare.h
_TEXT	ENDS
;	COMDAT ?compare@?$pecker_value_compare@D@pecker_sdk@@SAHABD0@Z
_TEXT	SEGMENT
_value1$ = 8						; size = 4
_value2$ = 12						; size = 4
?compare@?$pecker_value_compare@D@pecker_sdk@@SAHABD0@Z PROC ; pecker_sdk::pecker_value_compare<char>::compare, COMDAT

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 80   : 	//++tst_char_cmp_count;
; 81   : 	return (value1 - value2);

	mov	eax, DWORD PTR _value1$[ebp]
	movsx	eax, BYTE PTR [eax]
	mov	ecx, DWORD PTR _value2$[ebp]
	movsx	edx, BYTE PTR [ecx]
	sub	eax, edx

; 82   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?compare@?$pecker_value_compare@D@pecker_sdk@@SAHABD0@Z ENDP ; pecker_sdk::pecker_value_compare<char>::compare
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_string.h
_TEXT	ENDS
;	COMDAT ??$find_begin_same_string_size_@DU?$pecker_value_compare@D@pecker_sdk@@@pecker_sdk@@YAHPBDH0H@Z
_TEXT	SEGMENT
_cmp_result$89880 = -20					; size = 4
_index$ = -8						; size = 4
_pstring_chars$ = 8					; size = 4
_string_length$ = 12					; size = 4
_pcmp_string_chars$ = 16				; size = 4
_cmp_string_length$ = 20				; size = 4
??$find_begin_same_string_size_@DU?$pecker_value_compare@D@pecker_sdk@@@pecker_sdk@@YAHPBDH0H@Z PROC ; pecker_sdk::find_begin_same_string_size_<char,pecker_sdk::pecker_value_compare<char> >, COMDAT

; 82   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 83   : 	if (null == pstring_chars || 0 >= string_length || null == pcmp_string_chars || 0 >= cmp_string_length)

	cmp	DWORD PTR _pstring_chars$[ebp], 0
	je	SHORT $LN6@find_begin@2
	cmp	DWORD PTR _string_length$[ebp], 0
	jle	SHORT $LN6@find_begin@2
	cmp	DWORD PTR _pcmp_string_chars$[ebp], 0
	je	SHORT $LN6@find_begin@2
	cmp	DWORD PTR _cmp_string_length$[ebp], 0
	jg	SHORT $LN7@find_begin@2
$LN6@find_begin@2:

; 84   : 	{
; 85   : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN8@find_begin@2
$LN7@find_begin@2:

; 86   : 	}
; 87   : 	if (string_length > cmp_string_length)

	mov	eax, DWORD PTR _string_length$[ebp]
	cmp	eax, DWORD PTR _cmp_string_length$[ebp]
	jle	SHORT $LN5@find_begin@2

; 88   : 	{
; 89   : 		string_length = cmp_string_length;

	mov	eax, DWORD PTR _cmp_string_length$[ebp]
	mov	DWORD PTR _string_length$[ebp], eax
$LN5@find_begin@2:

; 90   : 	}
; 91   : 	string_char_index index = 0;

	mov	DWORD PTR _index$[ebp], 0
	jmp	SHORT $LN4@find_begin@2
$LN3@find_begin@2:

; 92   : 	for (; index<string_length;++index)

	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN4@find_begin@2:
	mov	eax, DWORD PTR _index$[ebp]
	cmp	eax, DWORD PTR _string_length$[ebp]
	jge	SHORT $LN2@find_begin@2

; 93   : 	{
; 94   : 		int cmp_result = __cmp_t::compare(*(pstring_chars+index),*(pcmp_string_chars+index));

	mov	eax, DWORD PTR _pcmp_string_chars$[ebp]
	add	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pstring_chars$[ebp]
	add	ecx, DWORD PTR _index$[ebp]
	push	ecx
	call	?compare@?$pecker_value_compare@D@pecker_sdk@@SAHABD0@Z ; pecker_sdk::pecker_value_compare<char>::compare
	add	esp, 8
	mov	DWORD PTR _cmp_result$89880[ebp], eax

; 95   : 		if (0 != cmp_result)

	cmp	DWORD PTR _cmp_result$89880[ebp], 0
	je	SHORT $LN1@find_begin@2

; 96   : 		{
; 97   : 			break;

	jmp	SHORT $LN2@find_begin@2
$LN1@find_begin@2:

; 98   : 		}
; 99   : 		//++nsame_char_count;
; 100  : 	}

	jmp	SHORT $LN3@find_begin@2
$LN2@find_begin@2:

; 101  : 	return index; //nsame_char_count;

	mov	eax, DWORD PTR _index$[ebp]
$LN8@find_begin@2:

; 102  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$find_begin_same_string_size_@DU?$pecker_value_compare@D@pecker_sdk@@@pecker_sdk@@YAHPBDH0H@Z ENDP ; pecker_sdk::find_begin_same_string_size_<char,pecker_sdk::pecker_value_compare<char> >
_TEXT	ENDS
END
