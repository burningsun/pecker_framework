; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	F:\codes\pecker_framework_git\pecker_src\pecker_framework\array_test.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??1?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::~pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >
PUBLIC	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
PUBLIC	?clear@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJ_N@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::clear
PUBLIC	??_C@_0O@MBCOGNKJ@array?5?5sorted?$AA@		; `string'
PUBLIC	??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > > >
PUBLIC	??_C@_0BB@GBNGOMJI@array?5to?5be?5sort?$AA@	; `string'
PUBLIC	??_C@_0CB@ILKKIGKB@resize?0true?0get?5set?5begin?5to?5end@ ; `string'
PUBLIC	??_C@_0BE@GMDFIGCC@resize?0true?0get?5set?$AA@	; `string'
PUBLIC	??_C@_0BM@JOHNJOMH@resize?0get?5set?5begin?5to?5end?$AA@ ; `string'
PUBLIC	?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
PUBLIC	?set_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::set_at
PUBLIC	?resize@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHH_N@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::resize
PUBLIC	??_C@_0P@FNNMJEDO@resize?0get?5set?$AA@		; `string'
PUBLIC	??_C@_0BG@EGIIOBEI@push?5pop?5end?5to?5begin?$AA@ ; `string'
PUBLIC	??_C@_0BG@NGMJCOBM@push?5pop?5begin?5to?5end?$AA@ ; `string'
PUBLIC	?pop@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJXZ ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::pop
PUBLIC	??_C@_0N@OIDKLPEO@end?5to?5begin?$AA@		; `string'
PUBLIC	?decrement@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::decrement
PUBLIC	??_C@_0L@GPEFKELB@dec?4?4?4?4?4?4?4?$AA@	; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_0N@HIHLHABK@begin?5to?5end?$AA@		; `string'
PUBLIC	?increment@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::increment
PUBLIC	??_C@_05IHCDMNLM@null?6?$AA@			; `string'
PUBLIC	?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
PUBLIC	??_C@_0L@FMDBBCEB@inc?4?4?4?4?4?4?4?$AA@	; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0BA@NAEAIJEJ@array_test_main?$AA@		; `string'
PUBLIC	??_C@_09PALELKOJ@LOG_INFO?5?$AA@		; `string'
PUBLIC	?init@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::init
PUBLIC	?get_iterator@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@PAV32@@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_iterator
PUBLIC	??0?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@1@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
PUBLIC	?push@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJABH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::push
PUBLIC	?init@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::init
PUBLIC	??0?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAE@H@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >
PUBLIC	?array_test_main@@YAXXZ				; array_test_main
EXTRN	??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ:PROC ; pecker_sdk::pecker_write_stream_to_memery::~pecker_write_stream_to_memery
EXTRN	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z:PROC ; pecker_sdk::pecker_write_stream_to_memery::write_chars
EXTRN	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z:PROC ; pecker_sdk::pecker_write_stream_to_memery::write_char
EXTRN	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z:PROC ; pecker_sdk::pecker_write_stream_to_memery::write_integer
EXTRN	__imp__printf:PROC
EXTRN	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z:PROC ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer
EXTRN	??0pecker_write_stream_to_memery@pecker_sdk@@QAE@XZ:PROC ; pecker_sdk::pecker_write_stream_to_memery::pecker_write_stream_to_memery
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
_gstr_log_info DB 01000H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0O@MBCOGNKJ@array?5?5sorted?$AA@
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\array_test.cpp
CONST	SEGMENT
??_C@_0O@MBCOGNKJ@array?5?5sorted?$AA@ DB 'array  sorted', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GBNGOMJI@array?5to?5be?5sort?$AA@
CONST	SEGMENT
??_C@_0BB@GBNGOMJI@array?5to?5be?5sort?$AA@ DB 'array to be sort', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@ILKKIGKB@resize?0true?0get?5set?5begin?5to?5end@
CONST	SEGMENT
??_C@_0CB@ILKKIGKB@resize?0true?0get?5set?5begin?5to?5end@ DB 'resize,tru'
	DB	'e,get set begin to end', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GMDFIGCC@resize?0true?0get?5set?$AA@
CONST	SEGMENT
??_C@_0BE@GMDFIGCC@resize?0true?0get?5set?$AA@ DB 'resize,true,get set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JOHNJOMH@resize?0get?5set?5begin?5to?5end?$AA@
CONST	SEGMENT
??_C@_0BM@JOHNJOMH@resize?0get?5set?5begin?5to?5end?$AA@ DB 'resize,get s'
	DB	'et begin to end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FNNMJEDO@resize?0get?5set?$AA@
CONST	SEGMENT
??_C@_0P@FNNMJEDO@resize?0get?5set?$AA@ DB 'resize,get set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EGIIOBEI@push?5pop?5end?5to?5begin?$AA@
CONST	SEGMENT
??_C@_0BG@EGIIOBEI@push?5pop?5end?5to?5begin?$AA@ DB 'push pop end to beg'
	DB	'in', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NGMJCOBM@push?5pop?5begin?5to?5end?$AA@
CONST	SEGMENT
??_C@_0BG@NGMJCOBM@push?5pop?5begin?5to?5end?$AA@ DB 'push pop begin to e'
	DB	'nd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OIDKLPEO@end?5to?5begin?$AA@
CONST	SEGMENT
??_C@_0N@OIDKLPEO@end?5to?5begin?$AA@ DB 'end to begin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GPEFKELB@dec?4?4?4?4?4?4?4?$AA@
CONST	SEGMENT
??_C@_0L@GPEFKELB@dec?4?4?4?4?4?4?4?$AA@ DB 'dec.......', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HIHLHABK@begin?5to?5end?$AA@
CONST	SEGMENT
??_C@_0N@HIHLHABK@begin?5to?5end?$AA@ DB 'begin to end', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHCDMNLM@null?6?$AA@
CONST	SEGMENT
??_C@_05IHCDMNLM@null?6?$AA@ DB 'null', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FMDBBCEB@inc?4?4?4?4?4?4?4?$AA@
CONST	SEGMENT
??_C@_0L@FMDBBCEB@inc?4?4?4?4?4?4?4?$AA@ DB 'inc.......', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NAEAIJEJ@array_test_main?$AA@
CONST	SEGMENT
??_C@_0BA@NAEAIJEJ@array_test_main?$AA@ DB 'array_test_main', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
CONST	SEGMENT
??_C@_09PALELKOJ@LOG_INFO?5?$AA@ DB 'LOG_INFO ', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?array_test_main@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?array_test_main@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?array_test_main@@YAXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?array_test_main@@YAXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?array_test_main@@YAXXZ$3
__ehfuncinfo$?array_test_main@@YAXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?array_test_main@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?array_test_main@@YAXXZ
_TEXT	SEGMENT
$T69992 = -544						; size = 4
_pvalue$68369 = -340					; size = 4
_i$68365 = -328						; size = 4
_pvalue$68317 = -316					; size = 4
_i$68313 = -304						; size = 4
_isetval$ = -292					; size = 4
_array_iterator2$ = -280				; size = 12
_pvalue$68302 = -260					; size = 4
_i$68298 = -248						; size = 4
_i$68294 = -236						; size = 4
_pvalue$68289 = -224					; size = 4
_i$68285 = -212						; size = 4
_i$68280 = -200						; size = 4
_pvalue$68275 = -188					; size = 4
_pvalue$68268 = -176					; size = 4
_i$68261 = -164						; size = 4
_i$68257 = -152						; size = 4
_pvalue$68253 = -140					; size = 4
_pvalue$68243 = -128					; size = 4
_array_iterator1$ = -116				; size = 12
_i$68188 = -96						; size = 4
_array$ = -84						; size = 20
_output_stream$ = -56					; size = 40
__$EHRec$ = -12						; size = 12
?array_test_main@@YAXXZ PROC				; array_test_main, COMDAT

; 13   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?array_test_main@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 536				; 00000218H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-548]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 14   : 	pecker_write_stream_to_memery output_stream;

	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	??0pecker_write_stream_to_memery@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_write_stream_to_memery::pecker_write_stream_to_memery
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 15   : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 16   : 	pecker_array<int> array;

	push	16					; 00000010H
	lea	ecx, DWORD PTR _array$[ebp]
	call	??0?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAE@H@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 17   : 	array.init();

	push	-1
	push	1
	lea	ecx, DWORD PTR _array$[ebp]
	call	?init@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::init

; 18   : 	for (int i=0;i<20;++i)

	mov	DWORD PTR _i$68188[ebp], 0
	jmp	SHORT $LN51@array_test
$LN50@array_test:
	mov	eax, DWORD PTR _i$68188[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68188[ebp], eax
$LN51@array_test:
	cmp	DWORD PTR _i$68188[ebp], 20		; 00000014H
	jge	SHORT $LN49@array_test

; 19   : 	{
; 20   : 		array.push(i);

	lea	eax, DWORD PTR _i$68188[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?push@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJABH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::push

; 21   : 	}

	jmp	SHORT $LN50@array_test
$LN49@array_test:

; 22   : 	pecker_array_iterator< pecker_array<int> > array_iterator1;

	push	0
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@1@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 23   : 	array.get_iterator(&array_iterator1);

	lea	eax, DWORD PTR _array_iterator1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_iterator@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@PAV32@@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_iterator

; 24   : 	array_iterator1.init(ITERATOR_INIT_BEGIN_INDEX);

	push	0
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::init

; 25   : 	//std::cout << "inc ....." << std::endl;
; 26   : 	PECKER_LOG_INFO("array_test_main","inc.......");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BA@NAEAIJEJ@array_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0L@FMDBBCEB@inc?4?4?4?4?4?4?4?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN48@array_test:

; 27   : 	while (1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN47@array_test

; 28   : 	{
; 29   : 		const int* pvalue = array.get_at(&array_iterator1);

	lea	eax, DWORD PTR _array_iterator1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
	mov	DWORD PTR _pvalue$68243[ebp], eax

; 30   : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68243[ebp], 0
	je	SHORT $LN46@array_test

; 31   : 		{
; 32   : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68243[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 33   : 			output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 34   : 			//PECKER_LOG_INFO("array_test_main","%d",*pvalue);
; 35   : 			//std::cout << *pvalue << ",";
; 36   : 		}
; 37   : 		else

	jmp	SHORT $LN45@array_test
$LN46@array_test:

; 38   : 		{
; 39   : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 40   : 			//PECKER_LOG_ERR("array_test_main","%d(null)",pvalue);
; 41   : 			//std::cout << "null" << std::endl;
; 42   : 			break;

	jmp	SHORT $LN47@array_test
$LN45@array_test:

; 43   : 		}
; 44   : 		array_iterator1.increment();

	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?increment@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::increment

; 45   : 	}

	jmp	SHORT $LN48@array_test
$LN47@array_test:

; 46   : 
; 47   : 	//output_stream.write_char('\0');
; 48   : 	PECKER_LOG_INFO("begin to end","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0N@HIHLHABK@begin?5to?5end?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 49   : 
; 50   : 
; 51   : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 52   : 	//std::cout << "dec ....." << std::endl;
; 53   : 	PECKER_LOG_INFO("array_test_main","dec.......");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BA@NAEAIJEJ@array_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0L@GPEFKELB@dec?4?4?4?4?4?4?4?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 54   : 	array_iterator1.init(ITERATOR_INIT_END_INDEX);

	push	1
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::init
$LN44@array_test:

; 55   : 	while (1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN43@array_test

; 56   : 	{
; 57   : 		const int* pvalue = array.get_at(&array_iterator1);

	lea	eax, DWORD PTR _array_iterator1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
	mov	DWORD PTR _pvalue$68253[ebp], eax

; 58   : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68253[ebp], 0
	je	SHORT $LN42@array_test

; 59   : 		{
; 60   : 			//std::cout << *pvalue << ",";
; 61   : 			//PECKER_LOG_INFO("array_test_main","%d",*pvalue);
; 62   : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68253[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 63   : 			output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 64   : 		}
; 65   : 		else

	jmp	SHORT $LN41@array_test
$LN42@array_test:

; 66   : 		{
; 67   : 			//std::cout << "null" << std::endl;
; 68   : 			//PECKER_LOG_ERR("array_test_main","%d(null)",pvalue);
; 69   : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 70   : 			break;

	jmp	SHORT $LN43@array_test
$LN41@array_test:

; 71   : 		}
; 72   : 		array_iterator1.decrement();

	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?decrement@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::decrement

; 73   : 	}

	jmp	SHORT $LN44@array_test
$LN43@array_test:

; 74   : 	//output_stream.write_char('\0');
; 75   : 	PECKER_LOG_INFO("end to begin","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0N@OIDKLPEO@end?5to?5begin?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 76   : 
; 77   : 	for (int i=0;i<5;++i)

	mov	DWORD PTR _i$68257[ebp], 0
	jmp	SHORT $LN40@array_test
$LN39@array_test:
	mov	eax, DWORD PTR _i$68257[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68257[ebp], eax
$LN40@array_test:
	cmp	DWORD PTR _i$68257[ebp], 5
	jge	SHORT $LN38@array_test

; 78   : 	{
; 79   : 		array.pop();

	lea	ecx, DWORD PTR _array$[ebp]
	call	?pop@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJXZ ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::pop

; 80   : 	}

	jmp	SHORT $LN39@array_test
$LN38@array_test:

; 81   : 
; 82   : 	for (int i=0;i<20;++i)

	mov	DWORD PTR _i$68261[ebp], 0
	jmp	SHORT $LN37@array_test
$LN36@array_test:
	mov	eax, DWORD PTR _i$68261[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68261[ebp], eax
$LN37@array_test:
	cmp	DWORD PTR _i$68261[ebp], 20		; 00000014H
	jge	SHORT $LN35@array_test

; 83   : 	{
; 84   : 		array.push(i);

	lea	eax, DWORD PTR _i$68261[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?push@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJABH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::push

; 85   : 	}

	jmp	SHORT $LN36@array_test
$LN35@array_test:

; 86   : 
; 87   : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 88   : 
; 89   : 	array_iterator1.init(ITERATOR_INIT_BEGIN_INDEX);

	push	0
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::init

; 90   : 	//std::cout << "inc ....." << std::endl;
; 91   : 	PECKER_LOG_INFO("array_test_main","inc.......");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BA@NAEAIJEJ@array_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0L@FMDBBCEB@inc?4?4?4?4?4?4?4?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN34@array_test:

; 92   : 	while (1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN33@array_test

; 93   : 	{
; 94   : 		const int* pvalue = array.get_at(&array_iterator1);

	lea	eax, DWORD PTR _array_iterator1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
	mov	DWORD PTR _pvalue$68268[ebp], eax

; 95   : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68268[ebp], 0
	je	SHORT $LN32@array_test

; 96   : 		{
; 97   : 			//std::cout << *pvalue << ",";
; 98   : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68268[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 99   : 			output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 100  : 			//PECKER_LOG_INFO("array_test_main","%d",*pvalue);
; 101  : 		}
; 102  : 		else

	jmp	SHORT $LN31@array_test
$LN32@array_test:

; 103  : 		{
; 104  : 			//std::cout << "null" << std::endl;
; 105  : 			//PECKER_LOG_ERR("array_test_main","%d(null)",pvalue);
; 106  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 107  : 			break;

	jmp	SHORT $LN33@array_test
$LN31@array_test:

; 108  : 		}
; 109  : 		array_iterator1.increment();

	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?increment@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::increment

; 110  : 	}

	jmp	SHORT $LN34@array_test
$LN33@array_test:

; 111  : 
; 112  : 	PECKER_LOG_INFO("push pop begin to end","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BG@NGMJCOBM@push?5pop?5begin?5to?5end?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 113  : 
; 114  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 115  : 	//std::cout << "dec ....." << std::endl;
; 116  : 	PECKER_LOG_INFO("array_test_main","dec.......");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BA@NAEAIJEJ@array_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0L@GPEFKELB@dec?4?4?4?4?4?4?4?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 117  : 	array_iterator1.init(ITERATOR_INIT_END_INDEX);

	push	1
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::init
$LN30@array_test:

; 118  : 	while (1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN29@array_test

; 119  : 	{
; 120  : 		const int* pvalue = array.get_at(&array_iterator1);

	lea	eax, DWORD PTR _array_iterator1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
	mov	DWORD PTR _pvalue$68275[ebp], eax

; 121  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68275[ebp], 0
	je	SHORT $LN28@array_test

; 122  : 		{
; 123  : 			//std::cout << *pvalue << ",";
; 124  : 			//PECKER_LOG_INFO("array_test_main","%d",*pvalue);
; 125  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68275[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 126  : 			output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 127  : 		}
; 128  : 		else

	jmp	SHORT $LN27@array_test
$LN28@array_test:

; 129  : 		{
; 130  : 			//std::cout << "null" << std::endl;
; 131  : 			//PECKER_LOG_ERR("array_test_main","%d(null)",pvalue);
; 132  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 133  : 			break;

	jmp	SHORT $LN29@array_test
$LN27@array_test:

; 134  : 		}
; 135  : 		array_iterator1.decrement();

	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?decrement@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::decrement

; 136  : 	}

	jmp	SHORT $LN30@array_test
$LN29@array_test:

; 137  : 	PECKER_LOG_INFO("push pop end to begin","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BG@EGIIOBEI@push?5pop?5end?5to?5begin?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 138  : 
; 139  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 140  : 	//std::cout << "resize,get set" << std::endl;
; 141  : 	PECKER_LOG_INFO("array_test_main","resize,get set");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BA@NAEAIJEJ@array_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0P@FNNMJEDO@resize?0get?5set?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 142  : 	array.resize(100,20);

	push	0
	push	20					; 00000014H
	push	100					; 00000064H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHH_N@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::resize

; 143  : 	for (int i=0;i<100;++i)

	mov	DWORD PTR _i$68280[ebp], 0
	jmp	SHORT $LN26@array_test
$LN25@array_test:
	mov	eax, DWORD PTR _i$68280[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68280[ebp], eax
$LN26@array_test:
	cmp	DWORD PTR _i$68280[ebp], 100		; 00000064H
	jge	SHORT $LN24@array_test

; 144  : 	{
; 145  : 		array.set_at(i,100-i);

	mov	eax, 100				; 00000064H
	sub	eax, DWORD PTR _i$68280[ebp]
	mov	DWORD PTR $T69992[ebp], eax
	lea	ecx, DWORD PTR $T69992[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$68280[ebp]
	push	edx
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::set_at

; 146  : 	}

	jmp	SHORT $LN25@array_test
$LN24@array_test:

; 147  : 	for (int i=0;i<100;++i)

	mov	DWORD PTR _i$68285[ebp], 0
	jmp	SHORT $LN23@array_test
$LN22@array_test:
	mov	eax, DWORD PTR _i$68285[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68285[ebp], eax
$LN23@array_test:
	cmp	DWORD PTR _i$68285[ebp], 100		; 00000064H
	jge	SHORT $LN21@array_test

; 148  : 	{
; 149  : 		const int* pvalue = array.get_at(i);

	mov	eax, DWORD PTR _i$68285[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
	mov	DWORD PTR _pvalue$68289[ebp], eax

; 150  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68289[ebp], 0
	je	SHORT $LN20@array_test

; 151  : 		{
; 152  : 			//std::cout << *pvalue << ",";
; 153  : 			//PECKER_LOG_INFO("array_test_main","%d",*pvalue);
; 154  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68289[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 155  : 		}
; 156  : 		else

	jmp	SHORT $LN19@array_test
$LN20@array_test:

; 157  : 		{
; 158  : 			//std::cout << "null" << std::endl;
; 159  : 			//PECKER_LOG_ERR("array_test_main","%d(null)",pvalue);
; 160  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 161  : 			break;

	jmp	SHORT $LN21@array_test
$LN19@array_test:

; 162  : 		}
; 163  : 		output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 164  : 	}

	jmp	SHORT $LN22@array_test
$LN21@array_test:

; 165  : 	//std::cout << std::endl;
; 166  : 	PECKER_LOG_INFO("resize,get set begin to end","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BM@JOHNJOMH@resize?0get?5set?5begin?5to?5end?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 167  : 
; 168  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 169  : 
; 170  : 	//std::cout << "resize,true,get set" << std::endl;
; 171  : 	PECKER_LOG_INFO("array_test_main","resize,true,get set");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BA@NAEAIJEJ@array_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BE@GMDFIGCC@resize?0true?0get?5set?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 172  : 	array.resize(50,20,true);

	push	1
	push	20					; 00000014H
	push	50					; 00000032H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHH_N@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::resize

; 173  : 	for (int i=0;i<50;++i)

	mov	DWORD PTR _i$68294[ebp], 0
	jmp	SHORT $LN18@array_test
$LN17@array_test:
	mov	eax, DWORD PTR _i$68294[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68294[ebp], eax
$LN18@array_test:
	cmp	DWORD PTR _i$68294[ebp], 50		; 00000032H
	jge	SHORT $LN16@array_test

; 174  : 	{
; 175  : 		array.set_at(i,i);

	lea	eax, DWORD PTR _i$68294[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$68294[ebp]
	push	ecx
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::set_at

; 176  : 	}

	jmp	SHORT $LN17@array_test
$LN16@array_test:

; 177  : 	for (int i=0;i<50;++i)

	mov	DWORD PTR _i$68298[ebp], 0
	jmp	SHORT $LN15@array_test
$LN14@array_test:
	mov	eax, DWORD PTR _i$68298[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68298[ebp], eax
$LN15@array_test:
	cmp	DWORD PTR _i$68298[ebp], 50		; 00000032H
	jge	SHORT $LN13@array_test

; 178  : 	{
; 179  : 		const int* pvalue = array.get_at(i);

	mov	eax, DWORD PTR _i$68298[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
	mov	DWORD PTR _pvalue$68302[ebp], eax

; 180  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68302[ebp], 0
	je	SHORT $LN12@array_test

; 181  : 		{
; 182  : 			//std::cout << *pvalue << ",";
; 183  : 			//PECKER_LOG_INFO("array_test_main","%d",*pvalue);
; 184  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68302[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 185  : 		}
; 186  : 		else

	jmp	SHORT $LN11@array_test
$LN12@array_test:

; 187  : 		{
; 188  : 			//std::cout << "null" << std::endl;
; 189  : 			//PECKER_LOG_ERR("array_test_main","%d(null)",pvalue);
; 190  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 191  : 			break;

	jmp	SHORT $LN13@array_test
$LN11@array_test:

; 192  : 		}
; 193  : 		output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 194  : 	}

	jmp	SHORT $LN14@array_test
$LN13@array_test:

; 195  : 	//std::cout << std::endl;
; 196  : 	PECKER_LOG_INFO("resize,true,get set begin to end","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0CB@ILKKIGKB@resize?0true?0get?5set?5begin?5to?5end@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 197  : 
; 198  : 	
; 199  : 
; 200  : 	array_iterator1.init(ITERATOR_INIT_BEGIN_INDEX);

	push	0
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::init

; 201  : 
; 202  : 	pecker_array_iterator< pecker_array<int> > array_iterator2;

	push	0
	lea	ecx, DWORD PTR _array_iterator2$[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@1@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 203  : 	array.get_iterator(&array_iterator2);

	lea	eax, DWORD PTR _array_iterator2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_iterator@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@PAV32@@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_iterator

; 204  : 	array_iterator2.init(ITERATOR_INIT_END_INDEX);

	push	1
	lea	ecx, DWORD PTR _array_iterator2$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::init

; 205  : 
; 206  : 	int isetval = 100;

	mov	DWORD PTR _isetval$[ebp], 100		; 00000064H

; 207  : 	array.set_at(1,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::set_at

; 208  : 	array.set_at(6,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	6
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::set_at

; 209  : 	array.set_at(11,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	11					; 0000000bH
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::set_at

; 210  : 	array.set_at(16,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	16					; 00000010H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::set_at

; 211  : 	array.set_at(21,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	21					; 00000015H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::set_at

; 212  : 	array.set_at(26,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	26					; 0000001aH
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::set_at

; 213  : 	array.set_at(31,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	31					; 0000001fH
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::set_at

; 214  : 	array.set_at(36,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	36					; 00000024H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::set_at

; 215  : 	array.set_at(41,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	41					; 00000029H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::set_at

; 216  : 	array.set_at(46,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	46					; 0000002eH
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::set_at

; 217  : 
; 218  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 219  : 	for (int i=0;i<50;++i)

	mov	DWORD PTR _i$68313[ebp], 0
	jmp	SHORT $LN10@array_test
$LN9@array_test:
	mov	eax, DWORD PTR _i$68313[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68313[ebp], eax
$LN10@array_test:
	cmp	DWORD PTR _i$68313[ebp], 50		; 00000032H
	jge	SHORT $LN8@array_test

; 220  : 	{
; 221  : 		const int* pvalue = array.get_at(i);

	mov	eax, DWORD PTR _i$68313[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
	mov	DWORD PTR _pvalue$68317[ebp], eax

; 222  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68317[ebp], 0
	je	SHORT $LN7@array_test

; 223  : 		{
; 224  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68317[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 225  : 		}
; 226  : 		else

	jmp	SHORT $LN6@array_test
$LN7@array_test:

; 227  : 		{
; 228  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 229  : 			break;

	jmp	SHORT $LN8@array_test
$LN6@array_test:

; 230  : 		}
; 231  : 		output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 232  : 	}

	jmp	SHORT $LN9@array_test
$LN8@array_test:

; 233  : 	PECKER_LOG_INFO("array to be sort","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BB@GBNGOMJI@array?5to?5be?5sort?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 234  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 235  : 	
; 236  : 	quick_sort_increment< int,pecker_value_compare<int>,pecker_array<int>,pecker_array_iterator< pecker_array<int> > >
; 237  : 		(array,array_iterator1,array_iterator2);

	lea	eax, DWORD PTR _array_iterator2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _array$[ebp]
	push	edx
	call	??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > > >
	add	esp, 12					; 0000000cH

; 238  : 
; 239  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 240  : 	for (int i=0;i<50;++i)

	mov	DWORD PTR _i$68365[ebp], 0
	jmp	SHORT $LN5@array_test
$LN4@array_test:
	mov	eax, DWORD PTR _i$68365[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68365[ebp], eax
$LN5@array_test:
	cmp	DWORD PTR _i$68365[ebp], 50		; 00000032H
	jge	SHORT $LN3@array_test

; 241  : 	{
; 242  : 		const int* pvalue = array.get_at(i);

	mov	eax, DWORD PTR _i$68365[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
	mov	DWORD PTR _pvalue$68369[ebp], eax

; 243  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68369[ebp], 0
	je	SHORT $LN2@array_test

; 244  : 		{
; 245  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68369[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 246  : 		}
; 247  : 		else

	jmp	SHORT $LN1@array_test
$LN2@array_test:

; 248  : 		{
; 249  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 250  : 			break;

	jmp	SHORT $LN3@array_test
$LN1@array_test:

; 251  : 		}
; 252  : 		output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 253  : 	}

	jmp	SHORT $LN4@array_test
$LN3@array_test:

; 254  : 	PECKER_LOG_INFO("array  sorted","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0O@MBCOGNKJ@array?5?5sorted?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 255  : 	
; 256  : 
; 257  : 	array.clear(true);

	push	1
	lea	ecx, DWORD PTR _array$[ebp]
	call	?clear@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJ_N@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::clear

; 258  : 
; 259  : 	//int ibreak;
; 260  : 	//std::cin >> ibreak;
; 261  : 
; 262  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _array_iterator2$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _array$[ebp]
	call	??1?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::~pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_write_stream_to_memery::~pecker_write_stream_to_memery
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN68@array_test
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 548				; 00000224H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN68@array_test:
	DD	8
	DD	$LN67@array_test
$LN67@array_test:
	DD	-56					; ffffffc8H
	DD	40					; 00000028H
	DD	$LN58@array_test
	DD	-84					; ffffffacH
	DD	20					; 00000014H
	DD	$LN59@array_test
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN60@array_test
	DD	-116					; ffffff8cH
	DD	12					; 0000000cH
	DD	$LN61@array_test
	DD	-164					; ffffff5cH
	DD	4
	DD	$LN62@array_test
	DD	-236					; ffffff14H
	DD	4
	DD	$LN63@array_test
	DD	-280					; fffffee8H
	DD	12					; 0000000cH
	DD	$LN64@array_test
	DD	-292					; fffffedcH
	DD	4
	DD	$LN65@array_test
$LN65@array_test:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN64@array_test:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	50					; 00000032H
	DB	0
$LN63@array_test:
	DB	105					; 00000069H
	DB	0
$LN62@array_test:
	DB	105					; 00000069H
	DB	0
$LN61@array_test:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	49					; 00000031H
	DB	0
$LN60@array_test:
	DB	105					; 00000069H
	DB	0
$LN59@array_test:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
$LN58@array_test:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?array_test_main@@YAXXZ$0:
	lea	ecx, DWORD PTR _output_stream$[ebp]
	jmp	??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_write_stream_to_memery::~pecker_write_stream_to_memery
__unwindfunclet$?array_test_main@@YAXXZ$1:
	lea	ecx, DWORD PTR _array$[ebp]
	jmp	??1?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::~pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >
__unwindfunclet$?array_test_main@@YAXXZ$2:
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
__unwindfunclet$?array_test_main@@YAXXZ$3:
	lea	ecx, DWORD PTR _array_iterator2$[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
__ehhandler$?array_test_main@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-552]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?array_test_main@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?array_test_main@@YAXXZ ENDP				; array_test_main
PUBLIC	??1?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::~pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >
PUBLIC	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
PUBLIC	?clear@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJ_N@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::clear
PUBLIC	??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > > >
PUBLIC	?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
PUBLIC	?set_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::set_at
PUBLIC	?resize@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHHH_N@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::resize
PUBLIC	?pop@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJXZ ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::pop
PUBLIC	?decrement@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::decrement
PUBLIC	?increment@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::increment
PUBLIC	?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
PUBLIC	??_C@_0BF@EDOIIKPO@array_pool_test_main?$AA@	; `string'
PUBLIC	?init@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::init
PUBLIC	?get_iterator@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@PAV32@@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_iterator
PUBLIC	??0?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@1@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
PUBLIC	?push@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJABH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::push
PUBLIC	?init@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHHH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::init
PUBLIC	??0?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAE@HH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >
PUBLIC	?array_pool_test_main@@YAXXZ			; array_pool_test_main
;	COMDAT ??_C@_0BF@EDOIIKPO@array_pool_test_main?$AA@
CONST	SEGMENT
??_C@_0BF@EDOIIKPO@array_pool_test_main?$AA@ DB 'array_pool_test_main', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?array_pool_test_main@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?array_pool_test_main@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?array_pool_test_main@@YAXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?array_pool_test_main@@YAXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?array_pool_test_main@@YAXXZ$3
__ehfuncinfo$?array_pool_test_main@@YAXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?array_pool_test_main@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?array_pool_test_main@@YAXXZ
_TEXT	SEGMENT
$T70030 = -552						; size = 4
_pvalue$68654 = -348					; size = 4
_i$68650 = -336						; size = 4
_pvalue$68595 = -324					; size = 4
_i$68591 = -312						; size = 4
_isetval$ = -300					; size = 4
_array_iterator2$ = -288				; size = 12
_pvalue$68577 = -268					; size = 4
_i$68573 = -256						; size = 4
_i$68569 = -244						; size = 4
_pvalue$68566 = -232					; size = 4
_i$68562 = -220						; size = 4
_i$68557 = -208						; size = 4
_pvalue$68554 = -196					; size = 4
_pvalue$68548 = -184					; size = 4
_i$68541 = -172						; size = 4
_i$68537 = -160						; size = 4
_pvalue$68534 = -148					; size = 4
_pvalue$68528 = -136					; size = 4
_array_iterator1$ = -124				; size = 12
_i$68472 = -104						; size = 4
_array$ = -92						; size = 28
_output_stream$ = -56					; size = 40
__$EHRec$ = -12						; size = 12
?array_pool_test_main@@YAXXZ PROC			; array_pool_test_main, COMDAT

; 265  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?array_pool_test_main@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 544				; 00000220H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 136				; 00000088H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 266  : 	pecker_write_stream_to_memery output_stream;

	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	??0pecker_write_stream_to_memery@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_write_stream_to_memery::pecker_write_stream_to_memery
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 267  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 268  : 
; 269  : 	pecker_pool_array<int> array;

	push	16					; 00000010H
	push	16					; 00000010H
	lea	ecx, DWORD PTR _array$[ebp]
	call	??0?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAE@HH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 270  : 	array.init();

	push	-1
	push	-1
	push	1
	lea	ecx, DWORD PTR _array$[ebp]
	call	?init@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHHH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::init

; 271  : 	for (int i=0;i<20;++i)

	mov	DWORD PTR _i$68472[ebp], 0
	jmp	SHORT $LN51@array_pool
$LN50@array_pool:
	mov	eax, DWORD PTR _i$68472[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68472[ebp], eax
$LN51@array_pool:
	cmp	DWORD PTR _i$68472[ebp], 20		; 00000014H
	jge	SHORT $LN49@array_pool

; 272  : 	{
; 273  : 		array.push(i);

	lea	eax, DWORD PTR _i$68472[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?push@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJABH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::push

; 274  : 	}

	jmp	SHORT $LN50@array_pool
$LN49@array_pool:

; 275  : 	pecker_array_iterator< pecker_pool_array<int> > array_iterator1;

	push	0
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@1@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 276  : 
; 277  : 	array.get_iterator(&array_iterator1);

	lea	eax, DWORD PTR _array_iterator1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_iterator@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@PAV32@@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_iterator

; 278  : 	array_iterator1.init(ITERATOR_INIT_BEGIN_INDEX);

	push	0
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::init

; 279  : 	//std::cout << "inc ....." << std::endl;
; 280  : 	PECKER_LOG_INFO("array_pool_test_main","inc.......");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BF@EDOIIKPO@array_pool_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0L@FMDBBCEB@inc?4?4?4?4?4?4?4?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN48@array_pool:

; 281  : 	while (1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN47@array_pool

; 282  : 	{
; 283  : 		const int* pvalue = array.get_at(&array_iterator1);

	lea	eax, DWORD PTR _array_iterator1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
	mov	DWORD PTR _pvalue$68528[ebp], eax

; 284  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68528[ebp], 0
	je	SHORT $LN46@array_pool

; 285  : 		{
; 286  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68528[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 287  : 			output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 288  : 			//PECKER_LOG_INFO("array_test_main","%d",*pvalue);
; 289  : 			//std::cout << *pvalue << ",";
; 290  : 		}
; 291  : 		else

	jmp	SHORT $LN45@array_pool
$LN46@array_pool:

; 292  : 		{
; 293  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 294  : 			//PECKER_LOG_ERR("array_test_main","%d(null)",pvalue);
; 295  : 			//std::cout << "null" << std::endl;
; 296  : 			break;

	jmp	SHORT $LN47@array_pool
$LN45@array_pool:

; 297  : 		}
; 298  : 		array_iterator1.increment();

	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?increment@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::increment

; 299  : 	}

	jmp	SHORT $LN48@array_pool
$LN47@array_pool:

; 300  : 
; 301  : 	//output_stream.write_char('\0');
; 302  : 	PECKER_LOG_INFO("begin to end","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0N@HIHLHABK@begin?5to?5end?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 303  : 
; 304  : 
; 305  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 306  : 	//std::cout << "dec ....." << std::endl;
; 307  : 	PECKER_LOG_INFO("array_test_main","dec.......");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BA@NAEAIJEJ@array_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0L@GPEFKELB@dec?4?4?4?4?4?4?4?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 308  : 	array_iterator1.init(ITERATOR_INIT_END_INDEX);

	push	1
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::init
$LN44@array_pool:

; 309  : 	while (1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN43@array_pool

; 310  : 	{
; 311  : 		const int* pvalue = array.get_at(&array_iterator1);

	lea	eax, DWORD PTR _array_iterator1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
	mov	DWORD PTR _pvalue$68534[ebp], eax

; 312  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68534[ebp], 0
	je	SHORT $LN42@array_pool

; 313  : 		{
; 314  : 			//std::cout << *pvalue << ",";
; 315  : 			//PECKER_LOG_INFO("array_test_main","%d",*pvalue);
; 316  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68534[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 317  : 			output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 318  : 		}
; 319  : 		else

	jmp	SHORT $LN41@array_pool
$LN42@array_pool:

; 320  : 		{
; 321  : 			//std::cout << "null" << std::endl;
; 322  : 			//PECKER_LOG_ERR("array_test_main","%d(null)",pvalue);
; 323  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 324  : 			break;

	jmp	SHORT $LN43@array_pool
$LN41@array_pool:

; 325  : 		}
; 326  : 		array_iterator1.decrement();

	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?decrement@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::decrement

; 327  : 	}

	jmp	SHORT $LN44@array_pool
$LN43@array_pool:

; 328  : 	//output_stream.write_char('\0');
; 329  : 	PECKER_LOG_INFO("end to begin","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0N@OIDKLPEO@end?5to?5begin?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 330  : 
; 331  : 	for (int i=0;i<5;++i)

	mov	DWORD PTR _i$68537[ebp], 0
	jmp	SHORT $LN40@array_pool
$LN39@array_pool:
	mov	eax, DWORD PTR _i$68537[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68537[ebp], eax
$LN40@array_pool:
	cmp	DWORD PTR _i$68537[ebp], 5
	jge	SHORT $LN38@array_pool

; 332  : 	{
; 333  : 		array.pop();

	lea	ecx, DWORD PTR _array$[ebp]
	call	?pop@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJXZ ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::pop

; 334  : 	}

	jmp	SHORT $LN39@array_pool
$LN38@array_pool:

; 335  : 
; 336  : 	for (int i=0;i<20;++i)

	mov	DWORD PTR _i$68541[ebp], 0
	jmp	SHORT $LN37@array_pool
$LN36@array_pool:
	mov	eax, DWORD PTR _i$68541[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68541[ebp], eax
$LN37@array_pool:
	cmp	DWORD PTR _i$68541[ebp], 20		; 00000014H
	jge	SHORT $LN35@array_pool

; 337  : 	{
; 338  : 		array.push(i);

	lea	eax, DWORD PTR _i$68541[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?push@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJABH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::push

; 339  : 	}

	jmp	SHORT $LN36@array_pool
$LN35@array_pool:

; 340  : 
; 341  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 342  : 
; 343  : 	array_iterator1.init(ITERATOR_INIT_BEGIN_INDEX);

	push	0
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::init

; 344  : 	//std::cout << "inc ....." << std::endl;
; 345  : 	PECKER_LOG_INFO("array_pool_test_main","inc.......");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BF@EDOIIKPO@array_pool_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0L@FMDBBCEB@inc?4?4?4?4?4?4?4?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN34@array_pool:

; 346  : 	while (1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN33@array_pool

; 347  : 	{
; 348  : 		const int* pvalue = array.get_at(&array_iterator1);

	lea	eax, DWORD PTR _array_iterator1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
	mov	DWORD PTR _pvalue$68548[ebp], eax

; 349  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68548[ebp], 0
	je	SHORT $LN32@array_pool

; 350  : 		{
; 351  : 			//std::cout << *pvalue << ",";
; 352  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68548[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 353  : 			output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 354  : 			//PECKER_LOG_INFO("array_pool_test_main","%d",*pvalue);
; 355  : 		}
; 356  : 		else

	jmp	SHORT $LN31@array_pool
$LN32@array_pool:

; 357  : 		{
; 358  : 			//std::cout << "null" << std::endl;
; 359  : 			//PECKER_LOG_ERR("array_pool_test_main","%d(null)",pvalue);
; 360  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 361  : 			break;

	jmp	SHORT $LN33@array_pool
$LN31@array_pool:

; 362  : 		}
; 363  : 		array_iterator1.increment();

	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?increment@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::increment

; 364  : 	}

	jmp	SHORT $LN34@array_pool
$LN33@array_pool:

; 365  : 
; 366  : 	PECKER_LOG_INFO("push pop begin to end","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BG@NGMJCOBM@push?5pop?5begin?5to?5end?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 367  : 
; 368  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 369  : 	//std::cout << "dec ....." << std::endl;
; 370  : 	PECKER_LOG_INFO("array_pool_test_main","dec.......");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BF@EDOIIKPO@array_pool_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0L@GPEFKELB@dec?4?4?4?4?4?4?4?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 371  : 	array_iterator1.init(ITERATOR_INIT_END_INDEX);

	push	1
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::init
$LN30@array_pool:

; 372  : 	while (1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN29@array_pool

; 373  : 	{
; 374  : 		const int* pvalue = array.get_at(&array_iterator1);

	lea	eax, DWORD PTR _array_iterator1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
	mov	DWORD PTR _pvalue$68554[ebp], eax

; 375  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68554[ebp], 0
	je	SHORT $LN28@array_pool

; 376  : 		{
; 377  : 			//std::cout << *pvalue << ",";
; 378  : 			//PECKER_LOG_INFO("array_pool_test_main","%d",*pvalue);
; 379  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68554[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 380  : 			output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 381  : 		}
; 382  : 		else

	jmp	SHORT $LN27@array_pool
$LN28@array_pool:

; 383  : 		{
; 384  : 			//std::cout << "null" << std::endl;
; 385  : 			//PECKER_LOG_ERR("array_pool_test_main","%d(null)",pvalue);
; 386  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 387  : 			break;

	jmp	SHORT $LN29@array_pool
$LN27@array_pool:

; 388  : 		}
; 389  : 		array_iterator1.decrement();

	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?decrement@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::decrement

; 390  : 	}

	jmp	SHORT $LN30@array_pool
$LN29@array_pool:

; 391  : 	PECKER_LOG_INFO("push pop end to begin","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BG@EGIIOBEI@push?5pop?5end?5to?5begin?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 392  : 
; 393  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 394  : 	//std::cout << "resize,get set" << std::endl;
; 395  : 	PECKER_LOG_INFO("array_pool_test_main","resize,get set");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BF@EDOIIKPO@array_pool_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0P@FNNMJEDO@resize?0get?5set?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 396  : 	array.resize(100,20);

	push	0
	push	-1
	push	20					; 00000014H
	push	100					; 00000064H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHHH_N@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::resize

; 397  : 	for (int i=0;i<100;++i)

	mov	DWORD PTR _i$68557[ebp], 0
	jmp	SHORT $LN26@array_pool
$LN25@array_pool:
	mov	eax, DWORD PTR _i$68557[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68557[ebp], eax
$LN26@array_pool:
	cmp	DWORD PTR _i$68557[ebp], 100		; 00000064H
	jge	SHORT $LN24@array_pool

; 398  : 	{
; 399  : 		array.set_at(i,100-i);

	mov	eax, 100				; 00000064H
	sub	eax, DWORD PTR _i$68557[ebp]
	mov	DWORD PTR $T70030[ebp], eax
	lea	ecx, DWORD PTR $T70030[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$68557[ebp]
	push	edx
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::set_at

; 400  : 	}

	jmp	SHORT $LN25@array_pool
$LN24@array_pool:

; 401  : 	for (int i=0;i<100;++i)

	mov	DWORD PTR _i$68562[ebp], 0
	jmp	SHORT $LN23@array_pool
$LN22@array_pool:
	mov	eax, DWORD PTR _i$68562[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68562[ebp], eax
$LN23@array_pool:
	cmp	DWORD PTR _i$68562[ebp], 100		; 00000064H
	jge	SHORT $LN21@array_pool

; 402  : 	{
; 403  : 		const int* pvalue = array.get_at(i);

	mov	eax, DWORD PTR _i$68562[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
	mov	DWORD PTR _pvalue$68566[ebp], eax

; 404  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68566[ebp], 0
	je	SHORT $LN20@array_pool

; 405  : 		{
; 406  : 			//std::cout << *pvalue << ",";
; 407  : 			//PECKER_LOG_INFO("array_pool_test_main","%d",*pvalue);
; 408  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68566[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 409  : 		}
; 410  : 		else

	jmp	SHORT $LN19@array_pool
$LN20@array_pool:

; 411  : 		{
; 412  : 			//std::cout << "null" << std::endl;
; 413  : 			//PECKER_LOG_ERR("array_pool_test_main","%d(null)",pvalue);
; 414  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 415  : 			break;

	jmp	SHORT $LN21@array_pool
$LN19@array_pool:

; 416  : 		}
; 417  : 		output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 418  : 	}

	jmp	SHORT $LN22@array_pool
$LN21@array_pool:

; 419  : 	//std::cout << std::endl;
; 420  : 	PECKER_LOG_INFO("resize,get set begin to end","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BM@JOHNJOMH@resize?0get?5set?5begin?5to?5end?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 421  : 
; 422  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 423  : 
; 424  : 	//std::cout << "resize,true,get set" << std::endl;
; 425  : 	PECKER_LOG_INFO("array_pool_test_main","resize,true,get set");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BF@EDOIIKPO@array_pool_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BE@GMDFIGCC@resize?0true?0get?5set?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 426  : 	array.resize(50,20,true);

	push	0
	push	1
	push	20					; 00000014H
	push	50					; 00000032H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHHH_N@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::resize

; 427  : 	for (int i=0;i<50;++i)

	mov	DWORD PTR _i$68569[ebp], 0
	jmp	SHORT $LN18@array_pool
$LN17@array_pool:
	mov	eax, DWORD PTR _i$68569[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68569[ebp], eax
$LN18@array_pool:
	cmp	DWORD PTR _i$68569[ebp], 50		; 00000032H
	jge	SHORT $LN16@array_pool

; 428  : 	{
; 429  : 		array.set_at(i,i);

	lea	eax, DWORD PTR _i$68569[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$68569[ebp]
	push	ecx
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::set_at

; 430  : 	}

	jmp	SHORT $LN17@array_pool
$LN16@array_pool:

; 431  : 	for (int i=0;i<50;++i)

	mov	DWORD PTR _i$68573[ebp], 0
	jmp	SHORT $LN15@array_pool
$LN14@array_pool:
	mov	eax, DWORD PTR _i$68573[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68573[ebp], eax
$LN15@array_pool:
	cmp	DWORD PTR _i$68573[ebp], 50		; 00000032H
	jge	SHORT $LN13@array_pool

; 432  : 	{
; 433  : 		const int* pvalue = array.get_at(i);

	mov	eax, DWORD PTR _i$68573[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
	mov	DWORD PTR _pvalue$68577[ebp], eax

; 434  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68577[ebp], 0
	je	SHORT $LN12@array_pool

; 435  : 		{
; 436  : 			//std::cout << *pvalue << ",";
; 437  : 			//PECKER_LOG_INFO("array_pool_test_main","%d",*pvalue);
; 438  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68577[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 439  : 		}
; 440  : 		else

	jmp	SHORT $LN11@array_pool
$LN12@array_pool:

; 441  : 		{
; 442  : 			//std::cout << "null" << std::endl;
; 443  : 			//PECKER_LOG_ERR("array_pool_test_main","%d(null)",pvalue);
; 444  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 445  : 			break;

	jmp	SHORT $LN13@array_pool
$LN11@array_pool:

; 446  : 		}
; 447  : 		output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 448  : 	}

	jmp	SHORT $LN14@array_pool
$LN13@array_pool:

; 449  : 	//std::cout << std::endl;
; 450  : 	PECKER_LOG_INFO("resize,true,get set begin to end","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0CB@ILKKIGKB@resize?0true?0get?5set?5begin?5to?5end@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 451  : 
; 452  : 
; 453  : 
; 454  : 	array_iterator1.init(ITERATOR_INIT_BEGIN_INDEX);

	push	0
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::init

; 455  : 
; 456  : 	pecker_array_iterator< pecker_pool_array<int> > array_iterator2;

	push	0
	lea	ecx, DWORD PTR _array_iterator2$[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@1@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 457  : 	array.get_iterator(&array_iterator2);

	lea	eax, DWORD PTR _array_iterator2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_iterator@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@PAV32@@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_iterator

; 458  : 	array_iterator2.init(ITERATOR_INIT_END_INDEX);

	push	1
	lea	ecx, DWORD PTR _array_iterator2$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::init

; 459  : 
; 460  : 	int isetval = 100;

	mov	DWORD PTR _isetval$[ebp], 100		; 00000064H

; 461  : 	array.set_at(1,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::set_at

; 462  : 	array.set_at(6,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	6
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::set_at

; 463  : 	array.set_at(11,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	11					; 0000000bH
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::set_at

; 464  : 	array.set_at(16,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	16					; 00000010H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::set_at

; 465  : 	array.set_at(21,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	21					; 00000015H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::set_at

; 466  : 	array.set_at(26,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	26					; 0000001aH
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::set_at

; 467  : 	array.set_at(31,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	31					; 0000001fH
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::set_at

; 468  : 	array.set_at(36,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	36					; 00000024H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::set_at

; 469  : 	array.set_at(41,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	41					; 00000029H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::set_at

; 470  : 	array.set_at(46,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	46					; 0000002eH
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::set_at

; 471  : 
; 472  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 473  : 	for (int i=0;i<50;++i)

	mov	DWORD PTR _i$68591[ebp], 0
	jmp	SHORT $LN10@array_pool
$LN9@array_pool:
	mov	eax, DWORD PTR _i$68591[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68591[ebp], eax
$LN10@array_pool:
	cmp	DWORD PTR _i$68591[ebp], 50		; 00000032H
	jge	SHORT $LN8@array_pool

; 474  : 	{
; 475  : 		const int* pvalue = array.get_at(i);

	mov	eax, DWORD PTR _i$68591[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
	mov	DWORD PTR _pvalue$68595[ebp], eax

; 476  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68595[ebp], 0
	je	SHORT $LN7@array_pool

; 477  : 		{
; 478  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68595[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 479  : 		}
; 480  : 		else

	jmp	SHORT $LN6@array_pool
$LN7@array_pool:

; 481  : 		{
; 482  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 483  : 			break;

	jmp	SHORT $LN8@array_pool
$LN6@array_pool:

; 484  : 		}
; 485  : 		output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 486  : 	}

	jmp	SHORT $LN9@array_pool
$LN8@array_pool:

; 487  : 	PECKER_LOG_INFO("array to be sort","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BB@GBNGOMJI@array?5to?5be?5sort?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 488  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 489  : 
; 490  : 	quick_sort_increment< int,pecker_value_compare<int>,pecker_pool_array<int>,pecker_array_iterator< pecker_pool_array<int> > >
; 491  : 		(array,array_iterator1,array_iterator2);

	lea	eax, DWORD PTR _array_iterator2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _array$[ebp]
	push	edx
	call	??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > > >
	add	esp, 12					; 0000000cH

; 492  : 
; 493  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 494  : 	for (int i=0;i<50;++i)

	mov	DWORD PTR _i$68650[ebp], 0
	jmp	SHORT $LN5@array_pool
$LN4@array_pool:
	mov	eax, DWORD PTR _i$68650[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68650[ebp], eax
$LN5@array_pool:
	cmp	DWORD PTR _i$68650[ebp], 50		; 00000032H
	jge	SHORT $LN3@array_pool

; 495  : 	{
; 496  : 		const int* pvalue = array.get_at(i);

	mov	eax, DWORD PTR _i$68650[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
	mov	DWORD PTR _pvalue$68654[ebp], eax

; 497  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68654[ebp], 0
	je	SHORT $LN2@array_pool

; 498  : 		{
; 499  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68654[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 500  : 		}
; 501  : 		else

	jmp	SHORT $LN1@array_pool
$LN2@array_pool:

; 502  : 		{
; 503  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 504  : 			break;

	jmp	SHORT $LN3@array_pool
$LN1@array_pool:

; 505  : 		}
; 506  : 		output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 507  : 	}

	jmp	SHORT $LN4@array_pool
$LN3@array_pool:

; 508  : 	PECKER_LOG_INFO("array  sorted","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0O@MBCOGNKJ@array?5?5sorted?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 509  : 
; 510  : 
; 511  : 	array.clear(true);

	push	1
	lea	ecx, DWORD PTR _array$[ebp]
	call	?clear@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJ_N@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::clear

; 512  : 
; 513  : 	//int ibreak;
; 514  : 	//std::cin >> ibreak;
; 515  : 
; 516  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _array_iterator2$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _array$[ebp]
	call	??1?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::~pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_write_stream_to_memery::~pecker_write_stream_to_memery
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN68@array_pool
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 556				; 0000022cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN68@array_pool:
	DD	8
	DD	$LN67@array_pool
$LN67@array_pool:
	DD	-56					; ffffffc8H
	DD	40					; 00000028H
	DD	$LN58@array_pool
	DD	-92					; ffffffa4H
	DD	28					; 0000001cH
	DD	$LN59@array_pool
	DD	-104					; ffffff98H
	DD	4
	DD	$LN60@array_pool
	DD	-124					; ffffff84H
	DD	12					; 0000000cH
	DD	$LN61@array_pool
	DD	-172					; ffffff54H
	DD	4
	DD	$LN62@array_pool
	DD	-244					; ffffff0cH
	DD	4
	DD	$LN63@array_pool
	DD	-288					; fffffee0H
	DD	12					; 0000000cH
	DD	$LN64@array_pool
	DD	-300					; fffffed4H
	DD	4
	DD	$LN65@array_pool
$LN65@array_pool:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN64@array_pool:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	50					; 00000032H
	DB	0
$LN63@array_pool:
	DB	105					; 00000069H
	DB	0
$LN62@array_pool:
	DB	105					; 00000069H
	DB	0
$LN61@array_pool:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	49					; 00000031H
	DB	0
$LN60@array_pool:
	DB	105					; 00000069H
	DB	0
$LN59@array_pool:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
$LN58@array_pool:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?array_pool_test_main@@YAXXZ$0:
	lea	ecx, DWORD PTR _output_stream$[ebp]
	jmp	??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_write_stream_to_memery::~pecker_write_stream_to_memery
__unwindfunclet$?array_pool_test_main@@YAXXZ$1:
	lea	ecx, DWORD PTR _array$[ebp]
	jmp	??1?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::~pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >
__unwindfunclet$?array_pool_test_main@@YAXXZ$2:
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
__unwindfunclet$?array_pool_test_main@@YAXXZ$3:
	lea	ecx, DWORD PTR _array_iterator2$[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
__ehhandler$?array_pool_test_main@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-560]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?array_pool_test_main@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?array_pool_test_main@@YAXXZ ENDP			; array_pool_test_main
PUBLIC	??1?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::~pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>
PUBLIC	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
PUBLIC	?clear@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJ_N@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::clear
PUBLIC	??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> > >
PUBLIC	?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
PUBLIC	?set_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::set_at
PUBLIC	?resize@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHHH_N@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::resize
PUBLIC	?pop@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJXZ ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::pop
PUBLIC	?decrement@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::decrement
PUBLIC	?increment@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::increment
PUBLIC	?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
PUBLIC	??_C@_0BL@HJAAJDEN@array_stack_pool_test_main?$AA@ ; `string'
PUBLIC	?init@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::init
PUBLIC	?get_iterator@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@PAV32@@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_iterator
PUBLIC	??0?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@1@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
PUBLIC	?push@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJABH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::push
PUBLIC	?init@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHHH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::init
PUBLIC	??0?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>
PUBLIC	__$ArrayPad$
PUBLIC	?array_stack_pool_test_main@@YAXXZ		; array_stack_pool_test_main
;	COMDAT ??_C@_0BL@HJAAJDEN@array_stack_pool_test_main?$AA@
CONST	SEGMENT
??_C@_0BL@HJAAJDEN@array_stack_pool_test_main?$AA@ DB 'array_stack_pool_t'
	DB	'est_main', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?array_stack_pool_test_main@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?array_stack_pool_test_main@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?array_stack_pool_test_main@@YAXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?array_stack_pool_test_main@@YAXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?array_stack_pool_test_main@@YAXXZ$3
__ehfuncinfo$?array_stack_pool_test_main@@YAXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?array_stack_pool_test_main@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?array_stack_pool_test_main@@YAXXZ
_TEXT	SEGMENT
$T70054 = -1048						; size = 4
_pvalue$68932 = -844					; size = 4
_i$68928 = -832						; size = 4
_pvalue$68894 = -820					; size = 4
_i$68890 = -808						; size = 4
_isetval$ = -796					; size = 4
_array_iterator2$ = -784				; size = 12
_pvalue$68876 = -764					; size = 4
_i$68872 = -752						; size = 4
_i$68868 = -740						; size = 4
_pvalue$68865 = -728					; size = 4
_i$68861 = -716						; size = 4
_i$68856 = -704						; size = 4
_pvalue$68853 = -692					; size = 4
_pvalue$68847 = -680					; size = 4
_i$68840 = -668						; size = 4
_i$68836 = -656						; size = 4
_pvalue$68833 = -644					; size = 4
_pvalue$68827 = -632					; size = 4
_array_iterator1$ = -620				; size = 12
_i$68771 = -600						; size = 4
_array$ = -588						; size = 520
_output_stream$ = -60					; size = 40
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?array_stack_pool_test_main@@YAXXZ PROC			; array_stack_pool_test_main, COMDAT

; 519  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?array_stack_pool_test_main@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1040				; 00000410H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1052]
	mov	ecx, 260				; 00000104H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 520  : 	pecker_write_stream_to_memery output_stream;

	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	??0pecker_write_stream_to_memery@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_write_stream_to_memery::pecker_write_stream_to_memery
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 521  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 522  : 
; 523  : 	pecker_stack_pool_array<int> array;

	lea	ecx, DWORD PTR _array$[ebp]
	call	??0?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 524  : 	array.init();

	push	-1
	push	-1
	push	-1
	lea	ecx, DWORD PTR _array$[ebp]
	call	?init@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHHH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::init

; 525  : 	for (int i=0;i<20;++i)

	mov	DWORD PTR _i$68771[ebp], 0
	jmp	SHORT $LN51@array_stac
$LN50@array_stac:
	mov	eax, DWORD PTR _i$68771[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68771[ebp], eax
$LN51@array_stac:
	cmp	DWORD PTR _i$68771[ebp], 20		; 00000014H
	jge	SHORT $LN49@array_stac

; 526  : 	{
; 527  : 		array.push(i);

	lea	eax, DWORD PTR _i$68771[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?push@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJABH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::push

; 528  : 	}

	jmp	SHORT $LN50@array_stac
$LN49@array_stac:

; 529  : 	pecker_array_iterator< pecker_stack_pool_array<int> > array_iterator1;

	push	0
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@1@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 530  : 
; 531  : 	array.get_iterator(&array_iterator1);

	lea	eax, DWORD PTR _array_iterator1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_iterator@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@PAV32@@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_iterator

; 532  : 	array_iterator1.init(ITERATOR_INIT_BEGIN_INDEX);

	push	0
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::init

; 533  : 	//std::cout << "inc ....." << std::endl;
; 534  : 	PECKER_LOG_INFO("array_stack_pool_test_main","inc.......");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BL@HJAAJDEN@array_stack_pool_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0L@FMDBBCEB@inc?4?4?4?4?4?4?4?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN48@array_stac:

; 535  : 	while (1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN47@array_stac

; 536  : 	{
; 537  : 		const int* pvalue = array.get_at(&array_iterator1);

	lea	eax, DWORD PTR _array_iterator1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
	mov	DWORD PTR _pvalue$68827[ebp], eax

; 538  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68827[ebp], 0
	je	SHORT $LN46@array_stac

; 539  : 		{
; 540  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68827[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 541  : 			output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 542  : 			//PECKER_LOG_INFO("array_test_main","%d",*pvalue);
; 543  : 			//std::cout << *pvalue << ",";
; 544  : 		}
; 545  : 		else

	jmp	SHORT $LN45@array_stac
$LN46@array_stac:

; 546  : 		{
; 547  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 548  : 			//PECKER_LOG_ERR("array_test_main","%d(null)",pvalue);
; 549  : 			//std::cout << "null" << std::endl;
; 550  : 			break;

	jmp	SHORT $LN47@array_stac
$LN45@array_stac:

; 551  : 		}
; 552  : 		array_iterator1.increment();

	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?increment@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::increment

; 553  : 	}

	jmp	SHORT $LN48@array_stac
$LN47@array_stac:

; 554  : 
; 555  : 	//output_stream.write_char('\0');
; 556  : 	PECKER_LOG_INFO("begin to end","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0N@HIHLHABK@begin?5to?5end?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 557  : 
; 558  : 
; 559  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 560  : 	//std::cout << "dec ....." << std::endl;
; 561  : 	PECKER_LOG_INFO("array_test_main","dec.......");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BA@NAEAIJEJ@array_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0L@GPEFKELB@dec?4?4?4?4?4?4?4?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 562  : 	array_iterator1.init(ITERATOR_INIT_END_INDEX);

	push	1
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::init
$LN44@array_stac:

; 563  : 	while (1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN43@array_stac

; 564  : 	{
; 565  : 		const int* pvalue = array.get_at(&array_iterator1);

	lea	eax, DWORD PTR _array_iterator1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
	mov	DWORD PTR _pvalue$68833[ebp], eax

; 566  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68833[ebp], 0
	je	SHORT $LN42@array_stac

; 567  : 		{
; 568  : 			//std::cout << *pvalue << ",";
; 569  : 			//PECKER_LOG_INFO("array_test_main","%d",*pvalue);
; 570  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68833[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 571  : 			output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 572  : 		}
; 573  : 		else

	jmp	SHORT $LN41@array_stac
$LN42@array_stac:

; 574  : 		{
; 575  : 			//std::cout << "null" << std::endl;
; 576  : 			//PECKER_LOG_ERR("array_test_main","%d(null)",pvalue);
; 577  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 578  : 			break;

	jmp	SHORT $LN43@array_stac
$LN41@array_stac:

; 579  : 		}
; 580  : 		array_iterator1.decrement();

	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?decrement@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::decrement

; 581  : 	}

	jmp	SHORT $LN44@array_stac
$LN43@array_stac:

; 582  : 	//output_stream.write_char('\0');
; 583  : 	PECKER_LOG_INFO("end to begin","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0N@OIDKLPEO@end?5to?5begin?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 584  : 
; 585  : 	for (int i=0;i<5;++i)

	mov	DWORD PTR _i$68836[ebp], 0
	jmp	SHORT $LN40@array_stac
$LN39@array_stac:
	mov	eax, DWORD PTR _i$68836[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68836[ebp], eax
$LN40@array_stac:
	cmp	DWORD PTR _i$68836[ebp], 5
	jge	SHORT $LN38@array_stac

; 586  : 	{
; 587  : 		array.pop();

	lea	ecx, DWORD PTR _array$[ebp]
	call	?pop@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJXZ ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::pop

; 588  : 	}

	jmp	SHORT $LN39@array_stac
$LN38@array_stac:

; 589  : 
; 590  : 	for (int i=0;i<20;++i)

	mov	DWORD PTR _i$68840[ebp], 0
	jmp	SHORT $LN37@array_stac
$LN36@array_stac:
	mov	eax, DWORD PTR _i$68840[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68840[ebp], eax
$LN37@array_stac:
	cmp	DWORD PTR _i$68840[ebp], 20		; 00000014H
	jge	SHORT $LN35@array_stac

; 591  : 	{
; 592  : 		array.push(i);

	lea	eax, DWORD PTR _i$68840[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?push@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJABH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::push

; 593  : 	}

	jmp	SHORT $LN36@array_stac
$LN35@array_stac:

; 594  : 
; 595  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 596  : 
; 597  : 	array_iterator1.init(ITERATOR_INIT_BEGIN_INDEX);

	push	0
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::init

; 598  : 	//std::cout << "inc ....." << std::endl;
; 599  : 	PECKER_LOG_INFO("array_stack_pool_test_main","inc.......");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BL@HJAAJDEN@array_stack_pool_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0L@FMDBBCEB@inc?4?4?4?4?4?4?4?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN34@array_stac:

; 600  : 	while (1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN33@array_stac

; 601  : 	{
; 602  : 		const int* pvalue = array.get_at(&array_iterator1);

	lea	eax, DWORD PTR _array_iterator1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
	mov	DWORD PTR _pvalue$68847[ebp], eax

; 603  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68847[ebp], 0
	je	SHORT $LN32@array_stac

; 604  : 		{
; 605  : 			//std::cout << *pvalue << ",";
; 606  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68847[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 607  : 			output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 608  : 			//PECKER_LOG_INFO("array_stack_pool_test_main","%d",*pvalue);
; 609  : 		}
; 610  : 		else

	jmp	SHORT $LN31@array_stac
$LN32@array_stac:

; 611  : 		{
; 612  : 			//std::cout << "null" << std::endl;
; 613  : 			//PECKER_LOG_ERR("array_stack_pool_test_main","%d(null)",pvalue);
; 614  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 615  : 			break;

	jmp	SHORT $LN33@array_stac
$LN31@array_stac:

; 616  : 		}
; 617  : 		array_iterator1.increment();

	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?increment@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::increment

; 618  : 	}

	jmp	SHORT $LN34@array_stac
$LN33@array_stac:

; 619  : 
; 620  : 	PECKER_LOG_INFO("push pop begin to end","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BG@NGMJCOBM@push?5pop?5begin?5to?5end?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 621  : 
; 622  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 623  : 	//std::cout << "dec ....." << std::endl;
; 624  : 	PECKER_LOG_INFO("array_stack_pool_test_main","dec.......");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BL@HJAAJDEN@array_stack_pool_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0L@GPEFKELB@dec?4?4?4?4?4?4?4?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 625  : 	array_iterator1.init(ITERATOR_INIT_END_INDEX);

	push	1
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::init
$LN30@array_stac:

; 626  : 	while (1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN29@array_stac

; 627  : 	{
; 628  : 		const int* pvalue = array.get_at(&array_iterator1);

	lea	eax, DWORD PTR _array_iterator1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
	mov	DWORD PTR _pvalue$68853[ebp], eax

; 629  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68853[ebp], 0
	je	SHORT $LN28@array_stac

; 630  : 		{
; 631  : 			//std::cout << *pvalue << ",";
; 632  : 			//PECKER_LOG_INFO("array_stack_pool_test_main","%d",*pvalue);
; 633  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68853[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 634  : 			output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 635  : 		}
; 636  : 		else

	jmp	SHORT $LN27@array_stac
$LN28@array_stac:

; 637  : 		{
; 638  : 			//std::cout << "null" << std::endl;
; 639  : 			//PECKER_LOG_ERR("array_stack_pool_test_main","%d(null)",pvalue);
; 640  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 641  : 			break;

	jmp	SHORT $LN29@array_stac
$LN27@array_stac:

; 642  : 		}
; 643  : 		array_iterator1.decrement();

	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?decrement@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::decrement

; 644  : 	}

	jmp	SHORT $LN30@array_stac
$LN29@array_stac:

; 645  : 	PECKER_LOG_INFO("push pop end to begin","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BG@EGIIOBEI@push?5pop?5end?5to?5begin?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 646  : 
; 647  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 648  : 	//std::cout << "resize,get set" << std::endl;
; 649  : 	PECKER_LOG_INFO("array_stack_pool_test_main","resize,get set");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BL@HJAAJDEN@array_stack_pool_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0P@FNNMJEDO@resize?0get?5set?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 650  : 	array.resize(100,20);

	push	0
	push	-1
	push	20					; 00000014H
	push	100					; 00000064H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHHH_N@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::resize

; 651  : 	for (int i=0;i<100;++i)

	mov	DWORD PTR _i$68856[ebp], 0
	jmp	SHORT $LN26@array_stac
$LN25@array_stac:
	mov	eax, DWORD PTR _i$68856[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68856[ebp], eax
$LN26@array_stac:
	cmp	DWORD PTR _i$68856[ebp], 100		; 00000064H
	jge	SHORT $LN24@array_stac

; 652  : 	{
; 653  : 		array.set_at(i,100-i);

	mov	eax, 100				; 00000064H
	sub	eax, DWORD PTR _i$68856[ebp]
	mov	DWORD PTR $T70054[ebp], eax
	lea	ecx, DWORD PTR $T70054[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$68856[ebp]
	push	edx
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::set_at

; 654  : 	}

	jmp	SHORT $LN25@array_stac
$LN24@array_stac:

; 655  : 	for (int i=0;i<100;++i)

	mov	DWORD PTR _i$68861[ebp], 0
	jmp	SHORT $LN23@array_stac
$LN22@array_stac:
	mov	eax, DWORD PTR _i$68861[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68861[ebp], eax
$LN23@array_stac:
	cmp	DWORD PTR _i$68861[ebp], 100		; 00000064H
	jge	SHORT $LN21@array_stac

; 656  : 	{
; 657  : 		const int* pvalue = array.get_at(i);

	mov	eax, DWORD PTR _i$68861[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
	mov	DWORD PTR _pvalue$68865[ebp], eax

; 658  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68865[ebp], 0
	je	SHORT $LN20@array_stac

; 659  : 		{
; 660  : 			//std::cout << *pvalue << ",";
; 661  : 			//PECKER_LOG_INFO("array_stack_pool_test_main","%d",*pvalue);
; 662  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68865[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 663  : 		}
; 664  : 		else

	jmp	SHORT $LN19@array_stac
$LN20@array_stac:

; 665  : 		{
; 666  : 			//std::cout << "null" << std::endl;
; 667  : 			//PECKER_LOG_ERR("array_stack_pool_test_main","%d(null)",pvalue);
; 668  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 669  : 			break;

	jmp	SHORT $LN21@array_stac
$LN19@array_stac:

; 670  : 		}
; 671  : 		output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 672  : 	}

	jmp	SHORT $LN22@array_stac
$LN21@array_stac:

; 673  : 	//std::cout << std::endl;
; 674  : 	PECKER_LOG_INFO("resize,get set begin to end","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BM@JOHNJOMH@resize?0get?5set?5begin?5to?5end?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 675  : 
; 676  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 677  : 
; 678  : 	//std::cout << "resize,true,get set" << std::endl;
; 679  : 	PECKER_LOG_INFO("array_stack_pool_test_main","resize,true,get set");

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BL@HJAAJDEN@array_stack_pool_test_main?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BE@GMDFIGCC@resize?0true?0get?5set?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 680  : 	array.resize(50,20,true);

	push	0
	push	1
	push	20					; 00000014H
	push	50					; 00000032H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?resize@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHHH_N@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::resize

; 681  : 	for (int i=0;i<50;++i)

	mov	DWORD PTR _i$68868[ebp], 0
	jmp	SHORT $LN18@array_stac
$LN17@array_stac:
	mov	eax, DWORD PTR _i$68868[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68868[ebp], eax
$LN18@array_stac:
	cmp	DWORD PTR _i$68868[ebp], 50		; 00000032H
	jge	SHORT $LN16@array_stac

; 682  : 	{
; 683  : 		array.set_at(i,i);

	lea	eax, DWORD PTR _i$68868[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$68868[ebp]
	push	ecx
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::set_at

; 684  : 	}

	jmp	SHORT $LN17@array_stac
$LN16@array_stac:

; 685  : 	for (int i=0;i<50;++i)

	mov	DWORD PTR _i$68872[ebp], 0
	jmp	SHORT $LN15@array_stac
$LN14@array_stac:
	mov	eax, DWORD PTR _i$68872[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68872[ebp], eax
$LN15@array_stac:
	cmp	DWORD PTR _i$68872[ebp], 50		; 00000032H
	jge	SHORT $LN13@array_stac

; 686  : 	{
; 687  : 		const int* pvalue = array.get_at(i);

	mov	eax, DWORD PTR _i$68872[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
	mov	DWORD PTR _pvalue$68876[ebp], eax

; 688  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68876[ebp], 0
	je	SHORT $LN12@array_stac

; 689  : 		{
; 690  : 			//std::cout << *pvalue << ",";
; 691  : 			//PECKER_LOG_INFO("array_stack_pool_test_main","%d",*pvalue);
; 692  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68876[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 693  : 		}
; 694  : 		else

	jmp	SHORT $LN11@array_stac
$LN12@array_stac:

; 695  : 		{
; 696  : 			//std::cout << "null" << std::endl;
; 697  : 			//PECKER_LOG_ERR("array_stack_pool_test_main","%d(null)",pvalue);
; 698  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 699  : 			break;

	jmp	SHORT $LN13@array_stac
$LN11@array_stac:

; 700  : 		}
; 701  : 		output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 702  : 	}

	jmp	SHORT $LN14@array_stac
$LN13@array_stac:

; 703  : 	//std::cout << std::endl;
; 704  : 	PECKER_LOG_INFO("resize,true,get set begin to end","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0CB@ILKKIGKB@resize?0true?0get?5set?5begin?5to?5end@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 705  : 
; 706  : 
; 707  : 
; 708  : 	array_iterator1.init(ITERATOR_INIT_BEGIN_INDEX);

	push	0
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::init

; 709  : 
; 710  : 	pecker_array_iterator< pecker_stack_pool_array<int> > array_iterator2;

	push	0
	lea	ecx, DWORD PTR _array_iterator2$[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@1@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 711  : 	array.get_iterator(&array_iterator2);

	lea	eax, DWORD PTR _array_iterator2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_iterator@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@PAV32@@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_iterator

; 712  : 	array_iterator2.init(ITERATOR_INIT_END_INDEX);

	push	1
	lea	ecx, DWORD PTR _array_iterator2$[ebp]
	call	?init@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::init

; 713  : 
; 714  : 	int isetval = 100;

	mov	DWORD PTR _isetval$[ebp], 100		; 00000064H

; 715  : 	array.set_at(1,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::set_at

; 716  : 	array.set_at(6,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	6
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::set_at

; 717  : 	array.set_at(11,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	11					; 0000000bH
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::set_at

; 718  : 	array.set_at(16,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	16					; 00000010H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::set_at

; 719  : 	array.set_at(21,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	21					; 00000015H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::set_at

; 720  : 	array.set_at(26,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	26					; 0000001aH
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::set_at

; 721  : 	array.set_at(31,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	31					; 0000001fH
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::set_at

; 722  : 	array.set_at(36,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	36					; 00000024H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::set_at

; 723  : 	array.set_at(41,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	41					; 00000029H
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::set_at

; 724  : 	array.set_at(46,isetval);

	lea	eax, DWORD PTR _isetval$[ebp]
	push	eax
	push	46					; 0000002eH
	lea	ecx, DWORD PTR _array$[ebp]
	call	?set_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHABH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::set_at

; 725  : 
; 726  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 727  : 	for (int i=0;i<50;++i)

	mov	DWORD PTR _i$68890[ebp], 0
	jmp	SHORT $LN10@array_stac
$LN9@array_stac:
	mov	eax, DWORD PTR _i$68890[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68890[ebp], eax
$LN10@array_stac:
	cmp	DWORD PTR _i$68890[ebp], 50		; 00000032H
	jge	SHORT $LN8@array_stac

; 728  : 	{
; 729  : 		const int* pvalue = array.get_at(i);

	mov	eax, DWORD PTR _i$68890[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
	mov	DWORD PTR _pvalue$68894[ebp], eax

; 730  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68894[ebp], 0
	je	SHORT $LN7@array_stac

; 731  : 		{
; 732  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68894[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 733  : 		}
; 734  : 		else

	jmp	SHORT $LN6@array_stac
$LN7@array_stac:

; 735  : 		{
; 736  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 737  : 			break;

	jmp	SHORT $LN8@array_stac
$LN6@array_stac:

; 738  : 		}
; 739  : 		output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 740  : 	}

	jmp	SHORT $LN9@array_stac
$LN8@array_stac:

; 741  : 	PECKER_LOG_INFO("array to be sort","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0BB@GBNGOMJI@array?5to?5be?5sort?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 742  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 743  : 
; 744  : 	quick_sort_increment< int,pecker_value_compare<int>,pecker_stack_pool_array<int>,pecker_array_iterator< pecker_stack_pool_array<int> > >
; 745  : 		(array,array_iterator1,array_iterator2);

	lea	eax, DWORD PTR _array_iterator2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _array$[ebp]
	push	edx
	call	??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> > >
	add	esp, 12					; 0000000cH

; 746  : 
; 747  : 	output_stream.bind_write_buffer(gstr_log_info,MAX_LOG_STRING_INFO);

	push	4096					; 00001000H
	push	OFFSET _gstr_log_info
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?bind_write_buffer@pecker_write_stream_to_memery@pecker_sdk@@QAEJPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::bind_write_buffer

; 748  : 	for (int i=0;i<50;++i)

	mov	DWORD PTR _i$68928[ebp], 0
	jmp	SHORT $LN5@array_stac
$LN4@array_stac:
	mov	eax, DWORD PTR _i$68928[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68928[ebp], eax
$LN5@array_stac:
	cmp	DWORD PTR _i$68928[ebp], 50		; 00000032H
	jge	SHORT $LN3@array_stac

; 749  : 	{
; 750  : 		const int* pvalue = array.get_at(i);

	mov	eax, DWORD PTR _i$68928[ebp]
	push	eax
	lea	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
	mov	DWORD PTR _pvalue$68932[ebp], eax

; 751  : 		if (pvalue)

	cmp	DWORD PTR _pvalue$68932[ebp], 0
	je	SHORT $LN2@array_stac

; 752  : 		{
; 753  : 			output_stream.write_integer(*pvalue);

	mov	eax, DWORD PTR _pvalue$68932[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_integer@pecker_write_stream_to_memery@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_integer

; 754  : 		}
; 755  : 		else

	jmp	SHORT $LN1@array_stac
$LN2@array_stac:

; 756  : 		{
; 757  : 			output_stream.write_chars("null\n",6);

	push	6
	push	OFFSET ??_C@_05IHCDMNLM@null?6?$AA@
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_chars@pecker_write_stream_to_memery@pecker_sdk@@UAEHPADH@Z ; pecker_sdk::pecker_write_stream_to_memery::write_chars

; 758  : 			break;

	jmp	SHORT $LN3@array_stac
$LN1@array_stac:

; 759  : 		}
; 760  : 		output_stream.write_char(',');

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	?write_char@pecker_write_stream_to_memery@pecker_sdk@@UAEJD@Z ; pecker_sdk::pecker_write_stream_to_memery::write_char

; 761  : 	}

	jmp	SHORT $LN4@array_stac
$LN3@array_stac:

; 762  : 	PECKER_LOG_INFO("array  sorted","%s",gstr_log_info);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0O@MBCOGNKJ@array?5?5sorted?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET _gstr_log_info
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 763  : 
; 764  : 
; 765  : 	array.clear(true);

	push	1
	lea	ecx, DWORD PTR _array$[ebp]
	call	?clear@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJ_N@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::clear

; 766  : 
; 767  : 	//int ibreak;
; 768  : 	//std::cin >> ibreak;
; 769  : 
; 770  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _array_iterator2$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _array$[ebp]
	call	??1?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::~pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _output_stream$[ebp]
	call	??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_write_stream_to_memery::~pecker_write_stream_to_memery
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN68@array_stac
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1052				; 0000041cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN68@array_stac:
	DD	8
	DD	$LN67@array_stac
$LN67@array_stac:
	DD	-60					; ffffffc4H
	DD	40					; 00000028H
	DD	$LN58@array_stac
	DD	-588					; fffffdb4H
	DD	520					; 00000208H
	DD	$LN59@array_stac
	DD	-600					; fffffda8H
	DD	4
	DD	$LN60@array_stac
	DD	-620					; fffffd94H
	DD	12					; 0000000cH
	DD	$LN61@array_stac
	DD	-668					; fffffd64H
	DD	4
	DD	$LN62@array_stac
	DD	-740					; fffffd1cH
	DD	4
	DD	$LN63@array_stac
	DD	-784					; fffffcf0H
	DD	12					; 0000000cH
	DD	$LN64@array_stac
	DD	-796					; fffffce4H
	DD	4
	DD	$LN65@array_stac
$LN65@array_stac:
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN64@array_stac:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	50					; 00000032H
	DB	0
$LN63@array_stac:
	DB	105					; 00000069H
	DB	0
$LN62@array_stac:
	DB	105					; 00000069H
	DB	0
$LN61@array_stac:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	49					; 00000031H
	DB	0
$LN60@array_stac:
	DB	105					; 00000069H
	DB	0
$LN59@array_stac:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
$LN58@array_stac:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?array_stack_pool_test_main@@YAXXZ$0:
	lea	ecx, DWORD PTR _output_stream$[ebp]
	jmp	??1pecker_write_stream_to_memery@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_write_stream_to_memery::~pecker_write_stream_to_memery
__unwindfunclet$?array_stack_pool_test_main@@YAXXZ$1:
	lea	ecx, DWORD PTR _array$[ebp]
	jmp	??1?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAE@XZ ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::~pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>
__unwindfunclet$?array_stack_pool_test_main@@YAXXZ$2:
	lea	ecx, DWORD PTR _array_iterator1$[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
__unwindfunclet$?array_stack_pool_test_main@@YAXXZ$3:
	lea	ecx, DWORD PTR _array_iterator2$[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
__ehhandler$?array_stack_pool_test_main@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1056]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?array_stack_pool_test_main@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?array_stack_pool_test_main@@YAXXZ ENDP			; array_stack_pool_test_main
PUBLIC	??_7?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@6B@ ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::`vftable'
PUBLIC	??_R4?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@6B@ ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@8 ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > `RTTI Type Descriptor'
PUBLIC	??_R3?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@8 ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@8 ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@8 ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z:PROC ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@8
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_array.h
rdata$r	SEGMENT
??_R1A@?0A@EA@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@8 DD FLAT:??_R0?AV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@8 ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R2?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@8
rdata$r	SEGMENT
??_R2?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@8 DD FLAT:??_R1A@?0A@EA@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@8 ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@8
rdata$r	SEGMENT
??_R3?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@8 DD 00H ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@8
_DATA	SEGMENT
??_R0?AV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@8 DD FLAT:??_7type_info@@6B@ ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_'
	DB	'sdk@@@pecker_sdk@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@6B@
rdata$r	SEGMENT
??_R4?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@6B@ DD 00H ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@8
	DD	FLAT:??_R3?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_7?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@6B@
CONST	SEGMENT
??_7?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@6B@ DD FLAT:??_R4?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@6B@ ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::`vftable'
	DD	FLAT:??_E?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_auto_allocate_size$ = 8				; size = 4
??0?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAE@H@Z PROC ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >, COMDAT
; _this$ = ecx

; 32   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _auto_allocate_size$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 33   : 		if (_M_auto_allocate_step <= 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jg	SHORT $LN2@pecker_arr

; 34   : 		{
; 35   : 			_M_auto_allocate_step = ARRAY_DEFAULT_ALLOCATE_STEP;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 16			; 00000010H
$LN2@pecker_arr:

; 36   : 		}
; 37   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAE@H@Z ENDP ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@UAE@XZ PROC ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::~pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >, COMDAT
; _this$ = ecx

; 53   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@6B@

; 54   : 		clear(ARRAY_BOOLEAN_TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJ_N@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::clear

; 55   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@UAE@XZ ENDP ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::~pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?init@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHH@Z
_TEXT	SEGMENT
_resize_result$ = -20					; size = 4
_this$ = -8						; size = 4
_init_size$ = 8						; size = 4
_auto_allocate_size$ = 12				; size = 4
?init@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHH@Z PROC ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::init, COMDAT
; _this$ = ecx

; 116  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 		if (init_size <= 0)

	cmp	DWORD PTR _init_size$[ebp], 0
	jg	SHORT $LN2@init

; 118  : 		{
; 119  : 			init_size = 1;

	mov	DWORD PTR _init_size$[ebp], 1
$LN2@init:

; 120  : 		}
; 121  : 		array_result resize_result = resize(init_size,auto_allocate_size);

	push	0
	mov	eax, DWORD PTR _auto_allocate_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _init_size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHH_N@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::resize
	mov	DWORD PTR _resize_result$[ebp], eax

; 122  : 		if (P_OK == resize_result)

	cmp	DWORD PTR _resize_result$[ebp], 0
	jne	SHORT $LN1@init

; 123  : 		{
; 124  : 			_M_array_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN1@init:

; 125  : 		}
; 126  : 		return resize_result;

	mov	eax, DWORD PTR _resize_result$[ebp]

; 127  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?init@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHH@Z ENDP ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::init
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHH@Z PROC ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at, COMDAT
; _this$ = ecx

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 156  : 		if (index >=0 && index < _M_array_size)

	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN2@get_at
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@get_at

; 157  : 		{
; 158  : 			return &_M_parray_buffer[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN3@get_at

; 159  : 		}
; 160  : 		else

	jmp	SHORT $LN3@get_at
$LN2@get_at:

; 161  : 		{
; 162  : 			return null;

	xor	eax, eax
$LN3@get_at:

; 163  : 		}
; 164  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHH@Z ENDP ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?set_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHABH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
_set_item$ = 12						; size = 4
?set_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHABH@Z PROC ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::set_at, COMDAT
; _this$ = ecx

; 177  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 178  : 		if (index >=0 && index < _M_array_size)

	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN2@set_at
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@set_at

; 179  : 		{
; 180  : 			_M_parray_buffer[index] = set_item;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _set_item$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+edx*4], eax

; 181  : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN3@set_at

; 182  : 		}
; 183  : 		else

	jmp	SHORT $LN3@set_at
$LN2@set_at:

; 184  : 		{
; 185  : 			return P_ERR;

	or	eax, -1
$LN3@set_at:

; 186  : 		}
; 187  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?set_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHABH@Z ENDP ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::set_at
_TEXT	ENDS
PUBLIC	??$resize_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@YAJAAPAHHAAHHH_N2@Z ; pecker_sdk::resize_array<int,pecker_sdk::pecker_simple_allocator<int> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHH_N@Z
_TEXT	SEGMENT
_resize_result$ = -20					; size = 4
_this$ = -8						; size = 4
_resize_size$ = 8					; size = 4
_auto_allocate_size$ = 12				; size = 4
_bForce_release$ = 16					; size = 1
?resize@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHH_N@Z PROC ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::resize, COMDAT
; _this$ = ecx

; 192  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 193  : 		if (auto_allocate_size <= 0)

	cmp	DWORD PTR _auto_allocate_size$[ebp], 0
	jg	SHORT $LN2@resize

; 194  : 		{
; 195  : 			auto_allocate_size = _M_auto_allocate_step;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _auto_allocate_size$[ebp], ecx
$LN2@resize:

; 196  : 		}
; 197  : 		array_result resize_result = resize_array< class_type, allocate_object_t >(_M_parray_buffer,_M_array_size,
; 198  : 			_M_array_buffer_size,
; 199  : 			resize_size,
; 200  : 			auto_allocate_size,
; 201  : 			bForce_release,
; 202  : 			ARRAY_BOOLEAN_FLASE);

	push	0
	movzx	eax, BYTE PTR _bForce_release$[ebp]
	push	eax
	mov	ecx, DWORD PTR _auto_allocate_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _resize_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	??$resize_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@YAJAAPAHHAAHHH_N2@Z ; pecker_sdk::resize_array<int,pecker_sdk::pecker_simple_allocator<int> >
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _resize_result$[ebp], eax

; 203  : 
; 204  : 		if (P_OK == resize_result)

	cmp	DWORD PTR _resize_result$[ebp], 0
	jne	SHORT $LN1@resize

; 205  : 		{
; 206  : 			_M_array_size = resize_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _resize_size$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 207  : 			_M_auto_allocate_step = auto_allocate_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _auto_allocate_size$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN1@resize:

; 208  : 		}
; 209  : 
; 210  : 		return resize_result;

	mov	eax, DWORD PTR _resize_result$[ebp]

; 211  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?resize@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHH_N@Z ENDP ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::resize
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?clear@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJ_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bForce_release$ = 8					; size = 1
?clear@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJ_N@Z PROC ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::clear, COMDAT
; _this$ = ecx

; 213  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 214  : 		return resize(0,-1,bForce_release);

	movzx	eax, BYTE PTR _bForce_release$[ebp]
	push	eax
	push	-1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHH_N@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::resize

; 215  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?clear@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJ_N@Z ENDP ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::clear
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?push@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJABH@Z
_TEXT	SEGMENT
_resize_result$ = -20					; size = 4
_this$ = -8						; size = 4
_set_item$ = 8						; size = 4
?push@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJABH@Z PROC ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::push, COMDAT
; _this$ = ecx

; 223  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 224  : 		array_result resize_result = resize(_M_array_size+1);

	push	0
	push	-1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHH_N@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::resize
	mov	DWORD PTR _resize_result$[ebp], eax

; 225  : 		if (P_OK == resize_result)

	cmp	DWORD PTR _resize_result$[ebp], 0
	jne	SHORT $LN1@push

; 226  : 		{
; 227  : 			_M_parray_buffer[_M_array_size-1] = set_item;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _set_item$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4-4], edx
$LN1@push:

; 228  : 		}
; 229  : 		return resize_result;

	mov	eax, DWORD PTR _resize_result$[ebp]

; 230  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJABH@Z ENDP ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::push
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?pop@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?pop@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJXZ PROC ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::pop, COMDAT
; _this$ = ecx

; 232  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 233  : 		if (_M_array_size > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jle	SHORT $LN2@pop

; 234  : 		{
; 235  : 			return resize(_M_array_size-1);

	push	0
	push	-1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJHH_N@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::resize
	jmp	SHORT $LN3@pop

; 236  : 		}
; 237  : 		else

	jmp	SHORT $LN3@pop
$LN2@pop:

; 238  : 		{
; 239  : 			return P_SUCCESS;

	mov	eax, 6
$LN3@pop:

; 240  : 		}
; 241  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?pop@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJXZ ENDP ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::pop
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_iterator@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@PAV32@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_parray_iterator$ = 8					; size = 4
?get_iterator@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@PAV32@@Z PROC ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_iterator, COMDAT
; _this$ = ecx

; 268  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 269  : 		if (null != parray_iterator)

	cmp	DWORD PTR _parray_iterator$[ebp], 0
	je	SHORT $LN2@get_iterat

; 270  : 		{
; 271  : 			if (P_OK == parray_iterator->reinit(this))

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parray_iterator$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _parray_iterator$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@get_iterat

; 272  : 			{
; 273  : 				return parray_iterator;

	mov	eax, DWORD PTR _parray_iterator$[ebp]
	jmp	SHORT $LN3@get_iterat
$LN2@get_iterat:

; 274  : 			}
; 275  : 		}
; 276  : 		return null;

	xor	eax, eax
$LN3@get_iterat:

; 277  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_iterator@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@PAV32@@Z ENDP ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_iterator
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_parray_iterator$ = 8					; size = 4
?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z PROC ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at, COMDAT
; _this$ = ecx

; 288  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 289  : 		if (null != parray_iterator)

	cmp	DWORD PTR _parray_iterator$[ebp], 0
	je	SHORT $LN1@get_at@2

; 290  : 		{
; 291  : 			return get_at(parray_iterator->get_current_index());

	mov	eax, DWORD PTR _parray_iterator$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _parray_iterator$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
	jmp	SHORT $LN2@get_at@2
$LN1@get_at@2:

; 292  : 		}
; 293  : 
; 294  : 		return null;

	xor	eax, eax
$LN2@get_at@2:

; 295  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z ENDP ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
_TEXT	ENDS
PUBLIC	?get_size@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_size
PUBLIC	??_7?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@6B@ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::`vftable'
PUBLIC	??_R4?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@6B@ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?init@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::init
PUBLIC	?reinit@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJPBV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@W4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::reinit
PUBLIC	?copy@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::copy
PUBLIC	?get_current_index@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UBEHXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::get_current_index
PUBLIC	?set_current_index@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::set_current_index
EXTRN	??_E?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z:PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@8
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_array_iterator.h
rdata$r	SEGMENT
??_R1A@?0A@EA@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@8 DD FLAT:??_R0?AV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R2?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@8
rdata$r	SEGMENT
??_R2?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@8 DD FLAT:??_R1A@?0A@EA@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@8
rdata$r	SEGMENT
??_R3?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@8 DD 00H ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@@8
_DATA	SEGMENT
??_R0?AV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@@8 DD FLAT:??_7type_info@@6B@ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_s'
	DB	'imple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@6B@
rdata$r	SEGMENT
??_R4?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@6B@ DD 00H ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@@8
	DD	FLAT:??_R3?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_7?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@6B@
CONST	SEGMENT
??_7?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@6B@ DD FLAT:??_R4?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@6B@ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::`vftable'
	DD	FLAT:??_E?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z
	DD	FLAT:?init@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z
	DD	FLAT:?init@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ
	DD	FLAT:?reinit@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJPBV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@W4enumLINEAR_INTERATOR_INIT_TYPE@@@Z
	DD	FLAT:?copy@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z
	DD	FLAT:?increment@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ
	DD	FLAT:?decrement@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ
	DD	FLAT:?get_current_index@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UBEHXZ
	DD	FLAT:?set_current_index@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJH@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pcontainer$ = 8					; size = 4
??0?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@1@@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >, COMDAT
; _this$ = ecx

; 26   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pcontainer$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 27   : 		if (null != _M_pContainer && _M_pContainer->get_size() > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@pecker_arr@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?get_size@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_size
	test	eax, eax
	jle	SHORT $LN1@pecker_arr@2

; 28   : 		{
; 29   : 			_M_current_index = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN1@pecker_arr@2:

; 30   : 		}
; 31   : 		_M_current_index = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], -1

; 32   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@1@@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >, COMDAT
; _this$ = ecx

; 38   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@6B@

; 39   : 		_M_pContainer = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?init@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?init@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::init, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		return init(ITERATOR_INIT_BEGIN_INDEX);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 46   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::init
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?init@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z
_TEXT	SEGMENT
_size$68998 = -20					; size = 4
_this$ = -8						; size = 4
_init_type$ = 8						; size = 4
?init@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::init, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 		if (null != _M_pContainer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN7@init@2

; 51   : 		{
; 52   : 			array_buffer_size_val size = _M_pContainer->get_size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?get_size@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_size
	mov	DWORD PTR _size$68998[ebp], eax

; 53   : 			if (0 >= size)

	cmp	DWORD PTR _size$68998[ebp], 0
	jg	SHORT $LN6@init@2

; 54   : 			{
; 55   : 				_M_current_index = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], -1

; 56   : 				return P_OK;

	xor	eax, eax
	jmp	SHORT $LN8@init@2
$LN6@init@2:

; 57   : 			}
; 58   : 
; 59   : 			if (ITERATOR_INIT_BEGIN_INDEX == init_type)

	cmp	DWORD PTR _init_type$[ebp], 0
	jne	SHORT $LN5@init@2

; 60   : 			{
; 61   : 				_M_current_index = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	jmp	SHORT $LN4@init@2
$LN5@init@2:

; 62   : 			}
; 63   : 			else if (ITERATOR_INIT_END_INDEX == init_type)

	cmp	DWORD PTR _init_type$[ebp], 1
	jne	SHORT $LN3@init@2

; 64   : 			{
; 65   : 				_M_current_index = size - 1;

	mov	eax, DWORD PTR _size$68998[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 66   : 			}
; 67   : 			else

	jmp	SHORT $LN4@init@2
$LN3@init@2:

; 68   : 			{
; 69   : 				_M_current_index = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], -1

; 70   : 				return P_ERR;

	or	eax, -1
	jmp	SHORT $LN8@init@2
$LN4@init@2:

; 71   : 			}
; 72   : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN8@init@2

; 73   : 		}
; 74   : 		else

	jmp	SHORT $LN8@init@2
$LN7@init@2:

; 75   : 		{
; 76   : 			_M_current_index = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], -1

; 77   : 			return P_SUCCESS;

	mov	eax, 6
$LN8@init@2:

; 78   : 		}
; 79   : 
; 80   : 
; 81   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?init@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::init
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?reinit@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJPBV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@W4enumLINEAR_INTERATOR_INIT_TYPE@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pcontainer$ = 8					; size = 4
_init_type$ = 12					; size = 4
?reinit@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJPBV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@W4enumLINEAR_INTERATOR_INIT_TYPE@@@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::reinit, COMDAT
; _this$ = ecx

; 84   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 		if (pcontainer != null)

	cmp	DWORD PTR _pcontainer$[ebp], 0
	je	SHORT $LN1@reinit

; 86   : 		{
; 87   : 			_M_pContainer = pcontainer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pcontainer$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 88   : 			return init(init_type);

	mov	esi, esp
	mov	eax, DWORD PTR _init_type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@reinit
$LN1@reinit:

; 89   : 		}
; 90   : 		return P_ERR;

	or	eax, -1
$LN2@reinit:

; 91   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?reinit@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJPBV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@W4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::reinit
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?copy@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pother_liner_iterator$ = 8				; size = 4
?copy@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::copy, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		if (this == pother_liner_iterator)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _pother_liner_iterator$[ebp]
	jne	SHORT $LN3@copy

; 96   : 		{
; 97   : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN4@copy
	jmp	SHORT $LN2@copy
$LN3@copy:

; 98   : 		}
; 99   : 		else if (null != pother_liner_iterator)

	cmp	DWORD PTR _pother_liner_iterator$[ebp], 0
	je	SHORT $LN2@copy

; 100  : 		{
; 101  : 			_M_pContainer = pother_liner_iterator->_M_pContainer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pother_liner_iterator$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 102  : 			_M_current_index = pother_liner_iterator->_M_current_index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pother_liner_iterator$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 103  : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN4@copy
$LN2@copy:

; 104  : 		}
; 105  : 		return P_ERR;

	or	eax, -1
$LN4@copy:

; 106  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?copy@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::copy
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?increment@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?increment@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::increment, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 		if (null == _M_pContainer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@increment

; 111  : 		{
; 112  : 			return P_ERR;

	or	eax, -1
	jmp	SHORT $LN2@increment
$LN1@increment:

; 113  : 		}
; 114  : 		++_M_current_index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 115  : 		//if (_M_current_index < (_M_pContainer->get_size() - 1))
; 116  : 		//{
; 117  : 		//	++_M_current_index;
; 118  : 		//}
; 119  : 		return P_OK;

	xor	eax, eax
$LN2@increment:

; 120  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?increment@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::increment
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?decrement@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?decrement@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::decrement, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		if (null == _M_pContainer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@decrement

; 125  : 		{
; 126  : 			return P_ERR;

	or	eax, -1
	jmp	SHORT $LN2@decrement
$LN1@decrement:

; 127  : 		}
; 128  : 
; 129  : 		--_M_current_index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 130  : 		//if (0 < _M_current_index)
; 131  : 		//{
; 132  : 		//	--_M_current_index;
; 133  : 		//}
; 134  : 		return P_OK;

	xor	eax, eax
$LN2@decrement:

; 135  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?decrement@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::decrement
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_current_index@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_current_index@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UBEHXZ PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::get_current_index, COMDAT
; _this$ = ecx

; 138  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 139  : 		return _M_current_index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 140  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_current_index@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UBEHXZ ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::get_current_index
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?set_current_index@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_set_index$ = 8						; size = 4
?set_current_index@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJH@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::set_current_index, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 144  : 		if (null != _M_pContainer && set_index >=0 && set_index < _M_pContainer->get_size())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@set_curren
	cmp	DWORD PTR _set_index$[ebp], 0
	jl	SHORT $LN1@set_curren
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?get_size@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_size
	cmp	DWORD PTR _set_index$[ebp], eax
	jge	SHORT $LN1@set_curren

; 145  : 		{
; 146  : 			_M_current_index = set_index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _set_index$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 147  : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN2@set_curren
$LN1@set_curren:

; 148  : 		}
; 149  : 		return P_ERR;

	or	eax, -1
$LN2@set_curren:

; 150  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?set_current_index@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJH@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::set_current_index
_TEXT	ENDS
PUBLIC	??_7?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@6B@ ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::`vftable'
PUBLIC	??_R4?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@6B@ ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@8 ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > `RTTI Type Descriptor'
PUBLIC	??_R3?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@8 ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@8 ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@8 ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@UAEPAXI@Z:PROC ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@8
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_array.h
rdata$r	SEGMENT
??_R1A@?0A@EA@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@8 DD FLAT:??_R0?AV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@8 ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R2?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@8
rdata$r	SEGMENT
??_R2?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@8 DD FLAT:??_R1A@?0A@EA@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@8 ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@8
rdata$r	SEGMENT
??_R3?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@8 DD 00H ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@8
_DATA	SEGMENT
??_R0?AV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@8 DD FLAT:??_7type_info@@6B@ ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pe'
	DB	'cker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@6B@
rdata$r	SEGMENT
??_R4?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@6B@ DD 00H ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@8
	DD	FLAT:??_R3?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_7?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@6B@
CONST	SEGMENT
??_7?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@6B@ DD FLAT:??_R4?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@6B@ ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::`vftable'
	DD	FLAT:??_E?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_auto_allocate_size$ = 8				; size = 4
_array_buffer_array_allocate_step$ = 12			; size = 4
??0?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAE@HH@Z PROC ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >, COMDAT
; _this$ = ecx

; 322  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _auto_allocate_size$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _array_buffer_array_allocate_step$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 323  : 		if (_M_auto_allocate_step <= 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jg	SHORT $LN2@pecker_poo

; 324  : 		{
; 325  : 			_M_auto_allocate_step = ARRAY_DEFAULT_ALLOCATE_STEP;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 16			; 00000010H
$LN2@pecker_poo:

; 326  : 		}
; 327  : 
; 328  : 		if (_M_array_buffer_array_allocate_step <= 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jg	SHORT $LN3@pecker_poo

; 329  : 		{
; 330  : 			_M_array_buffer_array_allocate_step = ARRAY_DEFAULT_ALLOCATE_STEP;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 16			; 00000010H
$LN3@pecker_poo:

; 331  : 		}
; 332  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAE@HH@Z ENDP ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@UAE@XZ PROC ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::~pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >, COMDAT
; _this$ = ecx

; 350  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@6B@

; 351  : 		clear(ARRAY_BOOLEAN_TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJ_N@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::clear

; 352  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@UAE@XZ ENDP ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::~pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?init@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHHH@Z
_TEXT	SEGMENT
_resize_result$ = -20					; size = 4
_this$ = -8						; size = 4
_init_buffer_size$ = 8					; size = 4
_auto_allocate_size$ = 12				; size = 4
_auto_allocate_buffer_array_step$ = 16			; size = 4
?init@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHHH@Z PROC ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::init, COMDAT
; _this$ = ecx

; 423  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 424  : 		if (init_buffer_size <= 0)

	cmp	DWORD PTR _init_buffer_size$[ebp], 0
	jg	SHORT $LN2@init@3

; 425  : 		{
; 426  : 			init_buffer_size = 1;

	mov	DWORD PTR _init_buffer_size$[ebp], 1
$LN2@init@3:

; 427  : 		}
; 428  : 		array_result resize_result = resize(init_buffer_size,auto_allocate_size,auto_allocate_buffer_array_step);

	push	0
	mov	eax, DWORD PTR _auto_allocate_buffer_array_step$[ebp]
	push	eax
	mov	ecx, DWORD PTR _auto_allocate_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _init_buffer_size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHHH_N@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::resize
	mov	DWORD PTR _resize_result$[ebp], eax

; 429  : 		if (P_OK == resize_result)

	cmp	DWORD PTR _resize_result$[ebp], 0
	jne	SHORT $LN1@init@3

; 430  : 		{
; 431  : 			_M_pool_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN1@init@3:

; 432  : 		}
; 433  : 		return resize_result;

	mov	eax, DWORD PTR _resize_result$[ebp]

; 434  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?init@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHHH@Z ENDP ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::init
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHH@Z
_TEXT	SEGMENT
_column_index$69039 = -32				; size = 4
_row_index$69038 = -20					; size = 4
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHH@Z PROC ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at, COMDAT
; _this$ = ecx

; 479  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 480  : 		if (index >=0 && index < _M_pool_size)

	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN2@get_at@3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@get_at@3

; 481  : 		{
; 482  : 			array_index_val row_index = index / _M_auto_allocate_step;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	cdq
	idiv	DWORD PTR [ecx+12]
	mov	DWORD PTR _row_index$69038[ebp], eax

; 483  : 			array_index_val column_index = index % _M_auto_allocate_step;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	cdq
	idiv	DWORD PTR [ecx+12]
	mov	DWORD PTR _column_index$69039[ebp], edx

; 484  : 			return &(_M_ppArray_buffer_array[row_index][column_index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _row_index$69038[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _column_index$69039[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN3@get_at@3

; 485  : 		}
; 486  : 		else

	jmp	SHORT $LN3@get_at@3
$LN2@get_at@3:

; 487  : 		{
; 488  : 			return null;

	xor	eax, eax
$LN3@get_at@3:

; 489  : 		}
; 490  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHH@Z ENDP ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?set_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHABH@Z
_TEXT	SEGMENT
_column_index$69045 = -32				; size = 4
_row_index$69044 = -20					; size = 4
_this$ = -8						; size = 4
_index$ = 8						; size = 4
_set_item$ = 12						; size = 4
?set_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHABH@Z PROC ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::set_at, COMDAT
; _this$ = ecx

; 505  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 506  : 		if (index >=0 && index < _M_pool_size)

	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN2@set_at@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@set_at@2

; 507  : 		{
; 508  : 			array_index_val row_index = index / _M_auto_allocate_step;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	cdq
	idiv	DWORD PTR [ecx+12]
	mov	DWORD PTR _row_index$69044[ebp], eax

; 509  : 			array_index_val column_index = index % _M_auto_allocate_step;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	cdq
	idiv	DWORD PTR [ecx+12]
	mov	DWORD PTR _column_index$69045[ebp], edx

; 510  : 			_M_ppArray_buffer_array[row_index][column_index] = set_item;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _row_index$69044[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _column_index$69045[ebp]
	mov	edx, DWORD PTR _set_item$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], edx

; 511  : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN3@set_at@2

; 512  : 		}
; 513  : 		else

	jmp	SHORT $LN3@set_at@2
$LN2@set_at@2:

; 514  : 		{
; 515  : 			return P_FAIL;

	mov	eax, 1
$LN3@set_at@2:

; 516  : 		}
; 517  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?set_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHABH@Z ENDP ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::set_at
_TEXT	ENDS
PUBLIC	??$resize_array_pool@HV?$pecker_simple_allocator@PAH@pecker_sdk@@V?$pecker_simple_allocator@H@2@@pecker_sdk@@YAJAAPAPAHHHAAH1HHH_N2@Z ; pecker_sdk::resize_array_pool<int,pecker_sdk::pecker_simple_allocator<int *>,pecker_sdk::pecker_simple_allocator<int> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHHH_N@Z
_TEXT	SEGMENT
_resize_result$ = -20					; size = 4
_this$ = -8						; size = 4
_resize_size$ = 8					; size = 4
_auto_allocate_size$ = 12				; size = 4
_auto_allocate_buffer_array_step$ = 16			; size = 4
_bForce_release$ = 20					; size = 1
?resize@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHHH_N@Z PROC ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::resize, COMDAT
; _this$ = ecx

; 523  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 524  : 		if (auto_allocate_size <= 0)

	cmp	DWORD PTR _auto_allocate_size$[ebp], 0
	jg	SHORT $LN3@resize@2

; 525  : 		{
; 526  : 			auto_allocate_size = _M_auto_allocate_step;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _auto_allocate_size$[ebp], ecx
$LN3@resize@2:

; 527  : 		}
; 528  : 		if (auto_allocate_buffer_array_step <=0)

	cmp	DWORD PTR _auto_allocate_buffer_array_step$[ebp], 0
	jg	SHORT $LN2@resize@2

; 529  : 		{
; 530  : 			auto_allocate_buffer_array_step = _M_array_buffer_array_allocate_step;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _auto_allocate_buffer_array_step$[ebp], ecx
$LN2@resize@2:

; 531  : 		}
; 532  : 
; 533  : 		array_result resize_result = resize_array_pool< class_type,pointer_allocate_object_t, allocate_object_t >
; 534  : 			(_M_ppArray_buffer_array,
; 535  : 			_M_pool_size,
; 536  : 			_M_auto_allocate_step,
; 537  : 			_M_array_buffer_array_size,
; 538  : 			_M_array_buffer_array_buffer_size,
; 539  : 			resize_size,
; 540  : 			auto_allocate_size,
; 541  : 			auto_allocate_buffer_array_step,
; 542  : 			bForce_release,
; 543  : 			ARRAY_BOOLEAN_FLASE);

	push	0
	movzx	eax, BYTE PTR _bForce_release$[ebp]
	push	eax
	mov	ecx, DWORD PTR _auto_allocate_buffer_array_step$[ebp]
	push	ecx
	mov	edx, DWORD PTR _auto_allocate_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _resize_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	??$resize_array_pool@HV?$pecker_simple_allocator@PAH@pecker_sdk@@V?$pecker_simple_allocator@H@2@@pecker_sdk@@YAJAAPAPAHHHAAH1HHH_N2@Z ; pecker_sdk::resize_array_pool<int,pecker_sdk::pecker_simple_allocator<int *>,pecker_sdk::pecker_simple_allocator<int> >
	add	esp, 40					; 00000028H
	mov	DWORD PTR _resize_result$[ebp], eax

; 544  : 
; 545  : 		if (P_OK == resize_result)

	cmp	DWORD PTR _resize_result$[ebp], 0
	jne	SHORT $LN1@resize@2

; 546  : 		{
; 547  : 			_M_pool_size = resize_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _resize_size$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 548  : 			_M_auto_allocate_step = auto_allocate_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _auto_allocate_size$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 549  : 			_M_array_buffer_array_allocate_step = auto_allocate_buffer_array_step;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _auto_allocate_buffer_array_step$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN1@resize@2:

; 550  : 		}
; 551  : 
; 552  : 		return resize_result;

	mov	eax, DWORD PTR _resize_result$[ebp]

; 553  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?resize@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHHH_N@Z ENDP ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::resize
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?clear@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJ_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bForce_release$ = 8					; size = 1
?clear@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJ_N@Z PROC ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::clear, COMDAT
; _this$ = ecx

; 555  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 556  : 		return resize(0,-1,-1,bForce_release);

	movzx	eax, BYTE PTR _bForce_release$[ebp]
	push	eax
	push	-1
	push	-1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHHH_N@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::resize

; 557  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?clear@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJ_N@Z ENDP ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::clear
_TEXT	ENDS
PUBLIC	?get_reference_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAHH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_reference_at
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJABH@Z
_TEXT	SEGMENT
_resize_result$ = -20					; size = 4
_this$ = -8						; size = 4
_set_item$ = 8						; size = 4
?push@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJABH@Z PROC ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::push, COMDAT
; _this$ = ecx

; 566  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 567  : 		array_result resize_result = resize(_M_pool_size+1);

	push	0
	push	-1
	push	-1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHHH_N@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::resize
	mov	DWORD PTR _resize_result$[ebp], eax

; 568  : 		if (P_OK == resize_result)

	cmp	DWORD PTR _resize_result$[ebp], 0
	jne	SHORT $LN1@push@2

; 569  : 		{
; 570  : 			*get_reference_at(_M_pool_size-1) = set_item;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_reference_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAHH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_reference_at
	mov	edx, DWORD PTR _set_item$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
$LN1@push@2:

; 571  : 		}
; 572  : 		return resize_result;

	mov	eax, DWORD PTR _resize_result$[ebp]

; 573  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJABH@Z ENDP ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::push
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?pop@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?pop@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJXZ PROC ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::pop, COMDAT
; _this$ = ecx

; 575  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 576  : 		if (_M_pool_size > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jle	SHORT $LN2@pop@2

; 577  : 		{
; 578  : 			return resize(_M_pool_size-1);

	push	0
	push	-1
	push	-1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJHHH_N@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::resize
	jmp	SHORT $LN3@pop@2

; 579  : 		}
; 580  : 		else

	jmp	SHORT $LN3@pop@2
$LN2@pop@2:

; 581  : 		{
; 582  : 			return P_SUCCESS;

	mov	eax, 6
$LN3@pop@2:

; 583  : 		}
; 584  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?pop@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJXZ ENDP ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::pop
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_iterator@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@PAV32@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_parray_iterator$ = 8					; size = 4
?get_iterator@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@PAV32@@Z PROC ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_iterator, COMDAT
; _this$ = ecx

; 611  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 612  : 		if (null != parray_iterator)

	cmp	DWORD PTR _parray_iterator$[ebp], 0
	je	SHORT $LN2@get_iterat@2

; 613  : 		{
; 614  : 			if (P_OK == parray_iterator->reinit(this))

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parray_iterator$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _parray_iterator$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@get_iterat@2

; 615  : 			{
; 616  : 				return parray_iterator;

	mov	eax, DWORD PTR _parray_iterator$[ebp]
	jmp	SHORT $LN3@get_iterat@2
$LN2@get_iterat@2:

; 617  : 			}
; 618  : 		}
; 619  : 		return null;

	xor	eax, eax
$LN3@get_iterat@2:

; 620  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_iterator@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@PAV32@@Z ENDP ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_iterator
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_parray_iterator$ = 8					; size = 4
?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z PROC ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at, COMDAT
; _this$ = ecx

; 631  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 632  : 		if (null != parray_iterator)

	cmp	DWORD PTR _parray_iterator$[ebp], 0
	je	SHORT $LN1@get_at@4

; 633  : 		{
; 634  : 			return get_at(parray_iterator->get_current_index());

	mov	eax, DWORD PTR _parray_iterator$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _parray_iterator$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
	jmp	SHORT $LN2@get_at@4
$LN1@get_at@4:

; 635  : 		}
; 636  : 
; 637  : 		return null;

	xor	eax, eax
$LN2@get_at@4:

; 638  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z ENDP ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
_TEXT	ENDS
PUBLIC	?get_size@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_size
PUBLIC	??_7?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@6B@ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::`vftable'
PUBLIC	??_R4?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@6B@ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?init@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::init
PUBLIC	?reinit@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJPBV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@W4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::reinit
PUBLIC	?copy@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::copy
PUBLIC	?get_current_index@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UBEHXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::get_current_index
PUBLIC	?set_current_index@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::set_current_index
EXTRN	??_E?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z:PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@8
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_array_iterator.h
rdata$r	SEGMENT
??_R1A@?0A@EA@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@8 DD FLAT:??_R0?AV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R2?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@8
rdata$r	SEGMENT
??_R2?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@8 DD FLAT:??_R1A@?0A@EA@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@8
rdata$r	SEGMENT
??_R3?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@8 DD 00H ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@@8
_DATA	SEGMENT
??_R0?AV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@@8 DD FLAT:??_7type_info@@6B@ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pec'
	DB	'ker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator'
	DB	'@PAH@2@@pecker_sdk@@@pecker_sdk@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@6B@
rdata$r	SEGMENT
??_R4?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@6B@ DD 00H ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@@8
	DD	FLAT:??_R3?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_7?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@6B@
CONST	SEGMENT
??_7?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@6B@ DD FLAT:??_R4?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@6B@ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::`vftable'
	DD	FLAT:??_E?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z
	DD	FLAT:?init@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z
	DD	FLAT:?init@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ
	DD	FLAT:?reinit@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJPBV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@W4enumLINEAR_INTERATOR_INIT_TYPE@@@Z
	DD	FLAT:?copy@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z
	DD	FLAT:?increment@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ
	DD	FLAT:?decrement@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ
	DD	FLAT:?get_current_index@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UBEHXZ
	DD	FLAT:?set_current_index@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJH@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pcontainer$ = 8					; size = 4
??0?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@1@@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >, COMDAT
; _this$ = ecx

; 26   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pcontainer$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 27   : 		if (null != _M_pContainer && _M_pContainer->get_size() > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@pecker_arr@3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?get_size@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_size
	test	eax, eax
	jle	SHORT $LN1@pecker_arr@3

; 28   : 		{
; 29   : 			_M_current_index = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN1@pecker_arr@3:

; 30   : 		}
; 31   : 		_M_current_index = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], -1

; 32   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@1@@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >, COMDAT
; _this$ = ecx

; 38   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@6B@

; 39   : 		_M_pContainer = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?init@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?init@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::init, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		return init(ITERATOR_INIT_BEGIN_INDEX);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 46   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::init
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?init@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z
_TEXT	SEGMENT
_size$69098 = -20					; size = 4
_this$ = -8						; size = 4
_init_type$ = 8						; size = 4
?init@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::init, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 		if (null != _M_pContainer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN7@init@4

; 51   : 		{
; 52   : 			array_buffer_size_val size = _M_pContainer->get_size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?get_size@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_size
	mov	DWORD PTR _size$69098[ebp], eax

; 53   : 			if (0 >= size)

	cmp	DWORD PTR _size$69098[ebp], 0
	jg	SHORT $LN6@init@4

; 54   : 			{
; 55   : 				_M_current_index = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], -1

; 56   : 				return P_OK;

	xor	eax, eax
	jmp	SHORT $LN8@init@4
$LN6@init@4:

; 57   : 			}
; 58   : 
; 59   : 			if (ITERATOR_INIT_BEGIN_INDEX == init_type)

	cmp	DWORD PTR _init_type$[ebp], 0
	jne	SHORT $LN5@init@4

; 60   : 			{
; 61   : 				_M_current_index = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	jmp	SHORT $LN4@init@4
$LN5@init@4:

; 62   : 			}
; 63   : 			else if (ITERATOR_INIT_END_INDEX == init_type)

	cmp	DWORD PTR _init_type$[ebp], 1
	jne	SHORT $LN3@init@4

; 64   : 			{
; 65   : 				_M_current_index = size - 1;

	mov	eax, DWORD PTR _size$69098[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 66   : 			}
; 67   : 			else

	jmp	SHORT $LN4@init@4
$LN3@init@4:

; 68   : 			{
; 69   : 				_M_current_index = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], -1

; 70   : 				return P_ERR;

	or	eax, -1
	jmp	SHORT $LN8@init@4
$LN4@init@4:

; 71   : 			}
; 72   : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN8@init@4

; 73   : 		}
; 74   : 		else

	jmp	SHORT $LN8@init@4
$LN7@init@4:

; 75   : 		{
; 76   : 			_M_current_index = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], -1

; 77   : 			return P_SUCCESS;

	mov	eax, 6
$LN8@init@4:

; 78   : 		}
; 79   : 
; 80   : 
; 81   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?init@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::init
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?reinit@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJPBV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@W4enumLINEAR_INTERATOR_INIT_TYPE@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pcontainer$ = 8					; size = 4
_init_type$ = 12					; size = 4
?reinit@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJPBV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@W4enumLINEAR_INTERATOR_INIT_TYPE@@@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::reinit, COMDAT
; _this$ = ecx

; 84   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 		if (pcontainer != null)

	cmp	DWORD PTR _pcontainer$[ebp], 0
	je	SHORT $LN1@reinit@2

; 86   : 		{
; 87   : 			_M_pContainer = pcontainer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pcontainer$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 88   : 			return init(init_type);

	mov	esi, esp
	mov	eax, DWORD PTR _init_type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@reinit@2
$LN1@reinit@2:

; 89   : 		}
; 90   : 		return P_ERR;

	or	eax, -1
$LN2@reinit@2:

; 91   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?reinit@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJPBV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@W4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::reinit
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?copy@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pother_liner_iterator$ = 8				; size = 4
?copy@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::copy, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		if (this == pother_liner_iterator)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _pother_liner_iterator$[ebp]
	jne	SHORT $LN3@copy@2

; 96   : 		{
; 97   : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN4@copy@2
	jmp	SHORT $LN2@copy@2
$LN3@copy@2:

; 98   : 		}
; 99   : 		else if (null != pother_liner_iterator)

	cmp	DWORD PTR _pother_liner_iterator$[ebp], 0
	je	SHORT $LN2@copy@2

; 100  : 		{
; 101  : 			_M_pContainer = pother_liner_iterator->_M_pContainer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pother_liner_iterator$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 102  : 			_M_current_index = pother_liner_iterator->_M_current_index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pother_liner_iterator$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 103  : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN4@copy@2
$LN2@copy@2:

; 104  : 		}
; 105  : 		return P_ERR;

	or	eax, -1
$LN4@copy@2:

; 106  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?copy@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::copy
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?increment@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?increment@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::increment, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 		if (null == _M_pContainer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@increment@2

; 111  : 		{
; 112  : 			return P_ERR;

	or	eax, -1
	jmp	SHORT $LN2@increment@2
$LN1@increment@2:

; 113  : 		}
; 114  : 		++_M_current_index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 115  : 		//if (_M_current_index < (_M_pContainer->get_size() - 1))
; 116  : 		//{
; 117  : 		//	++_M_current_index;
; 118  : 		//}
; 119  : 		return P_OK;

	xor	eax, eax
$LN2@increment@2:

; 120  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?increment@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::increment
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?decrement@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?decrement@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::decrement, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		if (null == _M_pContainer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@decrement@2

; 125  : 		{
; 126  : 			return P_ERR;

	or	eax, -1
	jmp	SHORT $LN2@decrement@2
$LN1@decrement@2:

; 127  : 		}
; 128  : 
; 129  : 		--_M_current_index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 130  : 		//if (0 < _M_current_index)
; 131  : 		//{
; 132  : 		//	--_M_current_index;
; 133  : 		//}
; 134  : 		return P_OK;

	xor	eax, eax
$LN2@decrement@2:

; 135  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?decrement@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::decrement
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_current_index@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_current_index@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UBEHXZ PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::get_current_index, COMDAT
; _this$ = ecx

; 138  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 139  : 		return _M_current_index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 140  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_current_index@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UBEHXZ ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::get_current_index
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?set_current_index@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_set_index$ = 8						; size = 4
?set_current_index@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJH@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::set_current_index, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 144  : 		if (null != _M_pContainer && set_index >=0 && set_index < _M_pContainer->get_size())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@set_curren@2
	cmp	DWORD PTR _set_index$[ebp], 0
	jl	SHORT $LN1@set_curren@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?get_size@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_size
	cmp	DWORD PTR _set_index$[ebp], eax
	jge	SHORT $LN1@set_curren@2

; 145  : 		{
; 146  : 			_M_current_index = set_index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _set_index$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 147  : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN2@set_curren@2
$LN1@set_curren@2:

; 148  : 		}
; 149  : 		return P_ERR;

	or	eax, -1
$LN2@set_curren@2:

; 150  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?set_current_index@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJH@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::set_current_index
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_stack.h
_TEXT	ENDS
;	COMDAT ??0?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAE@XZ PROC ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>, COMDAT
; _this$ = ecx

; 73   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+512], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+516], 0

; 74   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAE@XZ ENDP ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAE@XZ PROC ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::~pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>, COMDAT
; _this$ = ecx

; 76   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 		clear(ARRAY_BOOLEAN_TRUE);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJ_N@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::clear

; 78   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAE@XZ ENDP ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::~pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>
_TEXT	ENDS
PUBLIC	?get_large_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@ABEPAHH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_large_reference_at
PUBLIC	__$ArrayPad$
EXTRN	_memset:PROC
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHHH_N@Z
_TEXT	SEGMENT
$T70166 = -1325						; size = 1
$T70167 = -1313						; size = 1
_i$69164 = -1112					; size = 4
_copy_buffer_size$69159 = -1100				; size = 4
_tmp_buffer$69158 = -1088				; size = 512
_i$69142 = -568						; size = 4
_copy_buffer_size$69140 = -556				; size = 4
_tmp_buffer$69139 = -544				; size = 512
_resize_result$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_resize_size$ = 8					; size = 4
_auto_allocate_size$ = 12				; size = 4
_auto_allocate_buffer_array_step$ = 16			; size = 4
_bForce_release$ = 20					; size = 1
?resize@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHHH_N@Z PROC ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::resize, COMDAT
; _this$ = ecx

; 148  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 1332				; 00000534H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1332]
	mov	ecx, 333				; 0000014dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	BYTE PTR $T70167[ebp], 0

; 149  : 		if (auto_allocate_size <= 0)

	cmp	DWORD PTR _auto_allocate_size$[ebp], 0
	jg	SHORT $LN24@resize@3

; 150  : 		{
; 151  : 			if (STACK_LARGE_BUFFER == _M_stack_buffer_type)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 1
	jne	SHORT $LN23@resize@3

; 152  : 			{
; 153  : 				auto_allocate_size = _M_buffer._M_Large_buffer._M_auto_allocate_step;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _auto_allocate_size$[ebp], ecx

; 154  : 			}
; 155  : 			else

	jmp	SHORT $LN24@resize@3
$LN23@resize@3:

; 156  : 			{
; 157  : 				auto_allocate_size = _BUFFER_SIZE;

	mov	DWORD PTR _auto_allocate_size$[ebp], 128 ; 00000080H
$LN24@resize@3:

; 158  : 			}
; 159  : 			
; 160  : 		}
; 161  : 		if (auto_allocate_buffer_array_step <=0 )

	cmp	DWORD PTR _auto_allocate_buffer_array_step$[ebp], 0
	jg	SHORT $LN21@resize@3

; 162  : 		{
; 163  : 			if (STACK_LARGE_BUFFER == _M_stack_buffer_type)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 1
	jne	SHORT $LN20@resize@3

; 164  : 			{
; 165  : 				auto_allocate_buffer_array_step = _M_buffer._M_Large_buffer._M_array_buffer_array_allocate_step;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _auto_allocate_buffer_array_step$[ebp], ecx

; 166  : 			}
; 167  : 			else

	jmp	SHORT $LN21@resize@3
$LN20@resize@3:

; 168  : 			{
; 169  : 				auto_allocate_buffer_array_step = ARRAY_DEFAULT_ALLOCATE_STEP;

	mov	DWORD PTR _auto_allocate_buffer_array_step$[ebp], 16 ; 00000010H
$LN21@resize@3:

; 170  : 			}
; 171  : 			
; 172  : 		}
; 173  : 
; 174  : 		array_result resize_result;
; 175  : 		if (STACK_LARGE_BUFFER == _M_stack_buffer_type)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 1
	jne	$LN18@resize@3

; 176  : 		{
; 177  : 			if (resize_size <= _BUFFER_SIZE && ARRAY_BOOLEAN_TRUE == bForce_release)

	cmp	DWORD PTR _resize_size$[ebp], 128	; 00000080H
	jg	$LN17@resize@3
	movzx	eax, BYTE PTR _bForce_release$[ebp]
	cmp	eax, 1
	jne	$LN17@resize@3
	mov	BYTE PTR $T70166[ebp], 0

; 178  : 			{
; 179  : 				_Stack_value_buffer tmp_buffer;
; 180  : 
; 181  : 				array_buffer_size_val copy_buffer_size = _M_stack_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+512]
	mov	DWORD PTR _copy_buffer_size$69140[ebp], ecx

; 182  : 				if (copy_buffer_size > resize_size)

	mov	eax, DWORD PTR _copy_buffer_size$69140[ebp]
	cmp	eax, DWORD PTR _resize_size$[ebp]
	jle	SHORT $LN16@resize@3

; 183  : 				{
; 184  : 					copy_buffer_size = resize_size;

	mov	eax, DWORD PTR _resize_size$[ebp]
	mov	DWORD PTR _copy_buffer_size$69140[ebp], eax
$LN16@resize@3:

; 185  : 				}
; 186  : 				for (array_index_val i = 0; i<copy_buffer_size; ++i)

	mov	DWORD PTR _i$69142[ebp], 0
	jmp	SHORT $LN15@resize@3
$LN14@resize@3:
	mov	eax, DWORD PTR _i$69142[ebp]
	add	eax, 1
	mov	DWORD PTR _i$69142[ebp], eax
$LN15@resize@3:
	mov	eax, DWORD PTR _i$69142[ebp]
	cmp	eax, DWORD PTR _copy_buffer_size$69140[ebp]
	jge	SHORT $LN13@resize@3

; 187  : 				{
; 188  : 					tmp_buffer._M_Small_buffer[i] = *get_large_reference_at(i);

	mov	eax, DWORD PTR _i$69142[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_large_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@ABEPAHH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_large_reference_at
	mov	BYTE PTR $T70166[ebp], 1
	mov	ecx, DWORD PTR _i$69142[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _tmp_buffer$69139[ebp+ecx*4], edx

; 189  : 				}

	jmp	SHORT $LN14@resize@3
$LN13@resize@3:

; 190  : 				resize_result = resize_array_pool< value_type,pointer_allocate_object_t, allocate_object_t >
; 191  : 					(_M_buffer._M_Large_buffer._M_ppArray_buffer_array,
; 192  : 					_M_stack_size,
; 193  : 					_M_buffer._M_Large_buffer._M_auto_allocate_step,
; 194  : 					_M_buffer._M_Large_buffer._M_array_buffer_array_size,
; 195  : 					_M_buffer._M_Large_buffer._M_array_buffer_array_buffer_size,
; 196  : 					0,
; 197  : 					auto_allocate_size,
; 198  : 					auto_allocate_buffer_array_step,
; 199  : 					ARRAY_BOOLEAN_TRUE,
; 200  : 					ARRAY_BOOLEAN_TRUE);

	push	1
	push	1
	mov	eax, DWORD PTR _auto_allocate_buffer_array_step$[ebp]
	push	eax
	mov	ecx, DWORD PTR _auto_allocate_size$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+512]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$resize_array_pool@HV?$pecker_simple_allocator@PAH@pecker_sdk@@V?$pecker_simple_allocator@H@2@@pecker_sdk@@YAJAAPAPAHHHAAH1HHH_N2@Z ; pecker_sdk::resize_array_pool<int,pecker_sdk::pecker_simple_allocator<int *>,pecker_sdk::pecker_simple_allocator<int> >
	add	esp, 40					; 00000028H
	mov	BYTE PTR $T70167[ebp], 1
	mov	DWORD PTR _resize_result$[ebp], eax

; 201  : 
; 202  : 				if (P_OK == resize_result)

	cmp	BYTE PTR $T70167[ebp], 0
	jne	SHORT $LN27@resize@3
	push	OFFSET $LN28@resize@3
	call	__RTC_UninitUse
	add	esp, 4
$LN27@resize@3:
	cmp	DWORD PTR _resize_result$[ebp], 0
	jne	SHORT $LN12@resize@3

; 203  : 				{
; 204  : 					_M_stack_size = resize_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _resize_size$[ebp]
	mov	DWORD PTR [eax+512], ecx

; 205  : 					_M_buffer = tmp_buffer;

	cmp	BYTE PTR $T70166[ebp], 0
	jne	SHORT $LN29@resize@3
	push	OFFSET $LN30@resize@3
	call	__RTC_UninitUse
	add	esp, 4
$LN29@resize@3:
	mov	ecx, 128				; 00000080H
	lea	esi, DWORD PTR _tmp_buffer$69139[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd

; 206  : 					_M_stack_buffer_type = STACK_SMALL_BUFFER;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+516], 0
$LN12@resize@3:

; 207  : 				}
; 208  : 			}
; 209  : 			else

	jmp	$LN11@resize@3
$LN17@resize@3:

; 210  : 			{
; 211  : 				resize_result = resize_array_pool< value_type,pointer_allocate_object_t, allocate_object_t >
; 212  : 					(_M_buffer._M_Large_buffer._M_ppArray_buffer_array,
; 213  : 					_M_stack_size,
; 214  : 					_M_buffer._M_Large_buffer._M_auto_allocate_step,
; 215  : 					_M_buffer._M_Large_buffer._M_array_buffer_array_size,
; 216  : 					_M_buffer._M_Large_buffer._M_array_buffer_array_buffer_size,
; 217  : 					resize_size,
; 218  : 					auto_allocate_size,
; 219  : 					auto_allocate_buffer_array_step,
; 220  : 					bForce_release,
; 221  : 					ARRAY_BOOLEAN_TRUE);

	push	1
	movzx	eax, BYTE PTR _bForce_release$[ebp]
	push	eax
	mov	ecx, DWORD PTR _auto_allocate_buffer_array_step$[ebp]
	push	ecx
	mov	edx, DWORD PTR _auto_allocate_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _resize_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+512]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$resize_array_pool@HV?$pecker_simple_allocator@PAH@pecker_sdk@@V?$pecker_simple_allocator@H@2@@pecker_sdk@@YAJAAPAPAHHHAAH1HHH_N2@Z ; pecker_sdk::resize_array_pool<int,pecker_sdk::pecker_simple_allocator<int *>,pecker_sdk::pecker_simple_allocator<int> >
	add	esp, 40					; 00000028H
	mov	BYTE PTR $T70167[ebp], 1
	mov	DWORD PTR _resize_result$[ebp], eax

; 222  : 
; 223  : 				if (P_OK == resize_result)

	cmp	BYTE PTR $T70167[ebp], 0
	jne	SHORT $LN31@resize@3
	push	OFFSET $LN28@resize@3
	call	__RTC_UninitUse
	add	esp, 4
$LN31@resize@3:
	cmp	DWORD PTR _resize_result$[ebp], 0
	jne	SHORT $LN11@resize@3

; 224  : 				{
; 225  : 					_M_stack_size = resize_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _resize_size$[ebp]
	mov	DWORD PTR [eax+512], ecx

; 226  : 					_M_buffer._M_Large_buffer._M_auto_allocate_step = auto_allocate_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _auto_allocate_size$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 227  : 					_M_buffer._M_Large_buffer._M_array_buffer_array_allocate_step = auto_allocate_buffer_array_step;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _auto_allocate_buffer_array_step$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN11@resize@3:

; 228  : 				}
; 229  : 			}

	jmp	$LN9@resize@3
$LN18@resize@3:

; 230  : 
; 231  : 			//return resize_result;
; 232  : 		}
; 233  : 		else if (STACK_SMALL_BUFFER == _M_stack_buffer_type)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	jne	$LN9@resize@3

; 234  : 		{
; 235  : 			if (resize_size > _BUFFER_SIZE)

	cmp	DWORD PTR _resize_size$[ebp], 128	; 00000080H
	jle	$LN7@resize@3

; 236  : 			{
; 237  : 				_Stack_value_buffer tmp_buffer = _M_buffer;

	mov	esi, DWORD PTR _this$[ebp]
	mov	ecx, 128				; 00000080H
	lea	edi, DWORD PTR _tmp_buffer$69158[ebp]
	rep movsd

; 238  : 				array_buffer_size_val copy_buffer_size = _M_stack_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+512]
	mov	DWORD PTR _copy_buffer_size$69159[ebp], ecx

; 239  : 				memset(&_M_buffer,0,sizeof(_M_buffer));

	push	512					; 00000200H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 240  : 				_M_stack_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+512], 0

; 241  : 
; 242  : 				resize_result = resize_array_pool< value_type,pointer_allocate_object_t, allocate_object_t >
; 243  : 					(_M_buffer._M_Large_buffer._M_ppArray_buffer_array,
; 244  : 					_M_stack_size,
; 245  : 					_M_buffer._M_Large_buffer._M_auto_allocate_step,
; 246  : 					_M_buffer._M_Large_buffer._M_array_buffer_array_size,
; 247  : 					_M_buffer._M_Large_buffer._M_array_buffer_array_buffer_size,
; 248  : 					resize_size,
; 249  : 					auto_allocate_size,
; 250  : 					auto_allocate_buffer_array_step,
; 251  : 					bForce_release,
; 252  : 					ARRAY_BOOLEAN_TRUE);

	push	1
	movzx	eax, BYTE PTR _bForce_release$[ebp]
	push	eax
	mov	ecx, DWORD PTR _auto_allocate_buffer_array_step$[ebp]
	push	ecx
	mov	edx, DWORD PTR _auto_allocate_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _resize_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+512]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$resize_array_pool@HV?$pecker_simple_allocator@PAH@pecker_sdk@@V?$pecker_simple_allocator@H@2@@pecker_sdk@@YAJAAPAPAHHHAAH1HHH_N2@Z ; pecker_sdk::resize_array_pool<int,pecker_sdk::pecker_simple_allocator<int *>,pecker_sdk::pecker_simple_allocator<int> >
	add	esp, 40					; 00000028H
	mov	BYTE PTR $T70167[ebp], 1
	mov	DWORD PTR _resize_result$[ebp], eax

; 253  : 
; 254  : 				if (P_OK == resize_result)

	cmp	BYTE PTR $T70167[ebp], 0
	jne	SHORT $LN32@resize@3
	push	OFFSET $LN28@resize@3
	call	__RTC_UninitUse
	add	esp, 4
$LN32@resize@3:
	cmp	DWORD PTR _resize_result$[ebp], 0
	jne	SHORT $LN6@resize@3

; 255  : 				{
; 256  : 					_M_stack_size = resize_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _resize_size$[ebp]
	mov	DWORD PTR [eax+512], ecx

; 257  : 					_M_stack_buffer_type = STACK_LARGE_BUFFER;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+516], 1

; 258  : 					_M_buffer._M_Large_buffer._M_auto_allocate_step = auto_allocate_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _auto_allocate_size$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 259  : 					_M_buffer._M_Large_buffer._M_array_buffer_array_allocate_step = auto_allocate_buffer_array_step;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _auto_allocate_buffer_array_step$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 260  : 
; 261  : 					for (array_index_val i = 0; i<copy_buffer_size; ++i)

	mov	DWORD PTR _i$69164[ebp], 0
	jmp	SHORT $LN5@resize@3
$LN4@resize@3:
	mov	eax, DWORD PTR _i$69164[ebp]
	add	eax, 1
	mov	DWORD PTR _i$69164[ebp], eax
$LN5@resize@3:
	mov	eax, DWORD PTR _i$69164[ebp]
	cmp	eax, DWORD PTR _copy_buffer_size$69159[ebp]
	jge	SHORT $LN3@resize@3

; 262  : 					{
; 263  : 						*get_large_reference_at(i) = tmp_buffer._M_Small_buffer[i];

	mov	eax, DWORD PTR _i$69164[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_large_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@ABEPAHH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_large_reference_at
	mov	ecx, DWORD PTR _i$69164[ebp]
	mov	edx, DWORD PTR _tmp_buffer$69158[ebp+ecx*4]
	mov	DWORD PTR [eax], edx

; 264  : 					}

	jmp	SHORT $LN4@resize@3
$LN3@resize@3:

; 265  : 
; 266  : 				}
; 267  : 				else

	jmp	SHORT $LN2@resize@3
$LN6@resize@3:

; 268  : 				{
; 269  : 					_M_buffer = tmp_buffer;

	mov	ecx, 128				; 00000080H
	lea	esi, DWORD PTR _tmp_buffer$69158[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
$LN2@resize@3:

; 270  : 				}
; 271  : 			}
; 272  : 			else

	jmp	SHORT $LN9@resize@3
$LN7@resize@3:

; 273  : 			{
; 274  : 				_M_stack_size = resize_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _resize_size$[ebp]
	mov	DWORD PTR [eax+512], ecx

; 275  : 				resize_result = P_OK;

	mov	BYTE PTR $T70167[ebp], 1
	mov	DWORD PTR _resize_result$[ebp], 0
$LN9@resize@3:

; 276  : 			}
; 277  : 
; 278  : 
; 279  : 		}
; 280  : 
; 281  : 	
; 282  : 
; 283  : 		return resize_result;

	cmp	BYTE PTR $T70167[ebp], 0
	jne	SHORT $LN33@resize@3
	push	OFFSET $LN28@resize@3
	call	__RTC_UninitUse
	add	esp, 4
$LN33@resize@3:
	mov	eax, DWORD PTR _resize_result$[ebp]

; 284  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@resize@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1332				; 00000534H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN36@resize@3:
	DD	2
	DD	$LN35@resize@3
$LN35@resize@3:
	DD	-544					; fffffde0H
	DD	512					; 00000200H
	DD	$LN30@resize@3
	DD	-1088					; fffffbc0H
	DD	512					; 00000200H
	DD	$LN34@resize@3
$LN34@resize@3:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN30@resize@3:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN28@resize@3:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
?resize@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHHH_N@Z ENDP ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::resize
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?init@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHHH@Z
_TEXT	SEGMENT
_return_result$ = -20					; size = 4
_this$ = -8						; size = 4
_resize_size$ = 8					; size = 4
_auto_allocate_size$ = 12				; size = 4
_auto_allocate_buffer_array_step$ = 16			; size = 4
?init@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHHH@Z PROC ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::init, COMDAT
; _this$ = ecx

; 289  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 		if (resize_size < 0)

	cmp	DWORD PTR _resize_size$[ebp], 0
	jge	SHORT $LN2@init@5

; 291  : 		{
; 292  : 			resize_size = _BUFFER_SIZE;

	mov	DWORD PTR _resize_size$[ebp], 128	; 00000080H
$LN2@init@5:

; 293  : 		}
; 294  : 		array_result return_result = resize(resize_size,auto_allocate_size,auto_allocate_buffer_array_step,ARRAY_BOOLEAN_FLASE);

	push	0
	mov	eax, DWORD PTR _auto_allocate_buffer_array_step$[ebp]
	push	eax
	mov	ecx, DWORD PTR _auto_allocate_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _resize_size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHHH_N@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::resize
	mov	DWORD PTR _return_result$[ebp], eax

; 295  : 		if (P_OK == return_result)

	cmp	DWORD PTR _return_result$[ebp], 0
	jne	SHORT $LN1@init@5

; 296  : 		{
; 297  : 			_M_stack_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+512], 0
$LN1@init@5:

; 298  : 		}
; 299  : 		return return_result;

	mov	eax, DWORD PTR _return_result$[ebp]

; 300  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?init@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHHH@Z ENDP ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::init
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?clear@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJ_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bForce_release$ = 8					; size = 1
?clear@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJ_N@Z PROC ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::clear, COMDAT
; _this$ = ecx

; 303  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 304  : 		return resize(0,-1,bForce_release);

	push	0
	movzx	eax, BYTE PTR _bForce_release$[ebp]
	push	eax
	push	-1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHHH_N@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::resize

; 305  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?clear@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJ_N@Z ENDP ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::clear
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHH@Z PROC ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at, COMDAT
; _this$ = ecx

; 330  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 331  : 		if (STACK_SMALL_BUFFER == _M_stack_buffer_type)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	jne	SHORT $LN4@get_at@5

; 332  : 		{
; 333  : 			if (index >=0 && index < _M_stack_size)

	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN3@get_at@5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+512]
	jge	SHORT $LN3@get_at@5

; 334  : 			{
; 335  : 				return &(_M_buffer._M_Small_buffer[index]);

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN5@get_at@5

; 336  : 			}
; 337  : 			else

	jmp	SHORT $LN2@get_at@5
$LN3@get_at@5:

; 338  : 			{
; 339  : 				return null;

	xor	eax, eax
	jmp	SHORT $LN5@get_at@5
$LN2@get_at@5:

; 340  : 			}
; 341  : 		}
; 342  : 		else

	jmp	SHORT $LN5@get_at@5
$LN4@get_at@5:

; 343  : 		{
; 344  : 			return get_large_reference_at(index);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_large_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@ABEPAHH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_large_reference_at
$LN5@get_at@5:

; 345  : 		}
; 346  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHH@Z ENDP ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
_TEXT	ENDS
PUBLIC	?get_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAHH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_reference_at
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?set_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHABH@Z
_TEXT	SEGMENT
_pmodify_value$ = -20					; size = 4
_this$ = -8						; size = 4
_index$ = 8						; size = 4
_set_item$ = 12						; size = 4
?set_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHABH@Z PROC ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::set_at, COMDAT
; _this$ = ecx

; 366  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 367  : 		 value_type* pmodify_value = get_reference_at(index);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAHH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_reference_at
	mov	DWORD PTR _pmodify_value$[ebp], eax

; 368  : 		 if (null != pmodify_value)

	cmp	DWORD PTR _pmodify_value$[ebp], 0
	je	SHORT $LN1@set_at@3

; 369  : 		 {
; 370  : 			 *pmodify_value = set_item;

	mov	eax, DWORD PTR _pmodify_value$[ebp]
	mov	ecx, DWORD PTR _set_item$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 371  : 			 return P_OK;

	xor	eax, eax
	jmp	SHORT $LN2@set_at@3
$LN1@set_at@3:

; 372  : 		 }
; 373  : 		 return P_ERR;

	or	eax, -1
$LN2@set_at@3:

; 374  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?set_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHABH@Z ENDP ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::set_at
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?push@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJABH@Z
_TEXT	SEGMENT
_resize_result$ = -20					; size = 4
_this$ = -8						; size = 4
_set_item$ = 8						; size = 4
?push@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJABH@Z PROC ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::push, COMDAT
; _this$ = ecx

; 383  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 384  : 		array_result resize_result = resize(_M_stack_size+1);

	push	0
	push	-1
	push	-1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+512]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHHH_N@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::resize
	mov	DWORD PTR _resize_result$[ebp], eax

; 385  : 		if (P_OK == resize_result)

	cmp	DWORD PTR _resize_result$[ebp], 0
	jne	SHORT $LN1@push@3

; 386  : 		{
; 387  : 			*get_reference_at(_M_stack_size-1) = set_item;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+512]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAHH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_reference_at
	mov	edx, DWORD PTR _set_item$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
$LN1@push@3:

; 388  : 		}
; 389  : 		return resize_result;

	mov	eax, DWORD PTR _resize_result$[ebp]

; 390  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJABH@Z ENDP ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::push
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?pop@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?pop@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJXZ PROC ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::pop, COMDAT
; _this$ = ecx

; 392  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 393  : 		if (_M_stack_size > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+512], 0
	jle	SHORT $LN2@pop@3

; 394  : 		{
; 395  : 			return resize(_M_stack_size-1);

	push	0
	push	-1
	push	-1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+512]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJHHH_N@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::resize
	jmp	SHORT $LN3@pop@3

; 396  : 		}
; 397  : 		else

	jmp	SHORT $LN3@pop@3
$LN2@pop@3:

; 398  : 		{
; 399  : 			return P_SUCCESS;

	mov	eax, 6
$LN3@pop@3:

; 400  : 		}
; 401  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?pop@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJXZ ENDP ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::pop
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_iterator@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@PAV32@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_parray_iterator$ = 8					; size = 4
?get_iterator@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@PAV32@@Z PROC ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_iterator, COMDAT
; _this$ = ecx

; 422  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 423  : 		if (null != parray_iterator)

	cmp	DWORD PTR _parray_iterator$[ebp], 0
	je	SHORT $LN2@get_iterat@3

; 424  : 		{
; 425  : 			if (P_OK == parray_iterator->reinit(this))

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parray_iterator$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _parray_iterator$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@get_iterat@3

; 426  : 			{
; 427  : 				return parray_iterator;

	mov	eax, DWORD PTR _parray_iterator$[ebp]
	jmp	SHORT $LN3@get_iterat@3
$LN2@get_iterat@3:

; 428  : 			}
; 429  : 		}
; 430  : 		return null;

	xor	eax, eax
$LN3@get_iterat@3:

; 431  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_iterator@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@PAV32@@Z ENDP ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_iterator
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_parray_iterator$ = 8					; size = 4
?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z PROC ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at, COMDAT
; _this$ = ecx

; 442  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 443  : 		if (null != parray_iterator)

	cmp	DWORD PTR _parray_iterator$[ebp], 0
	je	SHORT $LN1@get_at@6

; 444  : 		{
; 445  : 			return get_at(parray_iterator->get_current_index());

	mov	eax, DWORD PTR _parray_iterator$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _parray_iterator$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
	jmp	SHORT $LN2@get_at@6
$LN1@get_at@6:

; 446  : 		}
; 447  : 
; 448  : 		return null;

	xor	eax, eax
$LN2@get_at@6:

; 449  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z ENDP ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
_TEXT	ENDS
PUBLIC	?get_size@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_size
PUBLIC	??_7?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@6B@ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::`vftable'
PUBLIC	??_R4?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@6B@ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> > `RTTI Type Descriptor'
PUBLIC	??_R3?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?init@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::init
PUBLIC	?reinit@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJPBV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@W4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::reinit
PUBLIC	?copy@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::copy
PUBLIC	?get_current_index@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UBEHXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::get_current_index
PUBLIC	?set_current_index@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJH@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::set_current_index
EXTRN	??_E?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z:PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@8
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_array_iterator.h
rdata$r	SEGMENT
??_R1A@?0A@EA@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@8 DD FLAT:??_R0?AV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R2?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@8
rdata$r	SEGMENT
??_R2?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@8 DD FLAT:??_R1A@?0A@EA@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@8 ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@8
rdata$r	SEGMENT
??_R3?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@8 DD 00H ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@@8
_DATA	SEGMENT
??_R0?AV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@@8 DD FLAT:??_7type_info@@6B@ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$pecker_array_iterator@V?$pecker_stack_pool_array@H'
	DB	'V?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_all'
	DB	'ocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@', 00H
_DATA	ENDS
;	COMDAT ??_R4?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@6B@
rdata$r	SEGMENT
??_R4?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@6B@ DD 00H ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@@8
	DD	FLAT:??_R3?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@8
rdata$r	ENDS
;	COMDAT ??_7?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@6B@
CONST	SEGMENT
??_7?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@6B@ DD FLAT:??_R4?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@6B@ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::`vftable'
	DD	FLAT:??_E?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z
	DD	FLAT:?init@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z
	DD	FLAT:?init@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ
	DD	FLAT:?reinit@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJPBV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@W4enumLINEAR_INTERATOR_INIT_TYPE@@@Z
	DD	FLAT:?copy@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z
	DD	FLAT:?increment@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ
	DD	FLAT:?decrement@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ
	DD	FLAT:?get_current_index@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UBEHXZ
	DD	FLAT:?set_current_index@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJH@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pcontainer$ = 8					; size = 4
??0?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@1@@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >, COMDAT
; _this$ = ecx

; 26   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pcontainer$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 27   : 		if (null != _M_pContainer && _M_pContainer->get_size() > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@pecker_arr@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?get_size@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_size
	test	eax, eax
	jle	SHORT $LN1@pecker_arr@4

; 28   : 		{
; 29   : 			_M_current_index = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN1@pecker_arr@4:

; 30   : 		}
; 31   : 		_M_current_index = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], -1

; 32   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@1@@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >, COMDAT
; _this$ = ecx

; 38   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@6B@

; 39   : 		_M_pContainer = null;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?init@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?init@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::init, COMDAT
; _this$ = ecx

; 44   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 		return init(ITERATOR_INIT_BEGIN_INDEX);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 46   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::init
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?init@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z
_TEXT	SEGMENT
_size$69212 = -20					; size = 4
_this$ = -8						; size = 4
_init_type$ = 8						; size = 4
?init@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::init, COMDAT
; _this$ = ecx

; 49   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 		if (null != _M_pContainer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN7@init@6

; 51   : 		{
; 52   : 			array_buffer_size_val size = _M_pContainer->get_size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?get_size@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_size
	mov	DWORD PTR _size$69212[ebp], eax

; 53   : 			if (0 >= size)

	cmp	DWORD PTR _size$69212[ebp], 0
	jg	SHORT $LN6@init@6

; 54   : 			{
; 55   : 				_M_current_index = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], -1

; 56   : 				return P_OK;

	xor	eax, eax
	jmp	SHORT $LN8@init@6
$LN6@init@6:

; 57   : 			}
; 58   : 
; 59   : 			if (ITERATOR_INIT_BEGIN_INDEX == init_type)

	cmp	DWORD PTR _init_type$[ebp], 0
	jne	SHORT $LN5@init@6

; 60   : 			{
; 61   : 				_M_current_index = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	jmp	SHORT $LN4@init@6
$LN5@init@6:

; 62   : 			}
; 63   : 			else if (ITERATOR_INIT_END_INDEX == init_type)

	cmp	DWORD PTR _init_type$[ebp], 1
	jne	SHORT $LN3@init@6

; 64   : 			{
; 65   : 				_M_current_index = size - 1;

	mov	eax, DWORD PTR _size$69212[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 66   : 			}
; 67   : 			else

	jmp	SHORT $LN4@init@6
$LN3@init@6:

; 68   : 			{
; 69   : 				_M_current_index = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], -1

; 70   : 				return P_ERR;

	or	eax, -1
	jmp	SHORT $LN8@init@6
$LN4@init@6:

; 71   : 			}
; 72   : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN8@init@6

; 73   : 		}
; 74   : 		else

	jmp	SHORT $LN8@init@6
$LN7@init@6:

; 75   : 		{
; 76   : 			_M_current_index = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], -1

; 77   : 			return P_SUCCESS;

	mov	eax, 6
$LN8@init@6:

; 78   : 		}
; 79   : 
; 80   : 
; 81   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?init@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJW4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::init
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?reinit@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJPBV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@W4enumLINEAR_INTERATOR_INIT_TYPE@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pcontainer$ = 8					; size = 4
_init_type$ = 12					; size = 4
?reinit@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJPBV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@W4enumLINEAR_INTERATOR_INIT_TYPE@@@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::reinit, COMDAT
; _this$ = ecx

; 84   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 		if (pcontainer != null)

	cmp	DWORD PTR _pcontainer$[ebp], 0
	je	SHORT $LN1@reinit@3

; 86   : 		{
; 87   : 			_M_pContainer = pcontainer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pcontainer$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 88   : 			return init(init_type);

	mov	esi, esp
	mov	eax, DWORD PTR _init_type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@reinit@3
$LN1@reinit@3:

; 89   : 		}
; 90   : 		return P_ERR;

	or	eax, -1
$LN2@reinit@3:

; 91   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?reinit@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJPBV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@W4enumLINEAR_INTERATOR_INIT_TYPE@@@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::reinit
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?copy@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pother_liner_iterator$ = 8				; size = 4
?copy@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::copy, COMDAT
; _this$ = ecx

; 94   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		if (this == pother_liner_iterator)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _pother_liner_iterator$[ebp]
	jne	SHORT $LN3@copy@3

; 96   : 		{
; 97   : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN4@copy@3
	jmp	SHORT $LN2@copy@3
$LN3@copy@3:

; 98   : 		}
; 99   : 		else if (null != pother_liner_iterator)

	cmp	DWORD PTR _pother_liner_iterator$[ebp], 0
	je	SHORT $LN2@copy@3

; 100  : 		{
; 101  : 			_M_pContainer = pother_liner_iterator->_M_pContainer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pother_liner_iterator$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 102  : 			_M_current_index = pother_liner_iterator->_M_current_index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pother_liner_iterator$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 103  : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN4@copy@3
$LN2@copy@3:

; 104  : 		}
; 105  : 		return P_ERR;

	or	eax, -1
$LN4@copy@3:

; 106  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?copy@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::copy
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?increment@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?increment@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::increment, COMDAT
; _this$ = ecx

; 109  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 		if (null == _M_pContainer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@increment@3

; 111  : 		{
; 112  : 			return P_ERR;

	or	eax, -1
	jmp	SHORT $LN2@increment@3
$LN1@increment@3:

; 113  : 		}
; 114  : 		++_M_current_index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 115  : 		//if (_M_current_index < (_M_pContainer->get_size() - 1))
; 116  : 		//{
; 117  : 		//	++_M_current_index;
; 118  : 		//}
; 119  : 		return P_OK;

	xor	eax, eax
$LN2@increment@3:

; 120  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?increment@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::increment
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?decrement@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?decrement@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::decrement, COMDAT
; _this$ = ecx

; 123  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 124  : 		if (null == _M_pContainer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@decrement@3

; 125  : 		{
; 126  : 			return P_ERR;

	or	eax, -1
	jmp	SHORT $LN2@decrement@3
$LN1@decrement@3:

; 127  : 		}
; 128  : 
; 129  : 		--_M_current_index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 130  : 		//if (0 < _M_current_index)
; 131  : 		//{
; 132  : 		//	--_M_current_index;
; 133  : 		//}
; 134  : 		return P_OK;

	xor	eax, eax
$LN2@decrement@3:

; 135  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?decrement@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::decrement
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_current_index@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_current_index@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UBEHXZ PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::get_current_index, COMDAT
; _this$ = ecx

; 138  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 139  : 		return _M_current_index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 140  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_current_index@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UBEHXZ ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::get_current_index
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?set_current_index@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_set_index$ = 8						; size = 4
?set_current_index@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJH@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::set_current_index, COMDAT
; _this$ = ecx

; 143  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 144  : 		if (null != _M_pContainer && set_index >=0 && set_index < _M_pContainer->get_size())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@set_curren@3
	cmp	DWORD PTR _set_index$[ebp], 0
	jl	SHORT $LN1@set_curren@3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?get_size@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEHXZ ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_size
	cmp	DWORD PTR _set_index$[ebp], eax
	jge	SHORT $LN1@set_curren@3

; 145  : 		{
; 146  : 			_M_current_index = set_index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _set_index$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 147  : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN2@set_curren@3
$LN1@set_curren@3:

; 148  : 		}
; 149  : 		return P_ERR;

	or	eax, -1
$LN2@set_curren@3:

; 150  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?set_current_index@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJH@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::set_current_index
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z PROC ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::~pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z ENDP ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_G?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_G?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@UAEPAXI@Z PROC ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::~pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@UAEPAXI@Z ENDP ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_G?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_G?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEPAXI@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_array.h
_TEXT	ENDS
;	COMDAT ?get_size@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_size@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEHXZ PROC ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_size, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 264  : 		return _M_array_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 265  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_size@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEHXZ ENDP ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_size
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_reference_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAHH@Z
_TEXT	SEGMENT
_column_index$69264 = -32				; size = 4
_row_index$69263 = -20					; size = 4
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?get_reference_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAHH@Z PROC ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_reference_at, COMDAT
; _this$ = ecx

; 492  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 493  : 		if (index >=0 && index < _M_pool_size)

	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN2@get_refere
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@get_refere

; 494  : 		{
; 495  : 			array_index_val row_index = index / _M_auto_allocate_step;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	cdq
	idiv	DWORD PTR [ecx+12]
	mov	DWORD PTR _row_index$69263[ebp], eax

; 496  : 			array_index_val column_index = index % _M_auto_allocate_step;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	cdq
	idiv	DWORD PTR [ecx+12]
	mov	DWORD PTR _column_index$69264[ebp], edx

; 497  : 			return &(_M_ppArray_buffer_array[row_index][column_index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _row_index$69263[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _column_index$69264[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN3@get_refere

; 498  : 		}
; 499  : 		else

	jmp	SHORT $LN3@get_refere
$LN2@get_refere:

; 500  : 		{
; 501  : 			return null;

	xor	eax, eax
$LN3@get_refere:

; 502  : 		}
; 503  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?get_reference_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAHH@Z ENDP ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_reference_at
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_size@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_size@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEHXZ PROC ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_size, COMDAT
; _this$ = ecx

; 606  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return _M_pool_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 608  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_size@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEHXZ ENDP ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_size
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_stack.h
_TEXT	ENDS
;	COMDAT ?get_large_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@ABEPAHH@Z
_TEXT	SEGMENT
_column_index$69273 = -44				; size = 4
_row_index$69272 = -32					; size = 4
_tmp_step$69271 = -20					; size = 4
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?get_large_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@ABEPAHH@Z PROC ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_large_reference_at, COMDAT
; _this$ = ecx

; 56   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 		if (index >=0 && index < _M_stack_size)

	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN2@get_large_
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+512]
	jge	SHORT $LN2@get_large_

; 58   : 		{
; 59   : 			array_index_val tmp_step =  _M_buffer._M_Large_buffer._M_auto_allocate_step;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _tmp_step$69271[ebp], ecx

; 60   : 			array_index_val row_index = index / tmp_step;

	mov	eax, DWORD PTR _index$[ebp]
	cdq
	idiv	DWORD PTR _tmp_step$69271[ebp]
	mov	DWORD PTR _row_index$69272[ebp], eax

; 61   : 			array_index_val column_index = index % tmp_step;

	mov	eax, DWORD PTR _index$[ebp]
	cdq
	idiv	DWORD PTR _tmp_step$69271[ebp]
	mov	DWORD PTR _column_index$69273[ebp], edx

; 62   : 			return &(_M_buffer._M_Large_buffer._M_ppArray_buffer_array[row_index][column_index]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _row_index$69272[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _column_index$69273[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
	jmp	SHORT $LN3@get_large_

; 63   : 		}
; 64   : 		else

	jmp	SHORT $LN3@get_large_
$LN2@get_large_:

; 65   : 		{
; 66   : 			return null;

	xor	eax, eax
$LN3@get_large_:

; 67   : 		}
; 68   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?get_large_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@ABEPAHH@Z ENDP ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_large_reference_at
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_size@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_size@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEHXZ PROC ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_size, COMDAT
; _this$ = ecx

; 325  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 326  : 		return _M_stack_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+512]

; 327  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_size@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEHXZ ENDP ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_size
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?get_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAHH@Z PROC ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_reference_at, COMDAT
; _this$ = ecx

; 348  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 349  : 		if (STACK_SMALL_BUFFER == _M_stack_buffer_type)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	jne	SHORT $LN4@get_refere@2

; 350  : 		{
; 351  : 			if (index >=0 && index < _M_stack_size)

	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN3@get_refere@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+512]
	jge	SHORT $LN3@get_refere@2

; 352  : 			{
; 353  : 				return (value_type*)&(_M_buffer._M_Small_buffer[index]);

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN5@get_refere@2

; 354  : 			}
; 355  : 			else

	jmp	SHORT $LN2@get_refere@2
$LN3@get_refere@2:

; 356  : 			{
; 357  : 				return null;

	xor	eax, eax
	jmp	SHORT $LN5@get_refere@2
$LN2@get_refere@2:

; 358  : 			}
; 359  : 		}
; 360  : 		else

	jmp	SHORT $LN5@get_refere@2
$LN4@get_refere@2:

; 361  : 		{
; 362  : 			return get_large_reference_at(index);

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_large_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@ABEPAHH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_large_reference_at
$LN5@get_refere@2:

; 363  : 		}
; 364  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAHH@Z ENDP ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_reference_at
_TEXT	ENDS
PUBLIC	?compare@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::compare
PUBLIC	??$increment_order_partition@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@AAV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@11@Z ; pecker_sdk::increment_order_partition<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > > >
PUBLIC	??0?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
;	COMDAT xdata$x
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_array_algorithm.h
xdata$x	SEGMENT
__ehfuncinfo$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z$4
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z
_TEXT	SEGMENT
$T70239 = -348						; size = 4
$T70240 = -336						; size = 4
$T70241 = -324						; size = 4
$T70242 = -312						; size = 4
_itmp_next$69313 = -108					; size = 12
_itmp_pre$69305 = -88					; size = 12
_iterator_clip$ = -68					; size = 12
_iterator_high$ = -48					; size = 12
_iterator_low$ = -28					; size = 12
__$EHRec$ = -12						; size = 12
_array$ = 8						; size = 4
_iterator_low_$ = 12					; size = 4
_iterator_high_$ = 16					; size = 4
??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z PROC ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > > >, COMDAT

; 446  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 447  : 	_Array_iterator iterator_low(iterator_low_);

	mov	eax, DWORD PTR _iterator_low_$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 448  : 	_Array_iterator iterator_high(iterator_high_);

	mov	eax, DWORD PTR _iterator_high_$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 449  : 	_Array_iterator iterator_clip;

	push	0
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@1@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 450  : 	
; 451  : 	if (P_OK != increment_order_partition< item_type, compare_t, _Array_container, _Array_iterator >(array,iterator_low,iterator_high,iterator_clip))

	lea	eax, DWORD PTR _iterator_clip$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	push	ecx
	lea	edx, DWORD PTR _iterator_low$[ebp]
	push	edx
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	call	??$increment_order_partition@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@AAV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@11@Z ; pecker_sdk::increment_order_partition<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > > >
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN5@quick_sort

; 452  : 	{
; 453  : 		return P_ERR;

	mov	DWORD PTR $T70239[ebp], -1
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	eax, DWORD PTR $T70239[ebp]
	jmp	$LN6@quick_sort
$LN5@quick_sort:

; 454  : 	}
; 455  : 
; 456  : 	iterator_low.copy(&iterator_low_);

	mov	eax, DWORD PTR _iterator_low_$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	?copy@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::copy

; 457  : 	iterator_high.copy(&iterator_high_);

	mov	eax, DWORD PTR _iterator_high_$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	?copy@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::copy

; 458  : 
; 459  : 	if (0 != _Array_iterator::compare(iterator_clip,iterator_low))

	lea	eax, DWORD PTR _iterator_low$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	push	ecx
	call	?compare@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::compare
	add	esp, 8
	test	eax, eax
	je	$LN4@quick_sort

; 460  : 	{
; 461  : 		_Array_iterator itmp_pre(iterator_clip);

	lea	eax, DWORD PTR _iterator_clip$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itmp_pre$69305[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 462  : 		itmp_pre.decrement();

	lea	ecx, DWORD PTR _itmp_pre$69305[ebp]
	call	?decrement@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::decrement

; 463  : 		if (P_OK != quick_sort_increment< item_type, compare_t, _Array_container, _Array_iterator >(array,iterator_low,itmp_pre))

	lea	eax, DWORD PTR _itmp_pre$69305[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	mov	edx, DWORD PTR _array$[ebp]
	push	edx
	call	??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > > >
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN3@quick_sort

; 464  : 		{
; 465  : 			return P_ERR;

	mov	DWORD PTR $T70240[ebp], -1
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _itmp_pre$69305[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	eax, DWORD PTR $T70240[ebp]
	jmp	$LN6@quick_sort
$LN3@quick_sort:

; 466  : 		}
; 467  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _itmp_pre$69305[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
$LN4@quick_sort:

; 468  : 
; 469  : 	if (0 != _Array_iterator::compare(iterator_clip,iterator_high))

	lea	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	push	ecx
	call	?compare@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::compare
	add	esp, 8
	test	eax, eax
	je	$LN2@quick_sort

; 470  : 	{
; 471  : 		_Array_iterator itmp_next(iterator_clip);

	lea	eax, DWORD PTR _iterator_clip$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itmp_next$69313[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 472  : 		itmp_next.increment();

	lea	ecx, DWORD PTR _itmp_next$69313[ebp]
	call	?increment@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::increment

; 473  : 		if (P_OK != quick_sort_increment< item_type, compare_t, _Array_container, _Array_iterator >(array,itmp_next,iterator_high))

	lea	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itmp_next$69313[ebp]
	push	ecx
	mov	edx, DWORD PTR _array$[ebp]
	push	edx
	call	??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > > >
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@quick_sort

; 474  : 		{
; 475  : 			return P_ERR;

	mov	DWORD PTR $T70241[ebp], -1
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _itmp_next$69313[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	eax, DWORD PTR $T70241[ebp]
	jmp	SHORT $LN6@quick_sort
$LN1@quick_sort:

; 476  : 		}
; 477  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _itmp_next$69313[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
$LN2@quick_sort:

; 478  : 
; 479  : 	return P_OK;

	mov	DWORD PTR $T70242[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
	mov	eax, DWORD PTR $T70242[ebp]
$LN6@quick_sort:

; 480  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@quick_sort
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN20@quick_sort:
	DD	5
	DD	$LN19@quick_sort
$LN19@quick_sort:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN13@quick_sort
	DD	-48					; ffffffd0H
	DD	12					; 0000000cH
	DD	$LN14@quick_sort
	DD	-68					; ffffffbcH
	DD	12					; 0000000cH
	DD	$LN15@quick_sort
	DD	-88					; ffffffa8H
	DD	12					; 0000000cH
	DD	$LN16@quick_sort
	DD	-108					; ffffff94H
	DD	12					; 0000000cH
	DD	$LN17@quick_sort
$LN17@quick_sort:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN16@quick_sort:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
$LN15@quick_sort:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	0
$LN14@quick_sort:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	0
$LN13@quick_sort:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z$0:
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z$1:
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z$2:
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z$3:
	lea	ecx, DWORD PTR _itmp_pre$69305[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z$4:
	lea	ecx, DWORD PTR _itmp_next$69313[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::~pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
__ehhandler$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-356]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@ABV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@1@Z ENDP ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > > >
PUBLIC	?compare@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::compare
PUBLIC	??$increment_order_partition@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@AAV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@11@Z ; pecker_sdk::increment_order_partition<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > > >
PUBLIC	??0?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z$4
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z
_TEXT	SEGMENT
$T70263 = -348						; size = 4
$T70264 = -336						; size = 4
$T70265 = -324						; size = 4
$T70266 = -312						; size = 4
_itmp_next$69350 = -108					; size = 12
_itmp_pre$69342 = -88					; size = 12
_iterator_clip$ = -68					; size = 12
_iterator_high$ = -48					; size = 12
_iterator_low$ = -28					; size = 12
__$EHRec$ = -12						; size = 12
_array$ = 8						; size = 4
_iterator_low_$ = 12					; size = 4
_iterator_high_$ = 16					; size = 4
??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z PROC ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > > >, COMDAT

; 446  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 447  : 	_Array_iterator iterator_low(iterator_low_);

	mov	eax, DWORD PTR _iterator_low_$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 448  : 	_Array_iterator iterator_high(iterator_high_);

	mov	eax, DWORD PTR _iterator_high_$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 449  : 	_Array_iterator iterator_clip;

	push	0
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@1@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 450  : 	
; 451  : 	if (P_OK != increment_order_partition< item_type, compare_t, _Array_container, _Array_iterator >(array,iterator_low,iterator_high,iterator_clip))

	lea	eax, DWORD PTR _iterator_clip$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	push	ecx
	lea	edx, DWORD PTR _iterator_low$[ebp]
	push	edx
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	call	??$increment_order_partition@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@AAV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@11@Z ; pecker_sdk::increment_order_partition<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > > >
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN5@quick_sort@2

; 452  : 	{
; 453  : 		return P_ERR;

	mov	DWORD PTR $T70263[ebp], -1
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	eax, DWORD PTR $T70263[ebp]
	jmp	$LN6@quick_sort@2
$LN5@quick_sort@2:

; 454  : 	}
; 455  : 
; 456  : 	iterator_low.copy(&iterator_low_);

	mov	eax, DWORD PTR _iterator_low_$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	?copy@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::copy

; 457  : 	iterator_high.copy(&iterator_high_);

	mov	eax, DWORD PTR _iterator_high_$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	?copy@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::copy

; 458  : 
; 459  : 	if (0 != _Array_iterator::compare(iterator_clip,iterator_low))

	lea	eax, DWORD PTR _iterator_low$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	push	ecx
	call	?compare@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::compare
	add	esp, 8
	test	eax, eax
	je	$LN4@quick_sort@2

; 460  : 	{
; 461  : 		_Array_iterator itmp_pre(iterator_clip);

	lea	eax, DWORD PTR _iterator_clip$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itmp_pre$69342[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 462  : 		itmp_pre.decrement();

	lea	ecx, DWORD PTR _itmp_pre$69342[ebp]
	call	?decrement@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::decrement

; 463  : 		if (P_OK != quick_sort_increment< item_type, compare_t, _Array_container, _Array_iterator >(array,iterator_low,itmp_pre))

	lea	eax, DWORD PTR _itmp_pre$69342[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	mov	edx, DWORD PTR _array$[ebp]
	push	edx
	call	??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > > >
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN3@quick_sort@2

; 464  : 		{
; 465  : 			return P_ERR;

	mov	DWORD PTR $T70264[ebp], -1
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _itmp_pre$69342[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	eax, DWORD PTR $T70264[ebp]
	jmp	$LN6@quick_sort@2
$LN3@quick_sort@2:

; 466  : 		}
; 467  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _itmp_pre$69342[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
$LN4@quick_sort@2:

; 468  : 
; 469  : 	if (0 != _Array_iterator::compare(iterator_clip,iterator_high))

	lea	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	push	ecx
	call	?compare@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::compare
	add	esp, 8
	test	eax, eax
	je	$LN2@quick_sort@2

; 470  : 	{
; 471  : 		_Array_iterator itmp_next(iterator_clip);

	lea	eax, DWORD PTR _iterator_clip$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itmp_next$69350[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 472  : 		itmp_next.increment();

	lea	ecx, DWORD PTR _itmp_next$69350[ebp]
	call	?increment@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::increment

; 473  : 		if (P_OK != quick_sort_increment< item_type, compare_t, _Array_container, _Array_iterator >(array,itmp_next,iterator_high))

	lea	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itmp_next$69350[ebp]
	push	ecx
	mov	edx, DWORD PTR _array$[ebp]
	push	edx
	call	??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > > >
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@quick_sort@2

; 474  : 		{
; 475  : 			return P_ERR;

	mov	DWORD PTR $T70265[ebp], -1
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _itmp_next$69350[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	eax, DWORD PTR $T70265[ebp]
	jmp	SHORT $LN6@quick_sort@2
$LN1@quick_sort@2:

; 476  : 		}
; 477  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _itmp_next$69350[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
$LN2@quick_sort@2:

; 478  : 
; 479  : 	return P_OK;

	mov	DWORD PTR $T70266[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
	mov	eax, DWORD PTR $T70266[ebp]
$LN6@quick_sort@2:

; 480  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@quick_sort@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN20@quick_sort@2:
	DD	5
	DD	$LN19@quick_sort@2
$LN19@quick_sort@2:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN13@quick_sort@2
	DD	-48					; ffffffd0H
	DD	12					; 0000000cH
	DD	$LN14@quick_sort@2
	DD	-68					; ffffffbcH
	DD	12					; 0000000cH
	DD	$LN15@quick_sort@2
	DD	-88					; ffffffa8H
	DD	12					; 0000000cH
	DD	$LN16@quick_sort@2
	DD	-108					; ffffff94H
	DD	12					; 0000000cH
	DD	$LN17@quick_sort@2
$LN17@quick_sort@2:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN16@quick_sort@2:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
$LN15@quick_sort@2:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	0
$LN14@quick_sort@2:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	0
$LN13@quick_sort@2:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z$0:
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z$1:
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z$2:
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z$3:
	lea	ecx, DWORD PTR _itmp_pre$69342[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z$4:
	lea	ecx, DWORD PTR _itmp_next$69350[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::~pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
__ehhandler$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-356]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@ABV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@1@Z ENDP ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > > >
PUBLIC	?compare@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::compare
PUBLIC	??$increment_order_partition@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@AAV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@11@Z ; pecker_sdk::increment_order_partition<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> > >
PUBLIC	??0?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z$4
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z
_TEXT	SEGMENT
$T70287 = -348						; size = 4
$T70288 = -336						; size = 4
$T70289 = -324						; size = 4
$T70290 = -312						; size = 4
_itmp_next$69387 = -108					; size = 12
_itmp_pre$69379 = -88					; size = 12
_iterator_clip$ = -68					; size = 12
_iterator_high$ = -48					; size = 12
_iterator_low$ = -28					; size = 12
__$EHRec$ = -12						; size = 12
_array$ = 8						; size = 4
_iterator_low_$ = 12					; size = 4
_iterator_high_$ = 16					; size = 4
??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z PROC ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> > >, COMDAT

; 446  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 447  : 	_Array_iterator iterator_low(iterator_low_);

	mov	eax, DWORD PTR _iterator_low_$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 448  : 	_Array_iterator iterator_high(iterator_high_);

	mov	eax, DWORD PTR _iterator_high_$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 449  : 	_Array_iterator iterator_clip;

	push	0
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@QAE@PBV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@1@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 450  : 	
; 451  : 	if (P_OK != increment_order_partition< item_type, compare_t, _Array_container, _Array_iterator >(array,iterator_low,iterator_high,iterator_clip))

	lea	eax, DWORD PTR _iterator_clip$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	push	ecx
	lea	edx, DWORD PTR _iterator_low$[ebp]
	push	edx
	mov	eax, DWORD PTR _array$[ebp]
	push	eax
	call	??$increment_order_partition@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@AAV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@11@Z ; pecker_sdk::increment_order_partition<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> > >
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN5@quick_sort@3

; 452  : 	{
; 453  : 		return P_ERR;

	mov	DWORD PTR $T70287[ebp], -1
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	eax, DWORD PTR $T70287[ebp]
	jmp	$LN6@quick_sort@3
$LN5@quick_sort@3:

; 454  : 	}
; 455  : 
; 456  : 	iterator_low.copy(&iterator_low_);

	mov	eax, DWORD PTR _iterator_low_$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	?copy@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::copy

; 457  : 	iterator_high.copy(&iterator_high_);

	mov	eax, DWORD PTR _iterator_high_$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	?copy@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::copy

; 458  : 
; 459  : 	if (0 != _Array_iterator::compare(iterator_clip,iterator_low))

	lea	eax, DWORD PTR _iterator_low$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	push	ecx
	call	?compare@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::compare
	add	esp, 8
	test	eax, eax
	je	$LN4@quick_sort@3

; 460  : 	{
; 461  : 		_Array_iterator itmp_pre(iterator_clip);

	lea	eax, DWORD PTR _iterator_clip$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itmp_pre$69379[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 462  : 		itmp_pre.decrement();

	lea	ecx, DWORD PTR _itmp_pre$69379[ebp]
	call	?decrement@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::decrement

; 463  : 		if (P_OK != quick_sort_increment< item_type, compare_t, _Array_container, _Array_iterator >(array,iterator_low,itmp_pre))

	lea	eax, DWORD PTR _itmp_pre$69379[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	mov	edx, DWORD PTR _array$[ebp]
	push	edx
	call	??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> > >
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN3@quick_sort@3

; 464  : 		{
; 465  : 			return P_ERR;

	mov	DWORD PTR $T70288[ebp], -1
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _itmp_pre$69379[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	eax, DWORD PTR $T70288[ebp]
	jmp	$LN6@quick_sort@3
$LN3@quick_sort@3:

; 466  : 		}
; 467  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _itmp_pre$69379[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
$LN4@quick_sort@3:

; 468  : 
; 469  : 	if (0 != _Array_iterator::compare(iterator_clip,iterator_high))

	lea	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	push	ecx
	call	?compare@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::compare
	add	esp, 8
	test	eax, eax
	je	$LN2@quick_sort@3

; 470  : 	{
; 471  : 		_Array_iterator itmp_next(iterator_clip);

	lea	eax, DWORD PTR _iterator_clip$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itmp_next$69387[ebp]
	call	??0?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 472  : 		itmp_next.increment();

	lea	ecx, DWORD PTR _itmp_next$69387[ebp]
	call	?increment@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJXZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::increment

; 473  : 		if (P_OK != quick_sort_increment< item_type, compare_t, _Array_container, _Array_iterator >(array,itmp_next,iterator_high))

	lea	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	lea	ecx, DWORD PTR _itmp_next$69387[ebp]
	push	ecx
	mov	edx, DWORD PTR _array$[ebp]
	push	edx
	call	??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> > >
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@quick_sort@3

; 474  : 		{
; 475  : 			return P_ERR;

	mov	DWORD PTR $T70289[ebp], -1
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _itmp_next$69387[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	eax, DWORD PTR $T70289[ebp]
	jmp	SHORT $LN6@quick_sort@3
$LN1@quick_sort@3:

; 476  : 		}
; 477  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _itmp_next$69387[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
$LN2@quick_sort@3:

; 478  : 
; 479  : 	return P_OK;

	mov	DWORD PTR $T70290[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	call	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
	mov	eax, DWORD PTR $T70290[ebp]
$LN6@quick_sort@3:

; 480  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@quick_sort@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN20@quick_sort@3:
	DD	5
	DD	$LN19@quick_sort@3
$LN19@quick_sort@3:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN13@quick_sort@3
	DD	-48					; ffffffd0H
	DD	12					; 0000000cH
	DD	$LN14@quick_sort@3
	DD	-68					; ffffffbcH
	DD	12					; 0000000cH
	DD	$LN15@quick_sort@3
	DD	-88					; ffffffa8H
	DD	12					; 0000000cH
	DD	$LN16@quick_sort@3
	DD	-108					; ffffff94H
	DD	12					; 0000000cH
	DD	$LN17@quick_sort@3
$LN17@quick_sort@3:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN16@quick_sort@3:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
$LN15@quick_sort@3:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	0
$LN14@quick_sort@3:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	0
$LN13@quick_sort@3:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z$0:
	lea	ecx, DWORD PTR _iterator_low$[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z$1:
	lea	ecx, DWORD PTR _iterator_high$[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z$2:
	lea	ecx, DWORD PTR _iterator_clip$[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z$3:
	lea	ecx, DWORD PTR _itmp_pre$69379[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
__unwindfunclet$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z$4:
	lea	ecx, DWORD PTR _itmp_next$69387[ebp]
	jmp	??1?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAE@XZ ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::~pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
__ehhandler$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-356]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$quick_sort_increment@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@ABV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@1@Z ENDP ; pecker_sdk::quick_sort_increment<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> > >
PUBLIC	?allocate_objects@?$pecker_simple_allocator@H@pecker_sdk@@SAPAHH@Z ; pecker_sdk::pecker_simple_allocator<int>::allocate_objects
PUBLIC	?deallocate_objects@?$pecker_simple_allocator@H@pecker_sdk@@SAXPAH@Z ; pecker_sdk::pecker_simple_allocator<int>::deallocate_objects
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$resize_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@YAJAAPAHHAAHHH_N2@Z
_TEXT	SEGMENT
_index$69414 = -56					; size = 4
_ptemp_new_allocate_object_buffer$ = -44		; size = 4
_tmp_mod_result$69406 = -32				; size = 4
_tmp_mod_result$69400 = -20				; size = 4
_new_array_buffer_size$ = -8				; size = 4
_pArray_buffer$ = 8					; size = 4
_current_array_size$ = 12				; size = 4
_current_array_buffer_size$ = 16			; size = 4
_new_array_size$ = 20					; size = 4
_new_allocate_object_step$ = 24				; size = 4
_bForce_release$ = 28					; size = 1
_bNew_allocate$ = 32					; size = 1
??$resize_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@YAJAAPAHHAAHHH_N2@Z PROC ; pecker_sdk::resize_array<int,pecker_sdk::pecker_simple_allocator<int> >, COMDAT

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 34   : 	array_buffer_size_val new_array_buffer_size = 0;

	mov	DWORD PTR _new_array_buffer_size$[ebp], 0

; 35   : 
; 36   : #ifdef ARRAY_BEBUG_CODE
; 37   : 	if (new_allocate_object_step <= 0)
; 38   : 	{
; 39   : 		new_allocate_object_step = ARRAY_DEFAULT_ALLOCATE_STEP;
; 40   : 	}
; 41   : 	
; 42   : 	if(new_array_size < 0)
; 43   : 		new_array_size = 0;
; 44   : #endif
; 45   : 	
; 46   : 	if (ARRAY_BOOLEAN_TRUE == bForce_release)

	movzx	eax, BYTE PTR _bForce_release$[ebp]
	cmp	eax, 1
	jne	SHORT $LN18@resize_arr

; 47   : 	{
; 48   : 		if (0 >= new_array_size)

	cmp	DWORD PTR _new_array_size$[ebp], 0
	jg	SHORT $LN17@resize_arr

; 49   : 		{
; 50   : 			if (null != pArray_buffer)

	mov	eax, DWORD PTR _pArray_buffer$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN16@resize_arr

; 51   : 			{
; 52   : 				allocate_object_t::deallocate_objects(pArray_buffer);

	mov	eax, DWORD PTR _pArray_buffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?deallocate_objects@?$pecker_simple_allocator@H@pecker_sdk@@SAXPAH@Z ; pecker_sdk::pecker_simple_allocator<int>::deallocate_objects
	add	esp, 4

; 53   : 				pArray_buffer = null;

	mov	eax, DWORD PTR _pArray_buffer$[ebp]
	mov	DWORD PTR [eax], 0
$LN16@resize_arr:

; 54   : 			}
; 55   : 			current_array_buffer_size = 0;

	mov	eax, DWORD PTR _current_array_buffer_size$[ebp]
	mov	DWORD PTR [eax], 0

; 56   : 			return P_OK;

	xor	eax, eax
	jmp	$LN19@resize_arr
$LN17@resize_arr:

; 57   : 		}
; 58   : 		
; 59   : 
; 60   : 		array_buffer_size_val tmp_mod_result = new_array_size % new_allocate_object_step;

	mov	eax, DWORD PTR _new_array_size$[ebp]
	cdq
	idiv	DWORD PTR _new_allocate_object_step$[ebp]
	mov	DWORD PTR _tmp_mod_result$69400[ebp], edx

; 61   : 		if (0 == tmp_mod_result)

	cmp	DWORD PTR _tmp_mod_result$69400[ebp], 0
	jne	SHORT $LN15@resize_arr

; 62   : 		{
; 63   : 			new_array_buffer_size = new_array_size;

	mov	eax, DWORD PTR _new_array_size$[ebp]
	mov	DWORD PTR _new_array_buffer_size$[ebp], eax

; 64   : 		}
; 65   : 		else

	jmp	SHORT $LN14@resize_arr
$LN15@resize_arr:

; 66   : 		{
; 67   : 			new_array_buffer_size = new_array_size - tmp_mod_result + new_allocate_object_step;

	mov	eax, DWORD PTR _new_array_size$[ebp]
	sub	eax, DWORD PTR _tmp_mod_result$69400[ebp]
	add	eax, DWORD PTR _new_allocate_object_step$[ebp]
	mov	DWORD PTR _new_array_buffer_size$[ebp], eax
$LN14@resize_arr:

; 68   : 		}
; 69   : 
; 70   : 		if (new_array_buffer_size == current_array_buffer_size)

	mov	eax, DWORD PTR _current_array_buffer_size$[ebp]
	mov	ecx, DWORD PTR _new_array_buffer_size$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN13@resize_arr

; 71   : 		{
; 72   : 			return P_OK;

	xor	eax, eax
	jmp	$LN19@resize_arr
$LN13@resize_arr:

; 73   : 		}
; 74   : 	}
; 75   : 	else

	jmp	SHORT $LN12@resize_arr
$LN18@resize_arr:

; 76   : 	{
; 77   : 		if (new_array_size <= current_array_size)

	mov	eax, DWORD PTR _new_array_size$[ebp]
	cmp	eax, DWORD PTR _current_array_size$[ebp]
	jg	SHORT $LN11@resize_arr

; 78   : 		{
; 79   : 			return P_OK;

	xor	eax, eax
	jmp	$LN19@resize_arr
$LN11@resize_arr:

; 80   : 		}
; 81   : 
; 82   : 		array_buffer_size_val tmp_mod_result = new_array_size % new_allocate_object_step;

	mov	eax, DWORD PTR _new_array_size$[ebp]
	cdq
	idiv	DWORD PTR _new_allocate_object_step$[ebp]
	mov	DWORD PTR _tmp_mod_result$69406[ebp], edx

; 83   : 		if (0 == tmp_mod_result)

	cmp	DWORD PTR _tmp_mod_result$69406[ebp], 0
	jne	SHORT $LN10@resize_arr

; 84   : 		{
; 85   : 			new_array_buffer_size = new_array_size;

	mov	eax, DWORD PTR _new_array_size$[ebp]
	mov	DWORD PTR _new_array_buffer_size$[ebp], eax

; 86   : 		}
; 87   : 		else

	jmp	SHORT $LN9@resize_arr
$LN10@resize_arr:

; 88   : 		{
; 89   : 			new_array_buffer_size = new_array_size - tmp_mod_result + new_allocate_object_step;

	mov	eax, DWORD PTR _new_array_size$[ebp]
	sub	eax, DWORD PTR _tmp_mod_result$69406[ebp]
	add	eax, DWORD PTR _new_allocate_object_step$[ebp]
	mov	DWORD PTR _new_array_buffer_size$[ebp], eax
$LN9@resize_arr:

; 90   : 		}
; 91   : 
; 92   : 		if (new_array_buffer_size <= current_array_buffer_size)

	mov	eax, DWORD PTR _current_array_buffer_size$[ebp]
	mov	ecx, DWORD PTR _new_array_buffer_size$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jg	SHORT $LN12@resize_arr

; 93   : 		{
; 94   : 			return P_OK;

	xor	eax, eax
	jmp	$LN19@resize_arr
$LN12@resize_arr:

; 95   : 		}
; 96   : 	}
; 97   : 
; 98   : 	class_type* ptemp_new_allocate_object_buffer = allocate_object_t::allocate_objects(new_array_buffer_size);

	mov	eax, DWORD PTR _new_array_buffer_size$[ebp]
	push	eax
	call	?allocate_objects@?$pecker_simple_allocator@H@pecker_sdk@@SAPAHH@Z ; pecker_sdk::pecker_simple_allocator<int>::allocate_objects
	add	esp, 4
	mov	DWORD PTR _ptemp_new_allocate_object_buffer$[ebp], eax

; 99   : 	
; 100  : 	if (null != ptemp_new_allocate_object_buffer)

	cmp	DWORD PTR _ptemp_new_allocate_object_buffer$[ebp], 0
	je	SHORT $LN7@resize_arr

; 101  : 	{
; 102  : 		if (ARRAY_BOOLEAN_FLASE == bNew_allocate)

	movzx	eax, BYTE PTR _bNew_allocate$[ebp]
	test	eax, eax
	jne	SHORT $LN6@resize_arr

; 103  : 		{
; 104  : 			if (new_array_size > current_array_size)

	mov	eax, DWORD PTR _new_array_size$[ebp]
	cmp	eax, DWORD PTR _current_array_size$[ebp]
	jle	SHORT $LN5@resize_arr

; 105  : 			{
; 106  : 				new_array_size = current_array_size;

	mov	eax, DWORD PTR _current_array_size$[ebp]
	mov	DWORD PTR _new_array_size$[ebp], eax
$LN5@resize_arr:

; 107  : 			}
; 108  : 			for (array_index_val index=0; index < new_array_size;++index)

	mov	DWORD PTR _index$69414[ebp], 0
	jmp	SHORT $LN4@resize_arr
$LN3@resize_arr:
	mov	eax, DWORD PTR _index$69414[ebp]
	add	eax, 1
	mov	DWORD PTR _index$69414[ebp], eax
$LN4@resize_arr:
	mov	eax, DWORD PTR _index$69414[ebp]
	cmp	eax, DWORD PTR _new_array_size$[ebp]
	jge	SHORT $LN6@resize_arr

; 109  : 			{
; 110  : 				ptemp_new_allocate_object_buffer[index] = pArray_buffer[index];

	mov	eax, DWORD PTR _pArray_buffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$69414[ebp]
	mov	eax, DWORD PTR _ptemp_new_allocate_object_buffer$[ebp]
	mov	esi, DWORD PTR _index$69414[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [eax+edx*4], ecx

; 111  : 			}

	jmp	SHORT $LN3@resize_arr
$LN6@resize_arr:

; 112  : 		}
; 113  : 		allocate_object_t::deallocate_objects(pArray_buffer);

	mov	eax, DWORD PTR _pArray_buffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?deallocate_objects@?$pecker_simple_allocator@H@pecker_sdk@@SAXPAH@Z ; pecker_sdk::pecker_simple_allocator<int>::deallocate_objects
	add	esp, 4

; 114  : 		pArray_buffer = ptemp_new_allocate_object_buffer;

	mov	eax, DWORD PTR _pArray_buffer$[ebp]
	mov	ecx, DWORD PTR _ptemp_new_allocate_object_buffer$[ebp]
	mov	DWORD PTR [eax], ecx

; 115  : 		current_array_buffer_size = new_array_buffer_size;

	mov	eax, DWORD PTR _current_array_buffer_size$[ebp]
	mov	ecx, DWORD PTR _new_array_buffer_size$[ebp]
	mov	DWORD PTR [eax], ecx

; 116  : 		return P_OK;

	xor	eax, eax
	jmp	SHORT $LN19@resize_arr

; 117  : 	}
; 118  : 	else

	jmp	SHORT $LN1@resize_arr
$LN7@resize_arr:

; 119  : 	{
; 120  : 		return P_ERR;

	or	eax, -1
	jmp	SHORT $LN19@resize_arr
$LN1@resize_arr:

; 121  : 	}
; 122  : 
; 123  : 	return P_OK;

	xor	eax, eax
$LN19@resize_arr:

; 124  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$resize_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@YAJAAPAHHAAHHH_N2@Z ENDP ; pecker_sdk::resize_array<int,pecker_sdk::pecker_simple_allocator<int> >
_TEXT	ENDS
PUBLIC	?allocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAPAPAHH@Z ; pecker_sdk::pecker_simple_allocator<int *>::allocate_objects
PUBLIC	??$resize_array@PAHV?$pecker_simple_allocator@PAH@pecker_sdk@@@pecker_sdk@@YAJAAPAPAHHAAHHH_N2@Z ; pecker_sdk::resize_array<int *,pecker_sdk::pecker_simple_allocator<int *> >
PUBLIC	?deallocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAXPAPAH@Z ; pecker_sdk::pecker_simple_allocator<int *>::deallocate_objects
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$resize_array_pool@HV?$pecker_simple_allocator@PAH@pecker_sdk@@V?$pecker_simple_allocator@H@2@@pecker_sdk@@YAJAAPAPAHHHAAH1HHH_N2@Z
_TEXT	SEGMENT
_index$69483 = -176					; size = 4
_ptemp_new_allocate_object_pointer_buffer$69482 = -164	; size = 4
_tmp_allocate_size$69481 = -152				; size = 4
_index$69475 = -140					; size = 4
_index_new_column$69461 = -128				; size = 4
_index_new_row$69460 = -116				; size = 4
_index_old_column$69459 = -104				; size = 4
_index_old_row$69458 = -92				; size = 4
_index$69447 = -80					; size = 4
_ptemp_new_allocate_object_pointer_buffer$69445 = -68	; size = 4
_bis_allocate_object_fail$ = -53			; size = 1
_resize_result$ = -44					; size = 4
_index$69424 = -32					; size = 4
_new_buffer_pointer_size$ = -20				; size = 4
_tmp_mod_result$ = -8					; size = 4
_ppArray_buffer_pointer$ = 8				; size = 4
_current_array_size$ = 12				; size = 4
_current_array_allocate_object_step$ = 16		; size = 4
_current_array_buffer_pointer_size$ = 20		; size = 4
_current_array_buffer_pointer_buffer_size$ = 24		; size = 4
_new_array_size$ = 28					; size = 4
_new_allocate_object_step$ = 32				; size = 4
_new_array_buffer_pointer_allocate_object_step$ = 36	; size = 4
_bForce_release$ = 40					; size = 1
_bNew_allocate$ = 44					; size = 1
??$resize_array_pool@HV?$pecker_simple_allocator@PAH@pecker_sdk@@V?$pecker_simple_allocator@H@2@@pecker_sdk@@YAJAAPAPAHHHAAH1HHH_N2@Z PROC ; pecker_sdk::resize_array_pool<int,pecker_sdk::pecker_simple_allocator<int *>,pecker_sdk::pecker_simple_allocator<int> >, COMDAT

; 137  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 372				; 00000174H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-372]
	mov	ecx, 93					; 0000005dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 138  : 	array_buffer_size_val tmp_mod_result = new_array_size % new_allocate_object_step;

	mov	eax, DWORD PTR _new_array_size$[ebp]
	cdq
	idiv	DWORD PTR _new_allocate_object_step$[ebp]
	mov	DWORD PTR _tmp_mod_result$[ebp], edx

; 139  : 	array_buffer_size_val new_buffer_pointer_size = new_array_size / new_allocate_object_step;

	mov	eax, DWORD PTR _new_array_size$[ebp]
	cdq
	idiv	DWORD PTR _new_allocate_object_step$[ebp]
	mov	DWORD PTR _new_buffer_pointer_size$[ebp], eax

; 140  : 	if (tmp_mod_result > 0)

	cmp	DWORD PTR _tmp_mod_result$[ebp], 0
	jle	SHORT $LN48@resize_arr@2

; 141  : 	{
; 142  : 		++new_buffer_pointer_size;

	mov	eax, DWORD PTR _new_buffer_pointer_size$[ebp]
	add	eax, 1
	mov	DWORD PTR _new_buffer_pointer_size$[ebp], eax
$LN48@resize_arr@2:

; 143  : 	}
; 144  : 
; 145  : 	if (ARRAY_BOOLEAN_TRUE == bForce_release && 0 == new_array_size)

	movzx	eax, BYTE PTR _bForce_release$[ebp]
	cmp	eax, 1
	jne	SHORT $LN47@resize_arr@2
	cmp	DWORD PTR _new_array_size$[ebp], 0
	jne	SHORT $LN47@resize_arr@2

; 146  : 	{
; 147  : 		for (array_index_val index = new_buffer_pointer_size; index < current_array_buffer_pointer_size; ++index)

	mov	eax, DWORD PTR _new_buffer_pointer_size$[ebp]
	mov	DWORD PTR _index$69424[ebp], eax
	jmp	SHORT $LN46@resize_arr@2
$LN45@resize_arr@2:
	mov	eax, DWORD PTR _index$69424[ebp]
	add	eax, 1
	mov	DWORD PTR _index$69424[ebp], eax
$LN46@resize_arr@2:
	mov	eax, DWORD PTR _current_array_buffer_pointer_size$[ebp]
	mov	ecx, DWORD PTR _index$69424[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN44@resize_arr@2

; 148  : 		{
; 149  : 			allocate_object_t::deallocate_objects(ppArray_buffer_pointer[index]);

	mov	eax, DWORD PTR _ppArray_buffer_pointer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$69424[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	?deallocate_objects@?$pecker_simple_allocator@H@pecker_sdk@@SAXPAH@Z ; pecker_sdk::pecker_simple_allocator<int>::deallocate_objects
	add	esp, 4

; 150  : 			ppArray_buffer_pointer[index] = null;

	mov	eax, DWORD PTR _ppArray_buffer_pointer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$69424[ebp]
	mov	DWORD PTR [ecx+edx*4], 0

; 151  : 		}

	jmp	SHORT $LN45@resize_arr@2
$LN44@resize_arr@2:

; 152  : 		pointer_allocate_object_t::deallocate_objects(ppArray_buffer_pointer);

	mov	eax, DWORD PTR _ppArray_buffer_pointer$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?deallocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAXPAPAH@Z ; pecker_sdk::pecker_simple_allocator<int *>::deallocate_objects
	add	esp, 4

; 153  : 		ppArray_buffer_pointer = null;

	mov	eax, DWORD PTR _ppArray_buffer_pointer$[ebp]
	mov	DWORD PTR [eax], 0

; 154  : 		current_array_buffer_pointer_size = 0;

	mov	eax, DWORD PTR _current_array_buffer_pointer_size$[ebp]
	mov	DWORD PTR [eax], 0

; 155  : 		current_array_buffer_pointer_buffer_size = 0;

	mov	eax, DWORD PTR _current_array_buffer_pointer_buffer_size$[ebp]
	mov	DWORD PTR [eax], 0

; 156  : 		return P_OK;

	xor	eax, eax
	jmp	$LN49@resize_arr@2
$LN47@resize_arr@2:

; 157  : 	}
; 158  : 
; 159  : 	array_result resize_result = resize_array<class_type*, pointer_allocate_object_t>(ppArray_buffer_pointer,
; 160  : 		current_array_buffer_pointer_size,
; 161  : 		current_array_buffer_pointer_buffer_size,
; 162  : 		new_buffer_pointer_size,
; 163  : 		new_array_buffer_pointer_allocate_object_step,
; 164  : 		ARRAY_BOOLEAN_FLASE,
; 165  : 		ARRAY_BOOLEAN_FLASE);

	push	0
	push	0
	mov	eax, DWORD PTR _new_array_buffer_pointer_allocate_object_step$[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_buffer_pointer_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _current_array_buffer_pointer_buffer_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _current_array_buffer_pointer_size$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ppArray_buffer_pointer$[ebp]
	push	edx
	call	??$resize_array@PAHV?$pecker_simple_allocator@PAH@pecker_sdk@@@pecker_sdk@@YAJAAPAPAHHAAHHH_N2@Z ; pecker_sdk::resize_array<int *,pecker_sdk::pecker_simple_allocator<int *> >
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _resize_result$[ebp], eax

; 166  : 	
; 167  : 	if (P_OK != resize_result)

	cmp	DWORD PTR _resize_result$[ebp], 0
	je	SHORT $LN43@resize_arr@2

; 168  : 	{
; 169  : 		return resize_result;

	mov	eax, DWORD PTR _resize_result$[ebp]
	jmp	$LN49@resize_arr@2
$LN43@resize_arr@2:

; 170  : 	}
; 171  : 
; 172  : 	bool bis_allocate_object_fail = false;

	mov	BYTE PTR _bis_allocate_object_fail$[ebp], 0

; 173  : 
; 174  : 	if (new_allocate_object_step != current_array_allocate_object_step)

	mov	eax, DWORD PTR _new_allocate_object_step$[ebp]
	cmp	eax, DWORD PTR _current_array_allocate_object_step$[ebp]
	je	$LN42@resize_arr@2

; 175  : 	{
; 176  : 		class_type** ptemp_new_allocate_object_pointer_buffer = pointer_allocate_object_t::allocate_objects(new_buffer_pointer_size);

	mov	eax, DWORD PTR _new_buffer_pointer_size$[ebp]
	push	eax
	call	?allocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAPAPAHH@Z ; pecker_sdk::pecker_simple_allocator<int *>::allocate_objects
	add	esp, 4
	mov	DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69445[ebp], eax

; 177  : 		if (null == ptemp_new_allocate_object_pointer_buffer)

	cmp	DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69445[ebp], 0
	jne	SHORT $LN41@resize_arr@2

; 178  : 		{
; 179  : 			return P_ERR;

	or	eax, -1
	jmp	$LN49@resize_arr@2
$LN41@resize_arr@2:

; 180  : 		}
; 181  : 
; 182  : 		array_index_val index = 0;

	mov	DWORD PTR _index$69447[ebp], 0
	jmp	SHORT $LN40@resize_arr@2
$LN39@resize_arr@2:

; 183  : 		for (; index < new_buffer_pointer_size; ++index)

	mov	eax, DWORD PTR _index$69447[ebp]
	add	eax, 1
	mov	DWORD PTR _index$69447[ebp], eax
$LN40@resize_arr@2:
	mov	eax, DWORD PTR _index$69447[ebp]
	cmp	eax, DWORD PTR _new_buffer_pointer_size$[ebp]
	jge	SHORT $LN38@resize_arr@2

; 184  : 		{
; 185  : 			ptemp_new_allocate_object_pointer_buffer[index] = allocate_object_t::allocate_objects(new_allocate_object_step);

	mov	eax, DWORD PTR _new_allocate_object_step$[ebp]
	push	eax
	call	?allocate_objects@?$pecker_simple_allocator@H@pecker_sdk@@SAPAHH@Z ; pecker_sdk::pecker_simple_allocator<int>::allocate_objects
	add	esp, 4
	mov	ecx, DWORD PTR _index$69447[ebp]
	mov	edx, DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69445[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 186  : 			if (null == ptemp_new_allocate_object_pointer_buffer[index])

	mov	eax, DWORD PTR _index$69447[ebp]
	mov	ecx, DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69445[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN37@resize_arr@2

; 187  : 			{
; 188  : 				bis_allocate_object_fail = true;

	mov	BYTE PTR _bis_allocate_object_fail$[ebp], 1

; 189  : 				break;

	jmp	SHORT $LN38@resize_arr@2
$LN37@resize_arr@2:

; 190  : 			}
; 191  : 		}

	jmp	SHORT $LN39@resize_arr@2
$LN38@resize_arr@2:

; 192  : 		if (bis_allocate_object_fail)

	movzx	eax, BYTE PTR _bis_allocate_object_fail$[ebp]
	test	eax, eax
	je	SHORT $LN36@resize_arr@2
	jmp	SHORT $LN35@resize_arr@2
$LN34@resize_arr@2:

; 193  : 		{
; 194  : 			for (; index >=0; --index)

	mov	eax, DWORD PTR _index$69447[ebp]
	sub	eax, 1
	mov	DWORD PTR _index$69447[ebp], eax
$LN35@resize_arr@2:
	cmp	DWORD PTR _index$69447[ebp], 0
	jl	SHORT $LN33@resize_arr@2

; 195  : 			{
; 196  : 				allocate_object_t::deallocate_objects(ptemp_new_allocate_object_pointer_buffer[index]);

	mov	eax, DWORD PTR _index$69447[ebp]
	mov	ecx, DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69445[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?deallocate_objects@?$pecker_simple_allocator@H@pecker_sdk@@SAXPAH@Z ; pecker_sdk::pecker_simple_allocator<int>::deallocate_objects
	add	esp, 4

; 197  : 				ptemp_new_allocate_object_pointer_buffer[index] = null;

	mov	eax, DWORD PTR _index$69447[ebp]
	mov	ecx, DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69445[ebp]
	mov	DWORD PTR [ecx+eax*4], 0

; 198  : 			}

	jmp	SHORT $LN34@resize_arr@2
$LN33@resize_arr@2:

; 199  : 
; 200  : 			pointer_allocate_object_t::deallocate_objects(ptemp_new_allocate_object_pointer_buffer);

	mov	eax, DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69445[ebp]
	push	eax
	call	?deallocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAXPAPAH@Z ; pecker_sdk::pecker_simple_allocator<int *>::deallocate_objects
	add	esp, 4

; 201  : 			return P_ERR;

	or	eax, -1
	jmp	$LN49@resize_arr@2

; 202  : 		}
; 203  : 		else

	jmp	$LN32@resize_arr@2
$LN36@resize_arr@2:

; 204  : 		{
; 205  : 			if (new_array_size > current_array_size)

	mov	eax, DWORD PTR _new_array_size$[ebp]
	cmp	eax, DWORD PTR _current_array_size$[ebp]
	jle	SHORT $LN31@resize_arr@2

; 206  : 			{
; 207  : 				new_array_size = current_array_size;

	mov	eax, DWORD PTR _current_array_size$[ebp]
	mov	DWORD PTR _new_array_size$[ebp], eax
$LN31@resize_arr@2:

; 208  : 			}
; 209  : 
; 210  : 			array_index_val index_old_row = 0;

	mov	DWORD PTR _index_old_row$69458[ebp], 0

; 211  : 			array_index_val index_old_column = 0;

	mov	DWORD PTR _index_old_column$69459[ebp], 0

; 212  : 			array_index_val index_new_row = 0;

	mov	DWORD PTR _index_new_row$69460[ebp], 0

; 213  : 			array_index_val index_new_column = 0;

	mov	DWORD PTR _index_new_column$69461[ebp], 0

; 214  : 
; 215  : 			if (ARRAY_BOOLEAN_FLASE == bNew_allocate)

	movzx	eax, BYTE PTR _bNew_allocate$[ebp]
	test	eax, eax
	jne	SHORT $LN30@resize_arr@2

; 216  : 			{
; 217  : 				for (index = 0;index<new_array_size;++index)

	mov	DWORD PTR _index$69447[ebp], 0
	jmp	SHORT $LN29@resize_arr@2
$LN28@resize_arr@2:
	mov	eax, DWORD PTR _index$69447[ebp]
	add	eax, 1
	mov	DWORD PTR _index$69447[ebp], eax
$LN29@resize_arr@2:
	mov	eax, DWORD PTR _index$69447[ebp]
	cmp	eax, DWORD PTR _new_array_size$[ebp]
	jge	SHORT $LN30@resize_arr@2

; 218  : 				{
; 219  : 					ptemp_new_allocate_object_pointer_buffer[index_new_row][index_new_column] = ppArray_buffer_pointer[index_old_row][index_old_column];

	mov	eax, DWORD PTR _ppArray_buffer_pointer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index_old_row$69458[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _index_new_row$69460[ebp]
	mov	edx, DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69445[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _index_new_column$69461[ebp]
	mov	esi, DWORD PTR _index_old_column$69459[ebp]
	mov	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [ecx+edx*4], eax

; 220  : 					++index_new_column;

	mov	eax, DWORD PTR _index_new_column$69461[ebp]
	add	eax, 1
	mov	DWORD PTR _index_new_column$69461[ebp], eax

; 221  : 					++index_old_column;

	mov	eax, DWORD PTR _index_old_column$69459[ebp]
	add	eax, 1
	mov	DWORD PTR _index_old_column$69459[ebp], eax

; 222  : 					if (current_array_allocate_object_step == index_old_column)

	mov	eax, DWORD PTR _current_array_allocate_object_step$[ebp]
	cmp	eax, DWORD PTR _index_old_column$69459[ebp]
	jne	SHORT $LN26@resize_arr@2

; 223  : 					{
; 224  : 						index_old_column = 0;

	mov	DWORD PTR _index_old_column$69459[ebp], 0

; 225  : 						++index_old_row;

	mov	eax, DWORD PTR _index_old_row$69458[ebp]
	add	eax, 1
	mov	DWORD PTR _index_old_row$69458[ebp], eax
$LN26@resize_arr@2:

; 226  : 					}
; 227  : 					if (new_allocate_object_step == index_new_column)

	mov	eax, DWORD PTR _new_allocate_object_step$[ebp]
	cmp	eax, DWORD PTR _index_new_column$69461[ebp]
	jne	SHORT $LN25@resize_arr@2

; 228  : 					{
; 229  : 						index_new_column = 0;

	mov	DWORD PTR _index_new_column$69461[ebp], 0

; 230  : 						++index_new_row;

	mov	eax, DWORD PTR _index_new_row$69460[ebp]
	add	eax, 1
	mov	DWORD PTR _index_new_row$69460[ebp], eax
$LN25@resize_arr@2:

; 231  : 					}
; 232  : 				}

	jmp	SHORT $LN28@resize_arr@2
$LN30@resize_arr@2:

; 233  : 			}
; 234  : 
; 235  : 
; 236  : 			for (index = 0;index<new_buffer_pointer_size;++index)

	mov	DWORD PTR _index$69447[ebp], 0
	jmp	SHORT $LN24@resize_arr@2
$LN23@resize_arr@2:
	mov	eax, DWORD PTR _index$69447[ebp]
	add	eax, 1
	mov	DWORD PTR _index$69447[ebp], eax
$LN24@resize_arr@2:
	mov	eax, DWORD PTR _index$69447[ebp]
	cmp	eax, DWORD PTR _new_buffer_pointer_size$[ebp]
	jge	SHORT $LN22@resize_arr@2

; 237  : 			{
; 238  : 				ppArray_buffer_pointer[index] = ptemp_new_allocate_object_pointer_buffer[index];

	mov	eax, DWORD PTR _ppArray_buffer_pointer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$69447[ebp]
	mov	eax, DWORD PTR _index$69447[ebp]
	mov	esi, DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69445[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [ecx+edx*4], eax

; 239  : 			}

	jmp	SHORT $LN23@resize_arr@2
$LN22@resize_arr@2:

; 240  : 
; 241  : 			pointer_allocate_object_t::deallocate_objects(ptemp_new_allocate_object_pointer_buffer);

	mov	eax, DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69445[ebp]
	push	eax
	call	?deallocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAXPAPAH@Z ; pecker_sdk::pecker_simple_allocator<int *>::deallocate_objects
	add	esp, 4
$LN32@resize_arr@2:

; 242  : 		}
; 243  : 
; 244  : 		current_array_buffer_pointer_size = new_buffer_pointer_size;

	mov	eax, DWORD PTR _current_array_buffer_pointer_size$[ebp]
	mov	ecx, DWORD PTR _new_buffer_pointer_size$[ebp]
	mov	DWORD PTR [eax], ecx

; 245  : 		return P_OK;

	xor	eax, eax
	jmp	$LN49@resize_arr@2
$LN42@resize_arr@2:

; 246  : 	}
; 247  : 
; 248  : 
; 249  : 
; 250  : 	if (new_buffer_pointer_size == current_array_buffer_pointer_size)

	mov	eax, DWORD PTR _current_array_buffer_pointer_size$[ebp]
	mov	ecx, DWORD PTR _new_buffer_pointer_size$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN21@resize_arr@2

; 251  : 	{
; 252  : 		return P_OK;

	xor	eax, eax
	jmp	$LN49@resize_arr@2
	jmp	$LN20@resize_arr@2
$LN21@resize_arr@2:

; 253  : 	}
; 254  : 	else if (new_buffer_pointer_size < current_array_buffer_pointer_size)

	mov	eax, DWORD PTR _current_array_buffer_pointer_size$[ebp]
	mov	ecx, DWORD PTR _new_buffer_pointer_size$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN19@resize_arr@2

; 255  : 	{
; 256  : 		if (ARRAY_BOOLEAN_TRUE == bForce_release)

	movzx	eax, BYTE PTR _bForce_release$[ebp]
	cmp	eax, 1
	jne	SHORT $LN18@resize_arr@2

; 257  : 		{
; 258  : 			for (array_index_val index = new_buffer_pointer_size; index < current_array_buffer_pointer_size; ++index)

	mov	eax, DWORD PTR _new_buffer_pointer_size$[ebp]
	mov	DWORD PTR _index$69475[ebp], eax
	jmp	SHORT $LN17@resize_arr@2
$LN16@resize_arr@2:
	mov	eax, DWORD PTR _index$69475[ebp]
	add	eax, 1
	mov	DWORD PTR _index$69475[ebp], eax
$LN17@resize_arr@2:
	mov	eax, DWORD PTR _current_array_buffer_pointer_size$[ebp]
	mov	ecx, DWORD PTR _index$69475[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN18@resize_arr@2

; 259  : 			{
; 260  : 				allocate_object_t::deallocate_objects(ppArray_buffer_pointer[index]);

	mov	eax, DWORD PTR _ppArray_buffer_pointer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$69475[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	?deallocate_objects@?$pecker_simple_allocator@H@pecker_sdk@@SAXPAH@Z ; pecker_sdk::pecker_simple_allocator<int>::deallocate_objects
	add	esp, 4

; 261  : 				ppArray_buffer_pointer[index] = null;

	mov	eax, DWORD PTR _ppArray_buffer_pointer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$69475[ebp]
	mov	DWORD PTR [ecx+edx*4], 0

; 262  : 			}

	jmp	SHORT $LN16@resize_arr@2
$LN18@resize_arr@2:

; 263  : 
; 264  : 		}
; 265  : 		
; 266  : 			
; 267  : 		current_array_buffer_pointer_size = new_buffer_pointer_size;

	mov	eax, DWORD PTR _current_array_buffer_pointer_size$[ebp]
	mov	ecx, DWORD PTR _new_buffer_pointer_size$[ebp]
	mov	DWORD PTR [eax], ecx

; 268  : 		return P_OK;

	xor	eax, eax
	jmp	$LN49@resize_arr@2
	jmp	$LN20@resize_arr@2
$LN19@resize_arr@2:

; 269  : 	}
; 270  : 	else if (new_buffer_pointer_size > current_array_buffer_pointer_size)

	mov	eax, DWORD PTR _current_array_buffer_pointer_size$[ebp]
	mov	ecx, DWORD PTR _new_buffer_pointer_size$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jle	$LN20@resize_arr@2

; 271  : 	{
; 272  : 		array_index_val tmp_allocate_size = new_buffer_pointer_size -  current_array_buffer_pointer_size;

	mov	eax, DWORD PTR _current_array_buffer_pointer_size$[ebp]
	mov	ecx, DWORD PTR _new_buffer_pointer_size$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tmp_allocate_size$69481[ebp], ecx

; 273  : 		class_type** ptemp_new_allocate_object_pointer_buffer = pointer_allocate_object_t::allocate_objects(tmp_allocate_size);

	mov	eax, DWORD PTR _tmp_allocate_size$69481[ebp]
	push	eax
	call	?allocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAPAPAHH@Z ; pecker_sdk::pecker_simple_allocator<int *>::allocate_objects
	add	esp, 4
	mov	DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69482[ebp], eax

; 274  : 		array_index_val index = 0;

	mov	DWORD PTR _index$69483[ebp], 0
	jmp	SHORT $LN12@resize_arr@2
$LN11@resize_arr@2:

; 275  : 		for (; index < tmp_allocate_size; ++index)

	mov	eax, DWORD PTR _index$69483[ebp]
	add	eax, 1
	mov	DWORD PTR _index$69483[ebp], eax
$LN12@resize_arr@2:
	mov	eax, DWORD PTR _index$69483[ebp]
	cmp	eax, DWORD PTR _tmp_allocate_size$69481[ebp]
	jge	SHORT $LN10@resize_arr@2

; 276  : 		{
; 277  : 			ptemp_new_allocate_object_pointer_buffer[index] = allocate_object_t::allocate_objects(new_allocate_object_step);

	mov	eax, DWORD PTR _new_allocate_object_step$[ebp]
	push	eax
	call	?allocate_objects@?$pecker_simple_allocator@H@pecker_sdk@@SAPAHH@Z ; pecker_sdk::pecker_simple_allocator<int>::allocate_objects
	add	esp, 4
	mov	ecx, DWORD PTR _index$69483[ebp]
	mov	edx, DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69482[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 278  : 			if (null == ptemp_new_allocate_object_pointer_buffer[index])

	mov	eax, DWORD PTR _index$69483[ebp]
	mov	ecx, DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69482[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN9@resize_arr@2

; 279  : 			{
; 280  : 				bis_allocate_object_fail = true;

	mov	BYTE PTR _bis_allocate_object_fail$[ebp], 1

; 281  : 				break;

	jmp	SHORT $LN10@resize_arr@2
$LN9@resize_arr@2:

; 282  : 			}
; 283  : 		}

	jmp	SHORT $LN11@resize_arr@2
$LN10@resize_arr@2:

; 284  : 		if (bis_allocate_object_fail)

	movzx	eax, BYTE PTR _bis_allocate_object_fail$[ebp]
	test	eax, eax
	je	SHORT $LN8@resize_arr@2
	jmp	SHORT $LN7@resize_arr@2
$LN6@resize_arr@2:

; 285  : 		{
; 286  : 			for (; index >=0; --index)

	mov	eax, DWORD PTR _index$69483[ebp]
	sub	eax, 1
	mov	DWORD PTR _index$69483[ebp], eax
$LN7@resize_arr@2:
	cmp	DWORD PTR _index$69483[ebp], 0
	jl	SHORT $LN5@resize_arr@2

; 287  : 			{
; 288  : 				allocate_object_t::deallocate_objects(ptemp_new_allocate_object_pointer_buffer[index]);

	mov	eax, DWORD PTR _index$69483[ebp]
	mov	ecx, DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69482[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	?deallocate_objects@?$pecker_simple_allocator@H@pecker_sdk@@SAXPAH@Z ; pecker_sdk::pecker_simple_allocator<int>::deallocate_objects
	add	esp, 4

; 289  : 				ptemp_new_allocate_object_pointer_buffer[index] = null;

	mov	eax, DWORD PTR _index$69483[ebp]
	mov	ecx, DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69482[ebp]
	mov	DWORD PTR [ecx+eax*4], 0

; 290  : 			}

	jmp	SHORT $LN6@resize_arr@2
$LN5@resize_arr@2:

; 291  : 
; 292  : 			pointer_allocate_object_t::deallocate_objects(ptemp_new_allocate_object_pointer_buffer);

	mov	eax, DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69482[ebp]
	push	eax
	call	?deallocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAXPAPAH@Z ; pecker_sdk::pecker_simple_allocator<int *>::deallocate_objects
	add	esp, 4

; 293  : 			ptemp_new_allocate_object_pointer_buffer = null;

	mov	DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69482[ebp], 0

; 294  : 			return P_ERR;

	or	eax, -1
	jmp	SHORT $LN49@resize_arr@2

; 295  : 		}
; 296  : 		else

	jmp	SHORT $LN4@resize_arr@2
$LN8@resize_arr@2:

; 297  : 		{
; 298  : 			index = current_array_buffer_pointer_size;

	mov	eax, DWORD PTR _current_array_buffer_pointer_size$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _index$69483[ebp], ecx
	jmp	SHORT $LN3@resize_arr@2
$LN2@resize_arr@2:

; 299  : 			for (; index < new_buffer_pointer_size; ++index)

	mov	eax, DWORD PTR _index$69483[ebp]
	add	eax, 1
	mov	DWORD PTR _index$69483[ebp], eax
$LN3@resize_arr@2:
	mov	eax, DWORD PTR _index$69483[ebp]
	cmp	eax, DWORD PTR _new_buffer_pointer_size$[ebp]
	jge	SHORT $LN4@resize_arr@2

; 300  : 			{
; 301  : 				ppArray_buffer_pointer[index] = ptemp_new_allocate_object_pointer_buffer[index-current_array_buffer_pointer_size];

	mov	eax, DWORD PTR _current_array_buffer_pointer_size$[ebp]
	mov	ecx, DWORD PTR _index$69483[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ppArray_buffer_pointer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _index$69483[ebp]
	mov	esi, DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69482[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [eax+edx*4], ecx

; 302  : 			}

	jmp	SHORT $LN2@resize_arr@2
$LN4@resize_arr@2:

; 303  : 		}
; 304  : 		pointer_allocate_object_t::deallocate_objects(ptemp_new_allocate_object_pointer_buffer);

	mov	eax, DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69482[ebp]
	push	eax
	call	?deallocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAXPAPAH@Z ; pecker_sdk::pecker_simple_allocator<int *>::deallocate_objects
	add	esp, 4

; 305  : 		ptemp_new_allocate_object_pointer_buffer = null;

	mov	DWORD PTR _ptemp_new_allocate_object_pointer_buffer$69482[ebp], 0
$LN20@resize_arr@2:

; 306  : 	}
; 307  : 
; 308  : 	current_array_buffer_pointer_size = new_buffer_pointer_size;

	mov	eax, DWORD PTR _current_array_buffer_pointer_size$[ebp]
	mov	ecx, DWORD PTR _new_buffer_pointer_size$[ebp]
	mov	DWORD PTR [eax], ecx

; 309  : 	return P_OK;

	xor	eax, eax
$LN49@resize_arr@2:

; 310  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 372				; 00000174H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$resize_array_pool@HV?$pecker_simple_allocator@PAH@pecker_sdk@@V?$pecker_simple_allocator@H@2@@pecker_sdk@@YAJAAPAPAHHHAAH1HHH_N2@Z ENDP ; pecker_sdk::resize_array_pool<int,pecker_sdk::pecker_simple_allocator<int *>,pecker_sdk::pecker_simple_allocator<int> >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_array_iterator.h
_TEXT	ENDS
;	COMDAT ??0?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_other$ = 8						; size = 4
??0?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >, COMDAT
; _this$ = ecx

; 33   : 	pecker_array_iterator(const _Array_iterator& other)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@6B@

; 34   : 	{
; 35   : 		copy(&other);

	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::copy

; 36   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?compare@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z
_TEXT	SEGMENT
_iterator1$ = 8						; size = 4
_iterator2$ = 12					; size = 4
?compare@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::compare, COMDAT

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 156  : 		return (iterator1._M_current_index - iterator2._M_current_index);

	mov	eax, DWORD PTR _iterator1$[ebp]
	mov	ecx, DWORD PTR _iterator2$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+8]

; 157  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?compare@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::compare
_TEXT	ENDS
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\native\pecker_allocator.h
;	COMDAT ?allocate_objects@?$pecker_simple_allocator@H@pecker_sdk@@SAPAHH@Z
_TEXT	SEGMENT
$T70319 = -200						; size = 4
_nSize$ = 8						; size = 4
?allocate_objects@?$pecker_simple_allocator@H@pecker_sdk@@SAPAHH@Z PROC ; pecker_sdk::pecker_simple_allocator<int>::allocate_objects, COMDAT

; 45   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 46   : 			if(nSize > 0)

	cmp	DWORD PTR _nSize$[ebp], 0
	jle	SHORT $LN1@allocate_o

; 47   : 			{
; 48   : 				return new className[nSize];

	xor	ecx, ecx
	mov	eax, DWORD PTR _nSize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T70319[ebp], eax
	mov	eax, DWORD PTR $T70319[ebp]
	jmp	SHORT $LN2@allocate_o
$LN1@allocate_o:

; 49   : 			}
; 50   : 			return null;

	xor	eax, eax
$LN2@allocate_o:

; 51   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?allocate_objects@?$pecker_simple_allocator@H@pecker_sdk@@SAPAHH@Z ENDP ; pecker_sdk::pecker_simple_allocator<int>::allocate_objects
_TEXT	ENDS
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?deallocate_objects@?$pecker_simple_allocator@H@pecker_sdk@@SAXPAH@Z
_TEXT	SEGMENT
$T70322 = -200						; size = 4
_pDelObject$ = 8					; size = 4
?deallocate_objects@?$pecker_simple_allocator@H@pecker_sdk@@SAXPAH@Z PROC ; pecker_sdk::pecker_simple_allocator<int>::deallocate_objects, COMDAT

; 54   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 55   : 			if(null != pDelObject)

	cmp	DWORD PTR _pDelObject$[ebp], 0
	je	SHORT $LN2@deallocate

; 56   : 			{
; 57   : 				delete [] pDelObject;

	mov	eax, DWORD PTR _pDelObject$[ebp]
	mov	DWORD PTR $T70322[ebp], eax
	mov	ecx, DWORD PTR $T70322[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@deallocate:

; 58   : 			}
; 59   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate_objects@?$pecker_simple_allocator@H@pecker_sdk@@SAXPAH@Z ENDP ; pecker_sdk::pecker_simple_allocator<int>::deallocate_objects
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_array_iterator.h
_TEXT	ENDS
;	COMDAT ??0?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_other$ = 8						; size = 4
??0?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >, COMDAT
; _this$ = ecx

; 33   : 	pecker_array_iterator(const _Array_iterator& other)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@6B@

; 34   : 	{
; 35   : 		copy(&other);

	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::copy

; 36   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?compare@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z
_TEXT	SEGMENT
_iterator1$ = 8						; size = 4
_iterator2$ = 12					; size = 4
?compare@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::compare, COMDAT

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 156  : 		return (iterator1._M_current_index - iterator2._M_current_index);

	mov	eax, DWORD PTR _iterator1$[ebp]
	mov	ecx, DWORD PTR _iterator2$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+8]

; 157  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?compare@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::compare
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\native\pecker_allocator.h
_TEXT	ENDS
;	COMDAT ?allocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAPAPAHH@Z
_TEXT	SEGMENT
$T70329 = -200						; size = 4
_nSize$ = 8						; size = 4
?allocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAPAPAHH@Z PROC ; pecker_sdk::pecker_simple_allocator<int *>::allocate_objects, COMDAT

; 45   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 46   : 			if(nSize > 0)

	cmp	DWORD PTR _nSize$[ebp], 0
	jle	SHORT $LN1@allocate_o@2

; 47   : 			{
; 48   : 				return new className[nSize];

	xor	ecx, ecx
	mov	eax, DWORD PTR _nSize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T70329[ebp], eax
	mov	eax, DWORD PTR $T70329[ebp]
	jmp	SHORT $LN2@allocate_o@2
$LN1@allocate_o@2:

; 49   : 			}
; 50   : 			return null;

	xor	eax, eax
$LN2@allocate_o@2:

; 51   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?allocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAPAPAHH@Z ENDP ; pecker_sdk::pecker_simple_allocator<int *>::allocate_objects
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?deallocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAXPAPAH@Z
_TEXT	SEGMENT
$T70332 = -200						; size = 4
_pDelObject$ = 8					; size = 4
?deallocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAXPAPAH@Z PROC ; pecker_sdk::pecker_simple_allocator<int *>::deallocate_objects, COMDAT

; 54   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 55   : 			if(null != pDelObject)

	cmp	DWORD PTR _pDelObject$[ebp], 0
	je	SHORT $LN2@deallocate@2

; 56   : 			{
; 57   : 				delete [] pDelObject;

	mov	eax, DWORD PTR _pDelObject$[ebp]
	mov	DWORD PTR $T70332[ebp], eax
	mov	ecx, DWORD PTR $T70332[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@deallocate@2:

; 58   : 			}
; 59   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAXPAPAH@Z ENDP ; pecker_sdk::pecker_simple_allocator<int *>::deallocate_objects
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_array_iterator.h
_TEXT	ENDS
;	COMDAT ??0?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_other$ = 8						; size = 4
??0?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >, COMDAT
; _this$ = ecx

; 33   : 	pecker_array_iterator(const _Array_iterator& other)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@6B@

; 34   : 	{
; 35   : 		copy(&other);

	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@UAEJPBV12@@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::copy

; 36   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@QAE@ABV01@@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?compare@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z
_TEXT	SEGMENT
_iterator1$ = 8						; size = 4
_iterator2$ = 12					; size = 4
?compare@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z PROC ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::compare, COMDAT

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 156  : 		return (iterator1._M_current_index - iterator2._M_current_index);

	mov	eax, DWORD PTR _iterator1$[ebp]
	mov	ecx, DWORD PTR _iterator2$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+8]

; 157  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?compare@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ENDP ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::compare
_TEXT	ENDS
PUBLIC	?swap_value@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@0@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::swap_value
PUBLIC	?compare@?$pecker_value_compare@H@pecker_sdk@@SAHABH0@Z ; pecker_sdk::pecker_value_compare<int>::compare
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_array_algorithm.h
;	COMDAT ??$increment_order_partition@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@AAV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@11@Z
_TEXT	SEGMENT
_clip_item$ = -44					; size = 4
_pitem$ = -32						; size = 4
_pitem_low$ = -20					; size = 4
_pitem_high$ = -8					; size = 4
_array$ = 8						; size = 4
_iterator_low$ = 12					; size = 4
_iterator_high$ = 16					; size = 4
_iterator_out$ = 20					; size = 4
??$increment_order_partition@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@AAV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@11@Z PROC ; pecker_sdk::increment_order_partition<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > > >, COMDAT

; 318  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 319  : 	const item_type* pitem_high = null;

	mov	DWORD PTR _pitem_high$[ebp], 0

; 320  : 	const item_type* pitem_low = null;

	mov	DWORD PTR _pitem_low$[ebp], 0

; 321  : 	const item_type* pitem = array.get_at(&iterator_low);

	mov	eax, DWORD PTR _iterator_low$[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
	mov	DWORD PTR _pitem$[ebp], eax

; 322  : 	if (null == pitem)

	cmp	DWORD PTR _pitem$[ebp], 0
	jne	SHORT $LN13@increment_

; 323  : 	{
; 324  : 		return P_ERR;

	or	eax, -1
	jmp	$LN14@increment_
$LN13@increment_:

; 325  : 	}
; 326  : 	item_type clip_item = *pitem;

	mov	eax, DWORD PTR _pitem$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _clip_item$[ebp], ecx

; 327  : 
; 328  : 	pitem_high =  array.get_at(&iterator_high);

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
	mov	DWORD PTR _pitem_high$[ebp], eax

; 329  : 	if (null == pitem_high)

	cmp	DWORD PTR _pitem_high$[ebp], 0
	jne	SHORT $LN12@increment_

; 330  : 	{
; 331  : 		return P_ERR;

	or	eax, -1
	jmp	$LN14@increment_
$LN12@increment_:

; 332  : 	}
; 333  : 
; 334  : 	pitem_low =  array.get_at(&iterator_low);

	mov	eax, DWORD PTR _iterator_low$[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
	mov	DWORD PTR _pitem_low$[ebp], eax

; 335  : 	if (null == pitem_low)

	cmp	DWORD PTR _pitem_low$[ebp], 0
	jne	SHORT $LN10@increment_

; 336  : 	{
; 337  : 		return P_ERR;

	or	eax, -1
	jmp	$LN14@increment_
$LN10@increment_:

; 338  : 	}
; 339  : 
; 340  : 	while (0 != _Array_iterator::compare(iterator_low,iterator_high) )

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	call	?compare@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::compare
	add	esp, 8
	test	eax, eax
	je	$LN9@increment_
$LN8@increment_:

; 341  : 	{
; 342  : 		while (0 != _Array_iterator::compare(iterator_low,iterator_high) && compare_t::compare(*pitem_high,clip_item) >= 0)

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	call	?compare@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::compare
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@increment_
	lea	eax, DWORD PTR _clip_item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pitem_high$[ebp]
	push	ecx
	call	?compare@?$pecker_value_compare@H@pecker_sdk@@SAHABH0@Z ; pecker_sdk::pecker_value_compare<int>::compare
	add	esp, 8
	test	eax, eax
	jl	SHORT $LN7@increment_

; 343  : 		{
; 344  : 			iterator_high.decrement();

	mov	eax, DWORD PTR _iterator_high$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _iterator_high$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 345  : 			pitem_high =  array.get_at(&iterator_high);

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
	mov	DWORD PTR _pitem_high$[ebp], eax

; 346  : 			if (null == pitem_high)

	cmp	DWORD PTR _pitem_high$[ebp], 0
	jne	SHORT $LN6@increment_

; 347  : 			{
; 348  : 				return P_ERR;

	or	eax, -1
	jmp	$LN14@increment_
$LN6@increment_:

; 349  : 			}
; 350  : 		}

	jmp	SHORT $LN8@increment_
$LN7@increment_:

; 351  : 
; 352  : 		//if (P_OK != swap< item_type,_Array_container , _Array_iterator >(array,iterator_low,iterator_high))
; 353  : 		if (P_OK != array.swap_value(&iterator_low,&iterator_high))

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?swap_value@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@0@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::swap_value
	test	eax, eax
	je	SHORT $LN4@increment_

; 354  : 		{
; 355  : 			return P_ERR;

	or	eax, -1
	jmp	$LN14@increment_
$LN4@increment_:

; 356  : 		}
; 357  : 
; 358  : 		while (0 != _Array_iterator::compare(iterator_low,iterator_high) && compare_t::compare(*pitem_low,clip_item) <= 0)

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	call	?compare@?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > >::compare
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@increment_
	lea	eax, DWORD PTR _clip_item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pitem_low$[ebp]
	push	ecx
	call	?compare@?$pecker_value_compare@H@pecker_sdk@@SAHABH0@Z ; pecker_sdk::pecker_value_compare<int>::compare
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN3@increment_

; 359  : 		{
; 360  : 			iterator_low.increment();

	mov	eax, DWORD PTR _iterator_low$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 361  : 			pitem_low =  array.get_at(&iterator_low);

	mov	eax, DWORD PTR _iterator_low$[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_at
	mov	DWORD PTR _pitem_low$[ebp], eax

; 362  : 			if (null == pitem_high)

	cmp	DWORD PTR _pitem_high$[ebp], 0
	jne	SHORT $LN2@increment_

; 363  : 			{
; 364  : 				return P_ERR;

	or	eax, -1
	jmp	SHORT $LN14@increment_
$LN2@increment_:

; 365  : 			}
; 366  : 		}

	jmp	SHORT $LN4@increment_
$LN3@increment_:

; 367  : 
; 368  : 		//if (P_OK != swap< item_type,_Array_container , _Array_iterator >(array,iterator_low,iterator_high))
; 369  : 		if (P_OK != array.swap_value(&iterator_low,&iterator_high))

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?swap_value@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@0@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::swap_value
	test	eax, eax
	je	SHORT $LN1@increment_

; 370  : 		{
; 371  : 			return P_ERR;

	or	eax, -1
	jmp	SHORT $LN14@increment_
$LN1@increment_:

; 372  : 		}
; 373  : 
; 374  : 	}

	jmp	$LN10@increment_
$LN9@increment_:

; 375  : 	iterator_out.copy(&iterator_low);

	mov	esi, esp
	mov	eax, DWORD PTR _iterator_low$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_out$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iterator_out$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 376  : 	return P_OK;

	xor	eax, eax
$LN14@increment_:

; 377  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@increment_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@increment_:
	DD	1
	DD	$LN17@increment_
$LN17@increment_:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN16@increment_
$LN16@increment_:
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
??$increment_order_partition@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@2@V?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@0@AAV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@0@11@Z ENDP ; pecker_sdk::increment_order_partition<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> > > >
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_value_compare.h
_TEXT	ENDS
;	COMDAT ?compare@?$pecker_value_compare@H@pecker_sdk@@SAHABH0@Z
_TEXT	SEGMENT
_value1$ = 8						; size = 4
_value2$ = 12						; size = 4
?compare@?$pecker_value_compare@H@pecker_sdk@@SAHABH0@Z PROC ; pecker_sdk::pecker_value_compare<int>::compare, COMDAT

; 108  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 109  : 	return (value1 - value2);

	mov	eax, DWORD PTR _value1$[ebp]
	mov	ecx, DWORD PTR _value2$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]

; 110  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?compare@?$pecker_value_compare@H@pecker_sdk@@SAHABH0@Z ENDP ; pecker_sdk::pecker_value_compare<int>::compare
_TEXT	ENDS
PUBLIC	?swap_value@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@0@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::swap_value
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_array_algorithm.h
;	COMDAT ??$increment_order_partition@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@AAV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@11@Z
_TEXT	SEGMENT
_clip_item$ = -44					; size = 4
_pitem$ = -32						; size = 4
_pitem_low$ = -20					; size = 4
_pitem_high$ = -8					; size = 4
_array$ = 8						; size = 4
_iterator_low$ = 12					; size = 4
_iterator_high$ = 16					; size = 4
_iterator_out$ = 20					; size = 4
??$increment_order_partition@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@AAV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@11@Z PROC ; pecker_sdk::increment_order_partition<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > > >, COMDAT

; 318  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 319  : 	const item_type* pitem_high = null;

	mov	DWORD PTR _pitem_high$[ebp], 0

; 320  : 	const item_type* pitem_low = null;

	mov	DWORD PTR _pitem_low$[ebp], 0

; 321  : 	const item_type* pitem = array.get_at(&iterator_low);

	mov	eax, DWORD PTR _iterator_low$[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
	mov	DWORD PTR _pitem$[ebp], eax

; 322  : 	if (null == pitem)

	cmp	DWORD PTR _pitem$[ebp], 0
	jne	SHORT $LN13@increment_@2

; 323  : 	{
; 324  : 		return P_ERR;

	or	eax, -1
	jmp	$LN14@increment_@2
$LN13@increment_@2:

; 325  : 	}
; 326  : 	item_type clip_item = *pitem;

	mov	eax, DWORD PTR _pitem$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _clip_item$[ebp], ecx

; 327  : 
; 328  : 	pitem_high =  array.get_at(&iterator_high);

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
	mov	DWORD PTR _pitem_high$[ebp], eax

; 329  : 	if (null == pitem_high)

	cmp	DWORD PTR _pitem_high$[ebp], 0
	jne	SHORT $LN12@increment_@2

; 330  : 	{
; 331  : 		return P_ERR;

	or	eax, -1
	jmp	$LN14@increment_@2
$LN12@increment_@2:

; 332  : 	}
; 333  : 
; 334  : 	pitem_low =  array.get_at(&iterator_low);

	mov	eax, DWORD PTR _iterator_low$[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
	mov	DWORD PTR _pitem_low$[ebp], eax

; 335  : 	if (null == pitem_low)

	cmp	DWORD PTR _pitem_low$[ebp], 0
	jne	SHORT $LN10@increment_@2

; 336  : 	{
; 337  : 		return P_ERR;

	or	eax, -1
	jmp	$LN14@increment_@2
$LN10@increment_@2:

; 338  : 	}
; 339  : 
; 340  : 	while (0 != _Array_iterator::compare(iterator_low,iterator_high) )

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	call	?compare@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::compare
	add	esp, 8
	test	eax, eax
	je	$LN9@increment_@2
$LN8@increment_@2:

; 341  : 	{
; 342  : 		while (0 != _Array_iterator::compare(iterator_low,iterator_high) && compare_t::compare(*pitem_high,clip_item) >= 0)

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	call	?compare@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::compare
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@increment_@2
	lea	eax, DWORD PTR _clip_item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pitem_high$[ebp]
	push	ecx
	call	?compare@?$pecker_value_compare@H@pecker_sdk@@SAHABH0@Z ; pecker_sdk::pecker_value_compare<int>::compare
	add	esp, 8
	test	eax, eax
	jl	SHORT $LN7@increment_@2

; 343  : 		{
; 344  : 			iterator_high.decrement();

	mov	eax, DWORD PTR _iterator_high$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _iterator_high$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 345  : 			pitem_high =  array.get_at(&iterator_high);

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
	mov	DWORD PTR _pitem_high$[ebp], eax

; 346  : 			if (null == pitem_high)

	cmp	DWORD PTR _pitem_high$[ebp], 0
	jne	SHORT $LN6@increment_@2

; 347  : 			{
; 348  : 				return P_ERR;

	or	eax, -1
	jmp	$LN14@increment_@2
$LN6@increment_@2:

; 349  : 			}
; 350  : 		}

	jmp	SHORT $LN8@increment_@2
$LN7@increment_@2:

; 351  : 
; 352  : 		//if (P_OK != swap< item_type,_Array_container , _Array_iterator >(array,iterator_low,iterator_high))
; 353  : 		if (P_OK != array.swap_value(&iterator_low,&iterator_high))

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?swap_value@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@0@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::swap_value
	test	eax, eax
	je	SHORT $LN4@increment_@2

; 354  : 		{
; 355  : 			return P_ERR;

	or	eax, -1
	jmp	$LN14@increment_@2
$LN4@increment_@2:

; 356  : 		}
; 357  : 
; 358  : 		while (0 != _Array_iterator::compare(iterator_low,iterator_high) && compare_t::compare(*pitem_low,clip_item) <= 0)

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	call	?compare@?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > >::compare
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@increment_@2
	lea	eax, DWORD PTR _clip_item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pitem_low$[ebp]
	push	ecx
	call	?compare@?$pecker_value_compare@H@pecker_sdk@@SAHABH0@Z ; pecker_sdk::pecker_value_compare<int>::compare
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN3@increment_@2

; 359  : 		{
; 360  : 			iterator_low.increment();

	mov	eax, DWORD PTR _iterator_low$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 361  : 			pitem_low =  array.get_at(&iterator_low);

	mov	eax, DWORD PTR _iterator_low$[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_at
	mov	DWORD PTR _pitem_low$[ebp], eax

; 362  : 			if (null == pitem_high)

	cmp	DWORD PTR _pitem_high$[ebp], 0
	jne	SHORT $LN2@increment_@2

; 363  : 			{
; 364  : 				return P_ERR;

	or	eax, -1
	jmp	SHORT $LN14@increment_@2
$LN2@increment_@2:

; 365  : 			}
; 366  : 		}

	jmp	SHORT $LN4@increment_@2
$LN3@increment_@2:

; 367  : 
; 368  : 		//if (P_OK != swap< item_type,_Array_container , _Array_iterator >(array,iterator_low,iterator_high))
; 369  : 		if (P_OK != array.swap_value(&iterator_low,&iterator_high))

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?swap_value@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@0@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::swap_value
	test	eax, eax
	je	SHORT $LN1@increment_@2

; 370  : 		{
; 371  : 			return P_ERR;

	or	eax, -1
	jmp	SHORT $LN14@increment_@2
$LN1@increment_@2:

; 372  : 		}
; 373  : 
; 374  : 	}

	jmp	$LN10@increment_@2
$LN9@increment_@2:

; 375  : 	iterator_out.copy(&iterator_low);

	mov	esi, esp
	mov	eax, DWORD PTR _iterator_low$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_out$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iterator_out$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 376  : 	return P_OK;

	xor	eax, eax
$LN14@increment_@2:

; 377  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@increment_@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@increment_@2:
	DD	1
	DD	$LN17@increment_@2
$LN17@increment_@2:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN16@increment_@2
$LN16@increment_@2:
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
??$increment_order_partition@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@2@V?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@0@AAV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@0@11@Z ENDP ; pecker_sdk::increment_order_partition<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> > > >
_TEXT	ENDS
PUBLIC	?swap_value@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@0@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::swap_value
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$increment_order_partition@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@AAV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@11@Z
_TEXT	SEGMENT
_clip_item$ = -44					; size = 4
_pitem$ = -32						; size = 4
_pitem_low$ = -20					; size = 4
_pitem_high$ = -8					; size = 4
_array$ = 8						; size = 4
_iterator_low$ = 12					; size = 4
_iterator_high$ = 16					; size = 4
_iterator_out$ = 20					; size = 4
??$increment_order_partition@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@AAV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@11@Z PROC ; pecker_sdk::increment_order_partition<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> > >, COMDAT

; 318  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 319  : 	const item_type* pitem_high = null;

	mov	DWORD PTR _pitem_high$[ebp], 0

; 320  : 	const item_type* pitem_low = null;

	mov	DWORD PTR _pitem_low$[ebp], 0

; 321  : 	const item_type* pitem = array.get_at(&iterator_low);

	mov	eax, DWORD PTR _iterator_low$[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
	mov	DWORD PTR _pitem$[ebp], eax

; 322  : 	if (null == pitem)

	cmp	DWORD PTR _pitem$[ebp], 0
	jne	SHORT $LN13@increment_@3

; 323  : 	{
; 324  : 		return P_ERR;

	or	eax, -1
	jmp	$LN14@increment_@3
$LN13@increment_@3:

; 325  : 	}
; 326  : 	item_type clip_item = *pitem;

	mov	eax, DWORD PTR _pitem$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _clip_item$[ebp], ecx

; 327  : 
; 328  : 	pitem_high =  array.get_at(&iterator_high);

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
	mov	DWORD PTR _pitem_high$[ebp], eax

; 329  : 	if (null == pitem_high)

	cmp	DWORD PTR _pitem_high$[ebp], 0
	jne	SHORT $LN12@increment_@3

; 330  : 	{
; 331  : 		return P_ERR;

	or	eax, -1
	jmp	$LN14@increment_@3
$LN12@increment_@3:

; 332  : 	}
; 333  : 
; 334  : 	pitem_low =  array.get_at(&iterator_low);

	mov	eax, DWORD PTR _iterator_low$[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
	mov	DWORD PTR _pitem_low$[ebp], eax

; 335  : 	if (null == pitem_low)

	cmp	DWORD PTR _pitem_low$[ebp], 0
	jne	SHORT $LN10@increment_@3

; 336  : 	{
; 337  : 		return P_ERR;

	or	eax, -1
	jmp	$LN14@increment_@3
$LN10@increment_@3:

; 338  : 	}
; 339  : 
; 340  : 	while (0 != _Array_iterator::compare(iterator_low,iterator_high) )

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	call	?compare@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::compare
	add	esp, 8
	test	eax, eax
	je	$LN9@increment_@3
$LN8@increment_@3:

; 341  : 	{
; 342  : 		while (0 != _Array_iterator::compare(iterator_low,iterator_high) && compare_t::compare(*pitem_high,clip_item) >= 0)

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	call	?compare@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::compare
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@increment_@3
	lea	eax, DWORD PTR _clip_item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pitem_high$[ebp]
	push	ecx
	call	?compare@?$pecker_value_compare@H@pecker_sdk@@SAHABH0@Z ; pecker_sdk::pecker_value_compare<int>::compare
	add	esp, 8
	test	eax, eax
	jl	SHORT $LN7@increment_@3

; 343  : 		{
; 344  : 			iterator_high.decrement();

	mov	eax, DWORD PTR _iterator_high$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _iterator_high$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 345  : 			pitem_high =  array.get_at(&iterator_high);

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
	mov	DWORD PTR _pitem_high$[ebp], eax

; 346  : 			if (null == pitem_high)

	cmp	DWORD PTR _pitem_high$[ebp], 0
	jne	SHORT $LN6@increment_@3

; 347  : 			{
; 348  : 				return P_ERR;

	or	eax, -1
	jmp	$LN14@increment_@3
$LN6@increment_@3:

; 349  : 			}
; 350  : 		}

	jmp	SHORT $LN8@increment_@3
$LN7@increment_@3:

; 351  : 
; 352  : 		//if (P_OK != swap< item_type,_Array_container , _Array_iterator >(array,iterator_low,iterator_high))
; 353  : 		if (P_OK != array.swap_value(&iterator_low,&iterator_high))

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?swap_value@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@0@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::swap_value
	test	eax, eax
	je	SHORT $LN4@increment_@3

; 354  : 		{
; 355  : 			return P_ERR;

	or	eax, -1
	jmp	$LN14@increment_@3
$LN4@increment_@3:

; 356  : 		}
; 357  : 
; 358  : 		while (0 != _Array_iterator::compare(iterator_low,iterator_high) && compare_t::compare(*pitem_low,clip_item) <= 0)

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	call	?compare@?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@pecker_sdk@@SAHABV12@0@Z ; pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> >::compare
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@increment_@3
	lea	eax, DWORD PTR _clip_item$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pitem_low$[ebp]
	push	ecx
	call	?compare@?$pecker_value_compare@H@pecker_sdk@@SAHABH0@Z ; pecker_sdk::pecker_value_compare<int>::compare
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN3@increment_@3

; 359  : 		{
; 360  : 			iterator_low.increment();

	mov	eax, DWORD PTR _iterator_low$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 361  : 			pitem_low =  array.get_at(&iterator_low);

	mov	eax, DWORD PTR _iterator_low$[ebp]
	push	eax
	mov	ecx, DWORD PTR _array$[ebp]
	call	?get_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPBHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_at
	mov	DWORD PTR _pitem_low$[ebp], eax

; 362  : 			if (null == pitem_high)

	cmp	DWORD PTR _pitem_high$[ebp], 0
	jne	SHORT $LN2@increment_@3

; 363  : 			{
; 364  : 				return P_ERR;

	or	eax, -1
	jmp	SHORT $LN14@increment_@3
$LN2@increment_@3:

; 365  : 			}
; 366  : 		}

	jmp	SHORT $LN4@increment_@3
$LN3@increment_@3:

; 367  : 
; 368  : 		//if (P_OK != swap< item_type,_Array_container , _Array_iterator >(array,iterator_low,iterator_high))
; 369  : 		if (P_OK != array.swap_value(&iterator_low,&iterator_high))

	mov	eax, DWORD PTR _iterator_high$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_low$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _array$[ebp]
	call	?swap_value@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@0@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::swap_value
	test	eax, eax
	je	SHORT $LN1@increment_@3

; 370  : 		{
; 371  : 			return P_ERR;

	or	eax, -1
	jmp	SHORT $LN14@increment_@3
$LN1@increment_@3:

; 372  : 		}
; 373  : 
; 374  : 	}

	jmp	$LN10@increment_@3
$LN9@increment_@3:

; 375  : 	iterator_out.copy(&iterator_low);

	mov	esi, esp
	mov	eax, DWORD PTR _iterator_low$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iterator_out$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iterator_out$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 376  : 	return P_OK;

	xor	eax, eax
$LN14@increment_@3:

; 377  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@increment_@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@increment_@3:
	DD	1
	DD	$LN17@increment_@3
$LN17@increment_@3:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN16@increment_@3
$LN16@increment_@3:
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
??$increment_order_partition@HU?$pecker_value_compare@H@pecker_sdk@@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@2@V?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@pecker_sdk@@YAJAAV?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@0@AAV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@0@11@Z ENDP ; pecker_sdk::increment_order_partition<int,pecker_sdk::pecker_value_compare<int>,pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>,pecker_sdk::pecker_array_iterator<pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512> > >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$resize_array@PAHV?$pecker_simple_allocator@PAH@pecker_sdk@@@pecker_sdk@@YAJAAPAPAHHAAHHH_N2@Z
_TEXT	SEGMENT
_index$69601 = -56					; size = 4
_ptemp_new_allocate_object_buffer$ = -44		; size = 4
_tmp_mod_result$69593 = -32				; size = 4
_tmp_mod_result$69587 = -20				; size = 4
_new_array_buffer_size$ = -8				; size = 4
_pArray_buffer$ = 8					; size = 4
_current_array_size$ = 12				; size = 4
_current_array_buffer_size$ = 16			; size = 4
_new_array_size$ = 20					; size = 4
_new_allocate_object_step$ = 24				; size = 4
_bForce_release$ = 28					; size = 1
_bNew_allocate$ = 32					; size = 1
??$resize_array@PAHV?$pecker_simple_allocator@PAH@pecker_sdk@@@pecker_sdk@@YAJAAPAPAHHAAHHH_N2@Z PROC ; pecker_sdk::resize_array<int *,pecker_sdk::pecker_simple_allocator<int *> >, COMDAT

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 34   : 	array_buffer_size_val new_array_buffer_size = 0;

	mov	DWORD PTR _new_array_buffer_size$[ebp], 0

; 35   : 
; 36   : #ifdef ARRAY_BEBUG_CODE
; 37   : 	if (new_allocate_object_step <= 0)
; 38   : 	{
; 39   : 		new_allocate_object_step = ARRAY_DEFAULT_ALLOCATE_STEP;
; 40   : 	}
; 41   : 	
; 42   : 	if(new_array_size < 0)
; 43   : 		new_array_size = 0;
; 44   : #endif
; 45   : 	
; 46   : 	if (ARRAY_BOOLEAN_TRUE == bForce_release)

	movzx	eax, BYTE PTR _bForce_release$[ebp]
	cmp	eax, 1
	jne	SHORT $LN18@resize_arr@3

; 47   : 	{
; 48   : 		if (0 >= new_array_size)

	cmp	DWORD PTR _new_array_size$[ebp], 0
	jg	SHORT $LN17@resize_arr@3

; 49   : 		{
; 50   : 			if (null != pArray_buffer)

	mov	eax, DWORD PTR _pArray_buffer$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN16@resize_arr@3

; 51   : 			{
; 52   : 				allocate_object_t::deallocate_objects(pArray_buffer);

	mov	eax, DWORD PTR _pArray_buffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?deallocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAXPAPAH@Z ; pecker_sdk::pecker_simple_allocator<int *>::deallocate_objects
	add	esp, 4

; 53   : 				pArray_buffer = null;

	mov	eax, DWORD PTR _pArray_buffer$[ebp]
	mov	DWORD PTR [eax], 0
$LN16@resize_arr@3:

; 54   : 			}
; 55   : 			current_array_buffer_size = 0;

	mov	eax, DWORD PTR _current_array_buffer_size$[ebp]
	mov	DWORD PTR [eax], 0

; 56   : 			return P_OK;

	xor	eax, eax
	jmp	$LN19@resize_arr@3
$LN17@resize_arr@3:

; 57   : 		}
; 58   : 		
; 59   : 
; 60   : 		array_buffer_size_val tmp_mod_result = new_array_size % new_allocate_object_step;

	mov	eax, DWORD PTR _new_array_size$[ebp]
	cdq
	idiv	DWORD PTR _new_allocate_object_step$[ebp]
	mov	DWORD PTR _tmp_mod_result$69587[ebp], edx

; 61   : 		if (0 == tmp_mod_result)

	cmp	DWORD PTR _tmp_mod_result$69587[ebp], 0
	jne	SHORT $LN15@resize_arr@3

; 62   : 		{
; 63   : 			new_array_buffer_size = new_array_size;

	mov	eax, DWORD PTR _new_array_size$[ebp]
	mov	DWORD PTR _new_array_buffer_size$[ebp], eax

; 64   : 		}
; 65   : 		else

	jmp	SHORT $LN14@resize_arr@3
$LN15@resize_arr@3:

; 66   : 		{
; 67   : 			new_array_buffer_size = new_array_size - tmp_mod_result + new_allocate_object_step;

	mov	eax, DWORD PTR _new_array_size$[ebp]
	sub	eax, DWORD PTR _tmp_mod_result$69587[ebp]
	add	eax, DWORD PTR _new_allocate_object_step$[ebp]
	mov	DWORD PTR _new_array_buffer_size$[ebp], eax
$LN14@resize_arr@3:

; 68   : 		}
; 69   : 
; 70   : 		if (new_array_buffer_size == current_array_buffer_size)

	mov	eax, DWORD PTR _current_array_buffer_size$[ebp]
	mov	ecx, DWORD PTR _new_array_buffer_size$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN13@resize_arr@3

; 71   : 		{
; 72   : 			return P_OK;

	xor	eax, eax
	jmp	$LN19@resize_arr@3
$LN13@resize_arr@3:

; 73   : 		}
; 74   : 	}
; 75   : 	else

	jmp	SHORT $LN12@resize_arr@3
$LN18@resize_arr@3:

; 76   : 	{
; 77   : 		if (new_array_size <= current_array_size)

	mov	eax, DWORD PTR _new_array_size$[ebp]
	cmp	eax, DWORD PTR _current_array_size$[ebp]
	jg	SHORT $LN11@resize_arr@3

; 78   : 		{
; 79   : 			return P_OK;

	xor	eax, eax
	jmp	$LN19@resize_arr@3
$LN11@resize_arr@3:

; 80   : 		}
; 81   : 
; 82   : 		array_buffer_size_val tmp_mod_result = new_array_size % new_allocate_object_step;

	mov	eax, DWORD PTR _new_array_size$[ebp]
	cdq
	idiv	DWORD PTR _new_allocate_object_step$[ebp]
	mov	DWORD PTR _tmp_mod_result$69593[ebp], edx

; 83   : 		if (0 == tmp_mod_result)

	cmp	DWORD PTR _tmp_mod_result$69593[ebp], 0
	jne	SHORT $LN10@resize_arr@3

; 84   : 		{
; 85   : 			new_array_buffer_size = new_array_size;

	mov	eax, DWORD PTR _new_array_size$[ebp]
	mov	DWORD PTR _new_array_buffer_size$[ebp], eax

; 86   : 		}
; 87   : 		else

	jmp	SHORT $LN9@resize_arr@3
$LN10@resize_arr@3:

; 88   : 		{
; 89   : 			new_array_buffer_size = new_array_size - tmp_mod_result + new_allocate_object_step;

	mov	eax, DWORD PTR _new_array_size$[ebp]
	sub	eax, DWORD PTR _tmp_mod_result$69593[ebp]
	add	eax, DWORD PTR _new_allocate_object_step$[ebp]
	mov	DWORD PTR _new_array_buffer_size$[ebp], eax
$LN9@resize_arr@3:

; 90   : 		}
; 91   : 
; 92   : 		if (new_array_buffer_size <= current_array_buffer_size)

	mov	eax, DWORD PTR _current_array_buffer_size$[ebp]
	mov	ecx, DWORD PTR _new_array_buffer_size$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jg	SHORT $LN12@resize_arr@3

; 93   : 		{
; 94   : 			return P_OK;

	xor	eax, eax
	jmp	$LN19@resize_arr@3
$LN12@resize_arr@3:

; 95   : 		}
; 96   : 	}
; 97   : 
; 98   : 	class_type* ptemp_new_allocate_object_buffer = allocate_object_t::allocate_objects(new_array_buffer_size);

	mov	eax, DWORD PTR _new_array_buffer_size$[ebp]
	push	eax
	call	?allocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAPAPAHH@Z ; pecker_sdk::pecker_simple_allocator<int *>::allocate_objects
	add	esp, 4
	mov	DWORD PTR _ptemp_new_allocate_object_buffer$[ebp], eax

; 99   : 	
; 100  : 	if (null != ptemp_new_allocate_object_buffer)

	cmp	DWORD PTR _ptemp_new_allocate_object_buffer$[ebp], 0
	je	SHORT $LN7@resize_arr@3

; 101  : 	{
; 102  : 		if (ARRAY_BOOLEAN_FLASE == bNew_allocate)

	movzx	eax, BYTE PTR _bNew_allocate$[ebp]
	test	eax, eax
	jne	SHORT $LN6@resize_arr@3

; 103  : 		{
; 104  : 			if (new_array_size > current_array_size)

	mov	eax, DWORD PTR _new_array_size$[ebp]
	cmp	eax, DWORD PTR _current_array_size$[ebp]
	jle	SHORT $LN5@resize_arr@3

; 105  : 			{
; 106  : 				new_array_size = current_array_size;

	mov	eax, DWORD PTR _current_array_size$[ebp]
	mov	DWORD PTR _new_array_size$[ebp], eax
$LN5@resize_arr@3:

; 107  : 			}
; 108  : 			for (array_index_val index=0; index < new_array_size;++index)

	mov	DWORD PTR _index$69601[ebp], 0
	jmp	SHORT $LN4@resize_arr@3
$LN3@resize_arr@3:
	mov	eax, DWORD PTR _index$69601[ebp]
	add	eax, 1
	mov	DWORD PTR _index$69601[ebp], eax
$LN4@resize_arr@3:
	mov	eax, DWORD PTR _index$69601[ebp]
	cmp	eax, DWORD PTR _new_array_size$[ebp]
	jge	SHORT $LN6@resize_arr@3

; 109  : 			{
; 110  : 				ptemp_new_allocate_object_buffer[index] = pArray_buffer[index];

	mov	eax, DWORD PTR _pArray_buffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$69601[ebp]
	mov	eax, DWORD PTR _ptemp_new_allocate_object_buffer$[ebp]
	mov	esi, DWORD PTR _index$69601[ebp]
	mov	ecx, DWORD PTR [ecx+esi*4]
	mov	DWORD PTR [eax+edx*4], ecx

; 111  : 			}

	jmp	SHORT $LN3@resize_arr@3
$LN6@resize_arr@3:

; 112  : 		}
; 113  : 		allocate_object_t::deallocate_objects(pArray_buffer);

	mov	eax, DWORD PTR _pArray_buffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?deallocate_objects@?$pecker_simple_allocator@PAH@pecker_sdk@@SAXPAPAH@Z ; pecker_sdk::pecker_simple_allocator<int *>::deallocate_objects
	add	esp, 4

; 114  : 		pArray_buffer = ptemp_new_allocate_object_buffer;

	mov	eax, DWORD PTR _pArray_buffer$[ebp]
	mov	ecx, DWORD PTR _ptemp_new_allocate_object_buffer$[ebp]
	mov	DWORD PTR [eax], ecx

; 115  : 		current_array_buffer_size = new_array_buffer_size;

	mov	eax, DWORD PTR _current_array_buffer_size$[ebp]
	mov	ecx, DWORD PTR _new_array_buffer_size$[ebp]
	mov	DWORD PTR [eax], ecx

; 116  : 		return P_OK;

	xor	eax, eax
	jmp	SHORT $LN19@resize_arr@3

; 117  : 	}
; 118  : 	else

	jmp	SHORT $LN1@resize_arr@3
$LN7@resize_arr@3:

; 119  : 	{
; 120  : 		return P_ERR;

	or	eax, -1
	jmp	SHORT $LN19@resize_arr@3
$LN1@resize_arr@3:

; 121  : 	}
; 122  : 
; 123  : 	return P_OK;

	xor	eax, eax
$LN19@resize_arr@3:

; 124  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$resize_array@PAHV?$pecker_simple_allocator@PAH@pecker_sdk@@@pecker_sdk@@YAJAAPAPAHHAAHHH_N2@Z ENDP ; pecker_sdk::resize_array<int *,pecker_sdk::pecker_simple_allocator<int *> >
_TEXT	ENDS
PUBLIC	?get_reference_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_reference_at
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_array.h
;	COMDAT ?swap_value@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@0@Z
_TEXT	SEGMENT
_ptemp_item$69611 = -44					; size = 4
_pitem_hight$ = -32					; size = 4
_pitem_low$ = -20					; size = 4
_this$ = -8						; size = 4
_piterator1$ = 8					; size = 4
_piterator2$ = 12					; size = 4
?swap_value@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@0@Z PROC ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::swap_value, COMDAT
; _this$ = ecx

; 81   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 		class_type* pitem_low = get_reference_at(piterator1);

	mov	eax, DWORD PTR _piterator1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_reference_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_reference_at
	mov	DWORD PTR _pitem_low$[ebp], eax

; 83   : 		class_type* pitem_hight = get_reference_at(piterator2);

	mov	eax, DWORD PTR _piterator2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_reference_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_reference_at
	mov	DWORD PTR _pitem_hight$[ebp], eax

; 84   : 		if ( null != pitem_hight && 
; 85   : 				null != pitem_low)

	cmp	DWORD PTR _pitem_hight$[ebp], 0
	je	SHORT $LN2@swap_value
	cmp	DWORD PTR _pitem_low$[ebp], 0
	je	SHORT $LN2@swap_value

; 86   : 		{
; 87   : 			class_type ptemp_item = *pitem_hight;

	mov	eax, DWORD PTR _pitem_hight$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ptemp_item$69611[ebp], ecx

; 88   : 			*pitem_hight = *pitem_low;

	mov	eax, DWORD PTR _pitem_hight$[ebp]
	mov	ecx, DWORD PTR _pitem_low$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 89   : 			*pitem_low = ptemp_item;

	mov	eax, DWORD PTR _pitem_low$[ebp]
	mov	ecx, DWORD PTR _ptemp_item$69611[ebp]
	mov	DWORD PTR [eax], ecx

; 90   : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN3@swap_value

; 91   : 		}
; 92   : 		else

	jmp	SHORT $LN3@swap_value
$LN2@swap_value:

; 93   : 		{
; 94   : 			return P_ERR;

	or	eax, -1
$LN3@swap_value:

; 95   : 		}
; 96   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?swap_value@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@0@Z ENDP ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::swap_value
_TEXT	ENDS
PUBLIC	?get_reference_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_reference_at
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?swap_value@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@0@Z
_TEXT	SEGMENT
_ptemp_item$69618 = -44					; size = 4
_pitem_hight$ = -32					; size = 4
_pitem_low$ = -20					; size = 4
_this$ = -8						; size = 4
_piterator1$ = 8					; size = 4
_piterator2$ = 12					; size = 4
?swap_value@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@0@Z PROC ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::swap_value, COMDAT
; _this$ = ecx

; 386  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 387  : 		class_type* pitem_low = get_reference_at(piterator1);

	mov	eax, DWORD PTR _piterator1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_reference_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_reference_at
	mov	DWORD PTR _pitem_low$[ebp], eax

; 388  : 		class_type* pitem_hight = get_reference_at(piterator2);

	mov	eax, DWORD PTR _piterator2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_reference_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_reference_at
	mov	DWORD PTR _pitem_hight$[ebp], eax

; 389  : 		if ( null != pitem_hight && 
; 390  : 			null != pitem_low)

	cmp	DWORD PTR _pitem_hight$[ebp], 0
	je	SHORT $LN2@swap_value@2
	cmp	DWORD PTR _pitem_low$[ebp], 0
	je	SHORT $LN2@swap_value@2

; 391  : 		{
; 392  : 			class_type ptemp_item = *pitem_hight;

	mov	eax, DWORD PTR _pitem_hight$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ptemp_item$69618[ebp], ecx

; 393  : 			*pitem_hight = *pitem_low;

	mov	eax, DWORD PTR _pitem_hight$[ebp]
	mov	ecx, DWORD PTR _pitem_low$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 394  : 			*pitem_low = ptemp_item;

	mov	eax, DWORD PTR _pitem_low$[ebp]
	mov	ecx, DWORD PTR _ptemp_item$69618[ebp]
	mov	DWORD PTR [eax], ecx

; 395  : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN3@swap_value@2

; 396  : 		}
; 397  : 		else

	jmp	SHORT $LN3@swap_value@2
$LN2@swap_value@2:

; 398  : 		{
; 399  : 			return P_ERR;

	or	eax, -1
$LN3@swap_value@2:

; 400  : 		}
; 401  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?swap_value@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@0@Z ENDP ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::swap_value
_TEXT	ENDS
PUBLIC	?get_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_reference_at
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_stack.h
;	COMDAT ?swap_value@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@0@Z
_TEXT	SEGMENT
_ptemp_item$69625 = -44					; size = 4
_pitem_hight$ = -32					; size = 4
_pitem_low$ = -20					; size = 4
_this$ = -8						; size = 4
_piterator1$ = 8					; size = 4
_piterator2$ = 12					; size = 4
?swap_value@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@0@Z PROC ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::swap_value, COMDAT
; _this$ = ecx

; 110  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 111  : 		value_type* pitem_low = get_reference_at(piterator1);

	mov	eax, DWORD PTR _piterator1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_reference_at
	mov	DWORD PTR _pitem_low$[ebp], eax

; 112  : 		value_type* pitem_hight = get_reference_at(piterator2);

	mov	eax, DWORD PTR _piterator2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_reference_at
	mov	DWORD PTR _pitem_hight$[ebp], eax

; 113  : 		if ( null != pitem_hight && 
; 114  : 			null != pitem_low)

	cmp	DWORD PTR _pitem_hight$[ebp], 0
	je	SHORT $LN2@swap_value@3
	cmp	DWORD PTR _pitem_low$[ebp], 0
	je	SHORT $LN2@swap_value@3

; 115  : 		{
; 116  : 			value_type ptemp_item = *pitem_hight;

	mov	eax, DWORD PTR _pitem_hight$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ptemp_item$69625[ebp], ecx

; 117  : 			*pitem_hight = *pitem_low;

	mov	eax, DWORD PTR _pitem_hight$[ebp]
	mov	ecx, DWORD PTR _pitem_low$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 118  : 			*pitem_low = ptemp_item;

	mov	eax, DWORD PTR _pitem_low$[ebp]
	mov	ecx, DWORD PTR _ptemp_item$69625[ebp]
	mov	DWORD PTR [eax], ecx

; 119  : 			return P_OK;

	xor	eax, eax
	jmp	SHORT $LN3@swap_value@3

; 120  : 		}
; 121  : 		else

	jmp	SHORT $LN3@swap_value@3
$LN2@swap_value@3:

; 122  : 		{
; 123  : 			return P_ERR;

	or	eax, -1
$LN3@swap_value@3:

; 124  : 		}
; 125  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?swap_value@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QAEJPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@0@Z ENDP ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::swap_value
_TEXT	ENDS
PUBLIC	?get_reference_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPAHH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_reference_at
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_array.h
;	COMDAT ?get_reference_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_parray_iterator$ = 8					; size = 4
?get_reference_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z PROC ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_reference_at, COMDAT
; _this$ = ecx

; 279  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 280  : 		if (null != parray_iterator)

	cmp	DWORD PTR _parray_iterator$[ebp], 0
	je	SHORT $LN1@get_refere@3

; 281  : 		{
; 282  : 			return get_reference_at(parray_iterator->get_current_index());

	mov	eax, DWORD PTR _parray_iterator$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _parray_iterator$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_reference_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPAHH@Z ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_reference_at
	jmp	SHORT $LN2@get_refere@3
$LN1@get_refere@3:

; 283  : 		}
; 284  : 
; 285  : 		return null;

	xor	eax, eax
$LN2@get_refere@3:

; 286  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_reference_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@@2@@Z ENDP ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_reference_at
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?get_reference_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_parray_iterator$ = 8					; size = 4
?get_reference_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z PROC ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_reference_at, COMDAT
; _this$ = ecx

; 622  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 623  : 		if (null != parray_iterator)

	cmp	DWORD PTR _parray_iterator$[ebp], 0
	je	SHORT $LN1@get_refere@4

; 624  : 		{
; 625  : 			return get_reference_at(parray_iterator->get_current_index());

	mov	eax, DWORD PTR _parray_iterator$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _parray_iterator$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_reference_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAHH@Z ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_reference_at
	jmp	SHORT $LN2@get_refere@4
$LN1@get_refere@4:

; 626  : 		}
; 627  : 
; 628  : 		return null;

	xor	eax, eax
$LN2@get_refere@4:

; 629  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_reference_at@?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@@pecker_sdk@@@2@@Z ENDP ; pecker_sdk::pecker_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *> >::get_reference_at
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_stack.h
_TEXT	ENDS
;	COMDAT ?get_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_parray_iterator$ = 8					; size = 4
?get_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z PROC ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_reference_at, COMDAT
; _this$ = ecx

; 433  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 434  : 		if (null != parray_iterator)

	cmp	DWORD PTR _parray_iterator$[ebp], 0
	je	SHORT $LN1@get_refere@5

; 435  : 		{
; 436  : 			return get_reference_at(parray_iterator->get_current_index());

	mov	eax, DWORD PTR _parray_iterator$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _parray_iterator$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAHH@Z ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_reference_at
	jmp	SHORT $LN2@get_refere@5
$LN1@get_refere@5:

; 437  : 		}
; 438  : 
; 439  : 		return null;

	xor	eax, eax
$LN2@get_refere@5:

; 440  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?get_reference_at@?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@QBEPAHPBV?$pecker_array_iterator@V?$pecker_stack_pool_array@HV?$pecker_simple_allocator@H@pecker_sdk@@V?$pecker_simple_allocator@PAH@2@$0CAA@@pecker_sdk@@@2@@Z ENDP ; pecker_sdk::pecker_stack_pool_array<int,pecker_sdk::pecker_simple_allocator<int>,pecker_sdk::pecker_simple_allocator<int *>,512>::get_reference_at
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_array.h
_TEXT	ENDS
;	COMDAT ?get_reference_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPAHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
?get_reference_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPAHH@Z PROC ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_reference_at, COMDAT
; _this$ = ecx

; 166  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 167  : 		if (index >=0 && index < _M_array_size)

	cmp	DWORD PTR _index$[ebp], 0
	jl	SHORT $LN2@get_refere@6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN2@get_refere@6

; 168  : 		{
; 169  : 			return &_M_parray_buffer[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN3@get_refere@6

; 170  : 		}
; 171  : 		else

	jmp	SHORT $LN3@get_refere@6
$LN2@get_refere@6:

; 172  : 		{
; 173  : 			return null;

	xor	eax, eax
$LN3@get_refere@6:

; 174  : 		}
; 175  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?get_reference_at@?$pecker_array@HV?$pecker_simple_allocator@H@pecker_sdk@@@pecker_sdk@@QBEPAHH@Z ENDP ; pecker_sdk::pecker_array<int,pecker_sdk::pecker_simple_allocator<int> >::get_reference_at
_TEXT	ENDS
END
