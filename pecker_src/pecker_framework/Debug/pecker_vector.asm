; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	F:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_vector.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__real@00000000
PUBLIC	??0pecker_vector2@pecker_sdk@@QAE@XZ		; pecker_sdk::pecker_vector2::pecker_vector2
EXTRN	__fltused:DWORD
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT __real@00000000
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_vector.cpp
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0pecker_vector2@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0pecker_vector2@pecker_sdk@@QAE@XZ PROC		; pecker_sdk::pecker_vector2::pecker_vector2, COMDAT
; _this$ = ecx

; 15   : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0pecker_vector2@pecker_sdk@@QAE@XZ ENDP		; pecker_sdk::pecker_vector2::pecker_vector2
_TEXT	ENDS
PUBLIC	??0pecker_vector2@pecker_sdk@@QAE@M@Z		; pecker_sdk::pecker_vector2::pecker_vector2
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector2@pecker_sdk@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_val$ = 8						; size = 4
??0pecker_vector2@pecker_sdk@@QAE@M@Z PROC		; pecker_sdk::pecker_vector2::pecker_vector2, COMDAT
; _this$ = ecx

; 17   : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _val$[ebp]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _val$[ebp]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0pecker_vector2@pecker_sdk@@QAE@M@Z ENDP		; pecker_sdk::pecker_vector2::pecker_vector2
_TEXT	ENDS
PUBLIC	??0pecker_vector2@pecker_sdk@@QAE@MM@Z		; pecker_sdk::pecker_vector2::pecker_vector2
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector2@pecker_sdk@@QAE@MM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??0pecker_vector2@pecker_sdk@@QAE@MM@Z PROC		; pecker_sdk::pecker_vector2::pecker_vector2, COMDAT
; _this$ = ecx

; 19   : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0pecker_vector2@pecker_sdk@@QAE@MM@Z ENDP		; pecker_sdk::pecker_vector2::pecker_vector2
_TEXT	ENDS
PUBLIC	??0pecker_vector2@pecker_sdk@@QAE@PBM@Z		; pecker_sdk::pecker_vector2::pecker_vector2
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector2@pecker_sdk@@QAE@PBM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_vec2$ = 8						; size = 4
??0pecker_vector2@pecker_sdk@@QAE@PBM@Z PROC		; pecker_sdk::pecker_vector2::pecker_vector2, COMDAT
; _this$ = ecx

; 21   : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec2$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec2$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0pecker_vector2@pecker_sdk@@QAE@PBM@Z ENDP		; pecker_sdk::pecker_vector2::pecker_vector2
_TEXT	ENDS
PUBLIC	??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z	; pecker_sdk::pecker_vector2::pecker_vector2
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_other$ = 8						; size = 4
??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z PROC		; pecker_sdk::pecker_vector2::pecker_vector2, COMDAT
; _this$ = ecx

; 23   : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z ENDP		; pecker_sdk::pecker_vector2::pecker_vector2
_TEXT	ENDS
PUBLIC	??0pecker_vector2@pecker_sdk@@QAE@ABUpecker_vector3@1@@Z ; pecker_sdk::pecker_vector2::pecker_vector2
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector2@pecker_sdk@@QAE@ABUpecker_vector3@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_vec3$ = 8						; size = 4
??0pecker_vector2@pecker_sdk@@QAE@ABUpecker_vector3@1@@Z PROC ; pecker_sdk::pecker_vector2::pecker_vector2, COMDAT
; _this$ = ecx

; 25   : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec3$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec3$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0pecker_vector2@pecker_sdk@@QAE@ABUpecker_vector3@1@@Z ENDP ; pecker_sdk::pecker_vector2::pecker_vector2
_TEXT	ENDS
PUBLIC	??Ypecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z	; pecker_sdk::pecker_vector2::operator+=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Ypecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??Ypecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector2::operator+=, COMDAT
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 29   :   x += Val.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 30   :   y += Val.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Val$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 31   :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 32   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Ypecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector2::operator+=
_TEXT	ENDS
PUBLIC	??Zpecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z	; pecker_sdk::pecker_vector2::operator-=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Zpecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??Zpecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector2::operator-=, COMDAT
; _this$ = ecx

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 37   :   x -= Val.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 38   :   y -= Val.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 39   :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 40   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Zpecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector2::operator-=
_TEXT	ENDS
PUBLIC	??Xpecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z	; pecker_sdk::pecker_vector2::operator*=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Xpecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??Xpecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector2::operator*=, COMDAT
; _this$ = ecx

; 44   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   :   x *= Val.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 46   :   y *= Val.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Val$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 47   :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 48   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Xpecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector2::operator*=
_TEXT	ENDS
PUBLIC	??Xpecker_vector2@pecker_sdk@@QAEAAU01@M@Z	; pecker_sdk::pecker_vector2::operator*=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Xpecker_vector2@pecker_sdk@@QAEAAU01@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??Xpecker_vector2@pecker_sdk@@QAEAAU01@M@Z PROC		; pecker_sdk::pecker_vector2::operator*=, COMDAT
; _this$ = ecx

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 52   :   x *= Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 53   :   y *= Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 54   :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 55   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Xpecker_vector2@pecker_sdk@@QAEAAU01@M@Z ENDP		; pecker_sdk::pecker_vector2::operator*=
_TEXT	ENDS
PUBLIC	??_0pecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z ; pecker_sdk::pecker_vector2::operator/=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_0pecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??_0pecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector2::operator/=, COMDAT
; _this$ = ecx

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   :   x /= Val.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fdiv	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 60   :   y /= Val.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Val$[ebp]
	fdiv	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 61   :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 62   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0pecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector2::operator/=
_TEXT	ENDS
PUBLIC	??_0pecker_vector2@pecker_sdk@@QAEAAU01@M@Z	; pecker_sdk::pecker_vector2::operator/=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_0pecker_vector2@pecker_sdk@@QAEAAU01@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??_0pecker_vector2@pecker_sdk@@QAEAAU01@M@Z PROC	; pecker_sdk::pecker_vector2::operator/=, COMDAT
; _this$ = ecx

; 65   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 66   :   x /= Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 67   :   y /= Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fdiv	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 68   :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 69   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0pecker_vector2@pecker_sdk@@QAEAAU01@M@Z ENDP	; pecker_sdk::pecker_vector2::operator/=
_TEXT	ENDS
PUBLIC	??Hpecker_vector2@pecker_sdk@@QBE?AU01@ABU01@@Z	; pecker_sdk::pecker_vector2::operator+
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Hpecker_vector2@pecker_sdk@@QBE?AU01@ABU01@@Z
_TEXT	SEGMENT
_res$ = -24						; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Hpecker_vector2@pecker_sdk@@QBE?AU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector2::operator+, COMDAT
; _this$ = ecx

; 72   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 73   :   pecker_vector2 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector2::pecker_vector2

; 74   :   return (res += Val);

	mov	eax, DWORD PTR _Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??Ypecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z ; pecker_sdk::pecker_vector2::operator+=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector2::pecker_vector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 75   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN3@operator
$LN3@operator:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Hpecker_vector2@pecker_sdk@@QBE?AU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector2::operator+
_TEXT	ENDS
PUBLIC	??Gpecker_vector2@pecker_sdk@@QBE?AU01@ABU01@@Z	; pecker_sdk::pecker_vector2::operator-
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Gpecker_vector2@pecker_sdk@@QBE?AU01@ABU01@@Z
_TEXT	SEGMENT
_res$ = -24						; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Gpecker_vector2@pecker_sdk@@QBE?AU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector2::operator-, COMDAT
; _this$ = ecx

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   :   pecker_vector2 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector2::pecker_vector2

; 81   :   return (res -= Val);

	mov	eax, DWORD PTR _Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??Zpecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z ; pecker_sdk::pecker_vector2::operator-=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector2::pecker_vector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 82   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@operator@2:
	DD	1
	DD	$LN4@operator@2
$LN4@operator@2:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN3@operator@2
$LN3@operator@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Gpecker_vector2@pecker_sdk@@QBE?AU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector2::operator-
_TEXT	ENDS
PUBLIC	??Dpecker_vector2@pecker_sdk@@QBE?AU01@ABU01@@Z	; pecker_sdk::pecker_vector2::operator*
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Dpecker_vector2@pecker_sdk@@QBE?AU01@ABU01@@Z
_TEXT	SEGMENT
_res$ = -24						; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Dpecker_vector2@pecker_sdk@@QBE?AU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector2::operator*, COMDAT
; _this$ = ecx

; 86   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 87   :   pecker_vector2 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector2::pecker_vector2

; 88   :   return (res *= Val);

	mov	eax, DWORD PTR _Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??Xpecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z ; pecker_sdk::pecker_vector2::operator*=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector2::pecker_vector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 89   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@operator@3:
	DD	1
	DD	$LN4@operator@3
$LN4@operator@3:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN3@operator@3
$LN3@operator@3:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Dpecker_vector2@pecker_sdk@@QBE?AU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector2::operator*
_TEXT	ENDS
PUBLIC	??Dpecker_vector2@pecker_sdk@@QBE?AU01@M@Z	; pecker_sdk::pecker_vector2::operator*
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Dpecker_vector2@pecker_sdk@@QBE?AU01@M@Z
_TEXT	SEGMENT
_res$ = -24						; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Dpecker_vector2@pecker_sdk@@QBE?AU01@M@Z PROC		; pecker_sdk::pecker_vector2::operator*, COMDAT
; _this$ = ecx

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   :   pecker_vector2 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector2::pecker_vector2

; 94   :   return (res *= Val);

	push	ecx
	fld	DWORD PTR _Val$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _res$[ebp]
	call	??Xpecker_vector2@pecker_sdk@@QAEAAU01@M@Z ; pecker_sdk::pecker_vector2::operator*=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector2::pecker_vector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 95   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN5@operator@4:
	DD	1
	DD	$LN4@operator@4
$LN4@operator@4:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN3@operator@4
$LN3@operator@4:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Dpecker_vector2@pecker_sdk@@QBE?AU01@M@Z ENDP		; pecker_sdk::pecker_vector2::operator*
_TEXT	ENDS
PUBLIC	??Kpecker_vector2@pecker_sdk@@QBE?AU01@ABU01@@Z	; pecker_sdk::pecker_vector2::operator/
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Kpecker_vector2@pecker_sdk@@QBE?AU01@ABU01@@Z
_TEXT	SEGMENT
_res$ = -24						; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Kpecker_vector2@pecker_sdk@@QBE?AU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector2::operator/, COMDAT
; _this$ = ecx

; 98   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 99   :   pecker_vector2 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector2::pecker_vector2

; 100  :   return (res /= Val);

	mov	eax, DWORD PTR _Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??_0pecker_vector2@pecker_sdk@@QAEAAU01@ABU01@@Z ; pecker_sdk::pecker_vector2::operator/=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector2::pecker_vector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 101  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@operator@5:
	DD	1
	DD	$LN4@operator@5
$LN4@operator@5:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN3@operator@5
$LN3@operator@5:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Kpecker_vector2@pecker_sdk@@QBE?AU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector2::operator/
_TEXT	ENDS
PUBLIC	??Kpecker_vector2@pecker_sdk@@QBE?AU01@M@Z	; pecker_sdk::pecker_vector2::operator/
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Kpecker_vector2@pecker_sdk@@QBE?AU01@M@Z
_TEXT	SEGMENT
_res$ = -24						; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Kpecker_vector2@pecker_sdk@@QBE?AU01@M@Z PROC		; pecker_sdk::pecker_vector2::operator/, COMDAT
; _this$ = ecx

; 104  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 105  :   pecker_vector2 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector2::pecker_vector2

; 106  :   return (res /= Val);

	push	ecx
	fld	DWORD PTR _Val$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _res$[ebp]
	call	??_0pecker_vector2@pecker_sdk@@QAEAAU01@M@Z ; pecker_sdk::pecker_vector2::operator/=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector2::pecker_vector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 107  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@6
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN5@operator@6:
	DD	1
	DD	$LN4@operator@6
$LN4@operator@6:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN3@operator@6
$LN3@operator@6:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Kpecker_vector2@pecker_sdk@@QBE?AU01@M@Z ENDP		; pecker_sdk::pecker_vector2::operator/
_TEXT	ENDS
PUBLIC	__real@beb0c6f7a0000000
PUBLIC	__real@3eb0c6f7a0000000
PUBLIC	??8pecker_vector2@pecker_sdk@@QBE_NABU01@@Z	; pecker_sdk::pecker_vector2::operator==
;	COMDAT __real@beb0c6f7a0000000
CONST	SEGMENT
__real@beb0c6f7a0000000 DQ 0beb0c6f7a0000000r	; -1e-006
CONST	ENDS
;	COMDAT __real@3eb0c6f7a0000000
CONST	SEGMENT
__real@3eb0c6f7a0000000 DQ 03eb0c6f7a0000000r	; 1e-006
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??8pecker_vector2@pecker_sdk@@QBE_NABU01@@Z
_TEXT	SEGMENT
tv134 = -232						; size = 4
tv129 = -225						; size = 1
tv163 = -224						; size = 4
tv155 = -220						; size = 4
tv78 = -213						; size = 1
tv147 = -212						; size = 4
tv139 = -208						; size = 4
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??8pecker_vector2@pecker_sdk@@QBE_NABU01@@Z PROC	; pecker_sdk::pecker_vector2::operator==, COMDAT
; _this$ = ecx

; 110  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 111  :   return (EQFLOATZERO( x - Val.x )&&EQFLOATZERO( y - Val.y ));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR tv139[ebp]
	fld	DWORD PTR tv139[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@7
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [eax]
	fstp	DWORD PTR tv147[ebp]
	fld	DWORD PTR tv147[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@7
	mov	BYTE PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator@7
$LN3@operator@7:
	mov	BYTE PTR tv78[ebp], 0
$LN4@operator@7:
	movzx	ecx, BYTE PTR tv78[ebp]
	test	ecx, ecx
	je	SHORT $LN7@operator@7
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv155[ebp]
	fld	DWORD PTR tv155[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN5@operator@7
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [edx+4]
	fstp	DWORD PTR tv163[ebp]
	fld	DWORD PTR tv163[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN5@operator@7
	mov	BYTE PTR tv129[ebp], 1
	jmp	SHORT $LN6@operator@7
$LN5@operator@7:
	mov	BYTE PTR tv129[ebp], 0
$LN6@operator@7:
	movzx	eax, BYTE PTR tv129[ebp]
	test	eax, eax
	je	SHORT $LN7@operator@7
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN8@operator@7
$LN7@operator@7:
	mov	DWORD PTR tv134[ebp], 0
$LN8@operator@7:
	mov	al, BYTE PTR tv134[ebp]

; 112  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8pecker_vector2@pecker_sdk@@QBE_NABU01@@Z ENDP	; pecker_sdk::pecker_vector2::operator==
_TEXT	ENDS
PUBLIC	??9pecker_vector2@pecker_sdk@@QBE_NABU01@@Z	; pecker_sdk::pecker_vector2::operator!=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9pecker_vector2@pecker_sdk@@QBE_NABU01@@Z
_TEXT	SEGMENT
tv134 = -232						; size = 4
tv131 = -225						; size = 1
tv163 = -224						; size = 4
tv155 = -220						; size = 4
tv78 = -213						; size = 1
tv147 = -212						; size = 4
tv139 = -208						; size = 4
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??9pecker_vector2@pecker_sdk@@QBE_NABU01@@Z PROC	; pecker_sdk::pecker_vector2::operator!=, COMDAT
; _this$ = ecx

; 115  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 116  :   return ((!EQFLOATZERO( x - Val.x))||(!EQFLOATZERO( y - Val.y )));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR tv139[ebp]
	fld	DWORD PTR tv139[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@8
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [eax]
	fstp	DWORD PTR tv147[ebp]
	fld	DWORD PTR tv147[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@8
	mov	BYTE PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator@8
$LN3@operator@8:
	mov	BYTE PTR tv78[ebp], 0
$LN4@operator@8:
	movzx	ecx, BYTE PTR tv78[ebp]
	test	ecx, ecx
	je	SHORT $LN7@operator@8
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv155[ebp]
	fld	DWORD PTR tv155[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN5@operator@8
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [edx+4]
	fstp	DWORD PTR tv163[ebp]
	fld	DWORD PTR tv163[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN5@operator@8
	mov	BYTE PTR tv131[ebp], 1
	jmp	SHORT $LN6@operator@8
$LN5@operator@8:
	mov	BYTE PTR tv131[ebp], 0
$LN6@operator@8:
	movzx	eax, BYTE PTR tv131[ebp]
	test	eax, eax
	je	SHORT $LN7@operator@8
	mov	DWORD PTR tv134[ebp], 0
	jmp	SHORT $LN8@operator@8
$LN7@operator@8:
	mov	DWORD PTR tv134[ebp], 1
$LN8@operator@8:
	mov	al, BYTE PTR tv134[ebp]

; 117  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??9pecker_vector2@pecker_sdk@@QBE_NABU01@@Z ENDP	; pecker_sdk::pecker_vector2::operator!=
_TEXT	ENDS
PUBLIC	?length_square@pecker_vector2@pecker_sdk@@QBEMXZ ; pecker_sdk::pecker_vector2::length_square
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?length_square@pecker_vector2@pecker_sdk@@QBEMXZ
_TEXT	SEGMENT
tv80 = -208						; size = 4
_this$ = -8						; size = 4
?length_square@pecker_vector2@pecker_sdk@@QBEMXZ PROC	; pecker_sdk::pecker_vector2::length_square, COMDAT
; _this$ = ecx

; 121  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  :   return (x*x+y*y);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv80[ebp]
	fld	DWORD PTR tv80[ebp]

; 123  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?length_square@pecker_vector2@pecker_sdk@@QBEMXZ ENDP	; pecker_sdk::pecker_vector2::length_square
_TEXT	ENDS
PUBLIC	?length@pecker_vector2@pecker_sdk@@QBEMXZ	; pecker_sdk::pecker_vector2::length
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?length@pecker_vector2@pecker_sdk@@QBEMXZ
_TEXT	SEGMENT
tv83 = -240						; size = 4
_dy$ = -40						; size = 8
_dx$ = -24						; size = 8
_this$ = -8						; size = 4
?length@pecker_vector2@pecker_sdk@@QBEMXZ PROC		; pecker_sdk::pecker_vector2::length, COMDAT
; _this$ = ecx

; 126  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 127  :   Double dx = x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	QWORD PTR _dx$[ebp]

; 128  :   Double dy = y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	QWORD PTR _dy$[ebp]

; 129  :   return (Float)(sqrt(dx*dx + dy*dy));

	fld	QWORD PTR _dx$[ebp]
	fmul	QWORD PTR _dx$[ebp]
	fld	QWORD PTR _dy$[ebp]
	fmul	QWORD PTR _dy$[ebp]
	faddp	ST(1), ST(0)
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv83[ebp]
	fld	DWORD PTR tv83[ebp]

; 130  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@pecker_vector2@pecker_sdk@@QBEMXZ ENDP		; pecker_sdk::pecker_vector2::length
_TEXT	ENDS
PUBLIC	?normalize@pecker_vector2@pecker_sdk@@QAE?AU12@XZ ; pecker_sdk::pecker_vector2::normalize
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?normalize@pecker_vector2@pecker_sdk@@QAE?AU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?normalize@pecker_vector2@pecker_sdk@@QAE?AU12@XZ PROC	; pecker_sdk::pecker_vector2::normalize, COMDAT
; _this$ = ecx

; 133  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 134  :   return (*this/=length());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@pecker_vector2@pecker_sdk@@QBEMXZ ; pecker_sdk::pecker_vector2::length
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??_0pecker_vector2@pecker_sdk@@QAEAAU01@M@Z ; pecker_sdk::pecker_vector2::operator/=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector2::pecker_vector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 135  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?normalize@pecker_vector2@pecker_sdk@@QAE?AU12@XZ ENDP	; pecker_sdk::pecker_vector2::normalize
_TEXT	ENDS
PUBLIC	?normalized@pecker_vector2@pecker_sdk@@QBE?AU12@XZ ; pecker_sdk::pecker_vector2::normalized
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?normalized@pecker_vector2@pecker_sdk@@QBE?AU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?normalized@pecker_vector2@pecker_sdk@@QBE?AU12@XZ PROC	; pecker_sdk::pecker_vector2::normalized, COMDAT
; _this$ = ecx

; 138  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 139  :   return pecker_vector2(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector2::pecker_vector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 140  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?normalized@pecker_vector2@pecker_sdk@@QBE?AU12@XZ ENDP	; pecker_sdk::pecker_vector2::normalized
_TEXT	ENDS
PUBLIC	?rotated90@pecker_vector2@pecker_sdk@@QAE?AU12@XZ ; pecker_sdk::pecker_vector2::rotated90
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?rotated90@pecker_vector2@pecker_sdk@@QAE?AU12@XZ
_TEXT	SEGMENT
_temp$ = -20						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?rotated90@pecker_vector2@pecker_sdk@@QAE?AU12@XZ PROC	; pecker_sdk::pecker_vector2::rotated90, COMDAT
; _this$ = ecx

; 143  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 144  :   Float temp = -y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fchs
	fstp	DWORD PTR _temp$[ebp]

; 145  :   y = x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax+4]

; 146  :   x = temp;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _temp$[ebp]
	fstp	DWORD PTR [eax]

; 147  :   return *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector2@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector2::pecker_vector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 148  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?rotated90@pecker_vector2@pecker_sdk@@QAE?AU12@XZ ENDP	; pecker_sdk::pecker_vector2::rotated90
_TEXT	ENDS
PUBLIC	?rotated90ed@pecker_vector2@pecker_sdk@@QBE?AU12@XZ ; pecker_sdk::pecker_vector2::rotated90ed
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?rotated90ed@pecker_vector2@pecker_sdk@@QBE?AU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?rotated90ed@pecker_vector2@pecker_sdk@@QBE?AU12@XZ PROC ; pecker_sdk::pecker_vector2::rotated90ed, COMDAT
; _this$ = ecx

; 151  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 152  :   return pecker_vector2(-y,x);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector2@pecker_sdk@@QAE@MM@Z	; pecker_sdk::pecker_vector2::pecker_vector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 153  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?rotated90ed@pecker_vector2@pecker_sdk@@QBE?AU12@XZ ENDP ; pecker_sdk::pecker_vector2::rotated90ed
_TEXT	ENDS
PUBLIC	?dot@pecker_vector2@pecker_sdk@@QAEMABU12@@Z	; pecker_sdk::pecker_vector2::dot
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?dot@pecker_vector2@pecker_sdk@@QAEMABU12@@Z
_TEXT	SEGMENT
tv80 = -208						; size = 4
_this$ = -8						; size = 4
_other$ = 8						; size = 4
?dot@pecker_vector2@pecker_sdk@@QAEMABU12@@Z PROC	; pecker_sdk::pecker_vector2::dot, COMDAT
; _this$ = ecx

; 156  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 157  :   return (x*other.x + y*other.y);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _other$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _other$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv80[ebp]
	fld	DWORD PTR tv80[ebp]

; 158  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?dot@pecker_vector2@pecker_sdk@@QAEMABU12@@Z ENDP	; pecker_sdk::pecker_vector2::dot
_TEXT	ENDS
PUBLIC	?get_data@pecker_vector2@pecker_sdk@@QAEPAMXZ	; pecker_sdk::pecker_vector2::get_data
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?get_data@pecker_vector2@pecker_sdk@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_data@pecker_vector2@pecker_sdk@@QAEPAMXZ PROC	; pecker_sdk::pecker_vector2::get_data, COMDAT
; _this$ = ecx

; 162  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 163  :   return (Float*)this;

	mov	eax, DWORD PTR _this$[ebp]

; 164  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_data@pecker_vector2@pecker_sdk@@QAEPAMXZ ENDP	; pecker_sdk::pecker_vector2::get_data
_TEXT	ENDS
PUBLIC	??0pecker_vector3@pecker_sdk@@QAE@XZ		; pecker_sdk::pecker_vector3::pecker_vector3
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector3@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0pecker_vector3@pecker_sdk@@QAE@XZ PROC		; pecker_sdk::pecker_vector3::pecker_vector3, COMDAT
; _this$ = ecx

; 167  : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0pecker_vector3@pecker_sdk@@QAE@XZ ENDP		; pecker_sdk::pecker_vector3::pecker_vector3
_TEXT	ENDS
PUBLIC	??0pecker_vector3@pecker_sdk@@QAE@M@Z		; pecker_sdk::pecker_vector3::pecker_vector3
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector3@pecker_sdk@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_val$ = 8						; size = 4
??0pecker_vector3@pecker_sdk@@QAE@M@Z PROC		; pecker_sdk::pecker_vector3::pecker_vector3, COMDAT
; _this$ = ecx

; 169  : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _val$[ebp]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _val$[ebp]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _val$[ebp]
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0pecker_vector3@pecker_sdk@@QAE@M@Z ENDP		; pecker_sdk::pecker_vector3::pecker_vector3
_TEXT	ENDS
PUBLIC	??0pecker_vector3@pecker_sdk@@QAE@PBM@Z		; pecker_sdk::pecker_vector3::pecker_vector3
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector3@pecker_sdk@@QAE@PBM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_vec3$ = 8						; size = 4
??0pecker_vector3@pecker_sdk@@QAE@PBM@Z PROC		; pecker_sdk::pecker_vector3::pecker_vector3, COMDAT
; _this$ = ecx

; 171  : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec3$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec3$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec3$[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0pecker_vector3@pecker_sdk@@QAE@PBM@Z ENDP		; pecker_sdk::pecker_vector3::pecker_vector3
_TEXT	ENDS
PUBLIC	??0pecker_vector3@pecker_sdk@@QAE@MMM@Z		; pecker_sdk::pecker_vector3::pecker_vector3
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector3@pecker_sdk@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
??0pecker_vector3@pecker_sdk@@QAE@MMM@Z PROC		; pecker_sdk::pecker_vector3::pecker_vector3, COMDAT
; _this$ = ecx

; 173  : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0pecker_vector3@pecker_sdk@@QAE@MMM@Z ENDP		; pecker_sdk::pecker_vector3::pecker_vector3
_TEXT	ENDS
PUBLIC	??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z	; pecker_sdk::pecker_vector3::pecker_vector3
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_other$ = 8						; size = 4
??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z PROC		; pecker_sdk::pecker_vector3::pecker_vector3, COMDAT
; _this$ = ecx

; 175  : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z ENDP		; pecker_sdk::pecker_vector3::pecker_vector3
_TEXT	ENDS
PUBLIC	??0pecker_vector3@pecker_sdk@@QAE@ABUpecker_vector4@1@@Z ; pecker_sdk::pecker_vector3::pecker_vector3
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector3@pecker_sdk@@QAE@ABUpecker_vector4@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_vec4$ = 8						; size = 4
??0pecker_vector3@pecker_sdk@@QAE@ABUpecker_vector4@1@@Z PROC ; pecker_sdk::pecker_vector3::pecker_vector3, COMDAT
; _this$ = ecx

; 177  : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec4$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec4$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec4$[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0pecker_vector3@pecker_sdk@@QAE@ABUpecker_vector4@1@@Z ENDP ; pecker_sdk::pecker_vector3::pecker_vector3
_TEXT	ENDS
PUBLIC	??Ypecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z	; pecker_sdk::pecker_vector3::operator+=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Ypecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??Ypecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector3::operator+=, COMDAT
; _this$ = ecx

; 180  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 181  :   x +=Val.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 182  :   y +=Val.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Val$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 183  :   z +=Val.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Val$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 184  :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 185  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Ypecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector3::operator+=
_TEXT	ENDS
PUBLIC	??Zpecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z	; pecker_sdk::pecker_vector3::operator-=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Zpecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??Zpecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector3::operator-=, COMDAT
; _this$ = ecx

; 188  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 189  :   x -=Val.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 190  :   y -=Val.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 191  :   z -=Val.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 192  :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 193  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Zpecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector3::operator-=
_TEXT	ENDS
PUBLIC	??Xpecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z	; pecker_sdk::pecker_vector3::operator*=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Xpecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??Xpecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector3::operator*=, COMDAT
; _this$ = ecx

; 196  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 197  :   x *=Val.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 198  :   y *=Val.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Val$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 199  :   z *=Val.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Val$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 200  :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 201  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Xpecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector3::operator*=
_TEXT	ENDS
PUBLIC	??Xpecker_vector3@pecker_sdk@@QAEAAU01@M@Z	; pecker_sdk::pecker_vector3::operator*=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Xpecker_vector3@pecker_sdk@@QAEAAU01@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??Xpecker_vector3@pecker_sdk@@QAEAAU01@M@Z PROC		; pecker_sdk::pecker_vector3::operator*=, COMDAT
; _this$ = ecx

; 204  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 205  :   x *=Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 206  :   y *=Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 207  :   z *=Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 208  :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 209  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Xpecker_vector3@pecker_sdk@@QAEAAU01@M@Z ENDP		; pecker_sdk::pecker_vector3::operator*=
_TEXT	ENDS
PUBLIC	??_0pecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z ; pecker_sdk::pecker_vector3::operator/=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_0pecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??_0pecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector3::operator/=, COMDAT
; _this$ = ecx

; 212  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 213  :   x /=Val.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fdiv	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 214  :   y /=Val.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Val$[ebp]
	fdiv	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 215  :   z /=Val.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Val$[ebp]
	fdiv	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 216  :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 217  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0pecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector3::operator/=
_TEXT	ENDS
PUBLIC	??_0pecker_vector3@pecker_sdk@@QAEAAU01@M@Z	; pecker_sdk::pecker_vector3::operator/=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_0pecker_vector3@pecker_sdk@@QAEAAU01@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??_0pecker_vector3@pecker_sdk@@QAEAAU01@M@Z PROC	; pecker_sdk::pecker_vector3::operator/=, COMDAT
; _this$ = ecx

; 220  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 221  :   x /=Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 222  :   y /=Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fdiv	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 223  :   z /=Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fdiv	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 224  :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 225  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0pecker_vector3@pecker_sdk@@QAEAAU01@M@Z ENDP	; pecker_sdk::pecker_vector3::operator/=
_TEXT	ENDS
PUBLIC	??Hpecker_vector3@pecker_sdk@@QBE?AU01@ABU01@@Z	; pecker_sdk::pecker_vector3::operator+
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Hpecker_vector3@pecker_sdk@@QBE?AU01@ABU01@@Z
_TEXT	SEGMENT
_res$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Hpecker_vector3@pecker_sdk@@QBE?AU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector3::operator+, COMDAT
; _this$ = ecx

; 228  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 229  :   pecker_vector3 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector3::pecker_vector3

; 230  :   return (res += Val);

	mov	eax, DWORD PTR _Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??Ypecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z ; pecker_sdk::pecker_vector3::operator+=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector3::pecker_vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 231  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@9
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@operator@9:
	DD	1
	DD	$LN4@operator@9
$LN4@operator@9:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@operator@9
$LN3@operator@9:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Hpecker_vector3@pecker_sdk@@QBE?AU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector3::operator+
_TEXT	ENDS
PUBLIC	??Gpecker_vector3@pecker_sdk@@QBE?AU01@ABU01@@Z	; pecker_sdk::pecker_vector3::operator-
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Gpecker_vector3@pecker_sdk@@QBE?AU01@ABU01@@Z
_TEXT	SEGMENT
_res$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Gpecker_vector3@pecker_sdk@@QBE?AU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector3::operator-, COMDAT
; _this$ = ecx

; 235  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 236  :   pecker_vector3 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector3::pecker_vector3

; 237  :   return (res -= Val);

	mov	eax, DWORD PTR _Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??Zpecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z ; pecker_sdk::pecker_vector3::operator-=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector3::pecker_vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 238  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@10
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@operator@10:
	DD	1
	DD	$LN4@operator@10
$LN4@operator@10:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@operator@10
$LN3@operator@10:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Gpecker_vector3@pecker_sdk@@QBE?AU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector3::operator-
_TEXT	ENDS
PUBLIC	??Dpecker_vector3@pecker_sdk@@QBE?AU01@ABU01@@Z	; pecker_sdk::pecker_vector3::operator*
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Dpecker_vector3@pecker_sdk@@QBE?AU01@ABU01@@Z
_TEXT	SEGMENT
_res$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Dpecker_vector3@pecker_sdk@@QBE?AU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector3::operator*, COMDAT
; _this$ = ecx

; 241  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 242  :   pecker_vector3 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector3::pecker_vector3

; 243  :   return (res *= Val);

	mov	eax, DWORD PTR _Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??Xpecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z ; pecker_sdk::pecker_vector3::operator*=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector3::pecker_vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 244  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@11
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@operator@11:
	DD	1
	DD	$LN4@operator@11
$LN4@operator@11:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@operator@11
$LN3@operator@11:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Dpecker_vector3@pecker_sdk@@QBE?AU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector3::operator*
_TEXT	ENDS
PUBLIC	??Dpecker_vector3@pecker_sdk@@QBE?AU01@M@Z	; pecker_sdk::pecker_vector3::operator*
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Dpecker_vector3@pecker_sdk@@QBE?AU01@M@Z
_TEXT	SEGMENT
_res$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Dpecker_vector3@pecker_sdk@@QBE?AU01@M@Z PROC		; pecker_sdk::pecker_vector3::operator*, COMDAT
; _this$ = ecx

; 247  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 248  :   pecker_vector3 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector3::pecker_vector3

; 249  :   return (res *= Val);

	push	ecx
	fld	DWORD PTR _Val$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _res$[ebp]
	call	??Xpecker_vector3@pecker_sdk@@QAEAAU01@M@Z ; pecker_sdk::pecker_vector3::operator*=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector3::pecker_vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 250  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@12
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN5@operator@12:
	DD	1
	DD	$LN4@operator@12
$LN4@operator@12:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@operator@12
$LN3@operator@12:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Dpecker_vector3@pecker_sdk@@QBE?AU01@M@Z ENDP		; pecker_sdk::pecker_vector3::operator*
_TEXT	ENDS
PUBLIC	??Kpecker_vector3@pecker_sdk@@QBE?AU01@ABU01@@Z	; pecker_sdk::pecker_vector3::operator/
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Kpecker_vector3@pecker_sdk@@QBE?AU01@ABU01@@Z
_TEXT	SEGMENT
_res$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Kpecker_vector3@pecker_sdk@@QBE?AU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector3::operator/, COMDAT
; _this$ = ecx

; 253  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 254  :   pecker_vector3 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector3::pecker_vector3

; 255  :   return (res /= Val);

	mov	eax, DWORD PTR _Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??_0pecker_vector3@pecker_sdk@@QAEAAU01@ABU01@@Z ; pecker_sdk::pecker_vector3::operator/=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector3::pecker_vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 256  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@13
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@operator@13:
	DD	1
	DD	$LN4@operator@13
$LN4@operator@13:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@operator@13
$LN3@operator@13:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Kpecker_vector3@pecker_sdk@@QBE?AU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector3::operator/
_TEXT	ENDS
PUBLIC	??Kpecker_vector3@pecker_sdk@@QBE?AU01@M@Z	; pecker_sdk::pecker_vector3::operator/
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Kpecker_vector3@pecker_sdk@@QBE?AU01@M@Z
_TEXT	SEGMENT
_res$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Kpecker_vector3@pecker_sdk@@QBE?AU01@M@Z PROC		; pecker_sdk::pecker_vector3::operator/, COMDAT
; _this$ = ecx

; 259  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 260  :   pecker_vector3 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector3::pecker_vector3

; 261  :   return (res /= Val);

	push	ecx
	fld	DWORD PTR _Val$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _res$[ebp]
	call	??_0pecker_vector3@pecker_sdk@@QAEAAU01@M@Z ; pecker_sdk::pecker_vector3::operator/=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector3::pecker_vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 262  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@14
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN5@operator@14:
	DD	1
	DD	$LN4@operator@14
$LN4@operator@14:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@operator@14
$LN3@operator@14:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Kpecker_vector3@pecker_sdk@@QBE?AU01@M@Z ENDP		; pecker_sdk::pecker_vector3::operator/
_TEXT	ENDS
PUBLIC	??8pecker_vector3@pecker_sdk@@QBE_NABU01@@Z	; pecker_sdk::pecker_vector3::operator==
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??8pecker_vector3@pecker_sdk@@QBE_NABU01@@Z
_TEXT	SEGMENT
tv155 = -244						; size = 4
tv152 = -237						; size = 1
tv200 = -236						; size = 4
tv192 = -232						; size = 4
tv129 = -225						; size = 1
tv184 = -224						; size = 4
tv176 = -220						; size = 4
tv78 = -213						; size = 1
tv168 = -212						; size = 4
tv160 = -208						; size = 4
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??8pecker_vector3@pecker_sdk@@QBE_NABU01@@Z PROC	; pecker_sdk::pecker_vector3::operator==, COMDAT
; _this$ = ecx

; 265  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 266  :   return (EQFLOATZERO( x - Val.x ) && EQFLOATZERO( y - Val.y) && EQFLOATZERO( z - Val.z ));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR tv160[ebp]
	fld	DWORD PTR tv160[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@15
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [eax]
	fstp	DWORD PTR tv168[ebp]
	fld	DWORD PTR tv168[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@15
	mov	BYTE PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator@15
$LN3@operator@15:
	mov	BYTE PTR tv78[ebp], 0
$LN4@operator@15:
	movzx	ecx, BYTE PTR tv78[ebp]
	test	ecx, ecx
	je	$LN7@operator@15
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv176[ebp]
	fld	DWORD PTR tv176[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN5@operator@15
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [edx+4]
	fstp	DWORD PTR tv184[ebp]
	fld	DWORD PTR tv184[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN5@operator@15
	mov	BYTE PTR tv129[ebp], 1
	jmp	SHORT $LN6@operator@15
$LN5@operator@15:
	mov	BYTE PTR tv129[ebp], 0
$LN6@operator@15:
	movzx	eax, BYTE PTR tv129[ebp]
	test	eax, eax
	je	SHORT $LN7@operator@15
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [edx+8]
	fstp	DWORD PTR tv192[ebp]
	fld	DWORD PTR tv192[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN8@operator@15
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv200[ebp]
	fld	DWORD PTR tv200[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN8@operator@15
	mov	BYTE PTR tv152[ebp], 1
	jmp	SHORT $LN9@operator@15
$LN8@operator@15:
	mov	BYTE PTR tv152[ebp], 0
$LN9@operator@15:
	movzx	edx, BYTE PTR tv152[ebp]
	test	edx, edx
	je	SHORT $LN7@operator@15
	mov	DWORD PTR tv155[ebp], 1
	jmp	SHORT $LN10@operator@15
$LN7@operator@15:
	mov	DWORD PTR tv155[ebp], 0
$LN10@operator@15:
	mov	al, BYTE PTR tv155[ebp]

; 267  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8pecker_vector3@pecker_sdk@@QBE_NABU01@@Z ENDP	; pecker_sdk::pecker_vector3::operator==
_TEXT	ENDS
PUBLIC	??9pecker_vector3@pecker_sdk@@QBE_NABU01@@Z	; pecker_sdk::pecker_vector3::operator!=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9pecker_vector3@pecker_sdk@@QBE_NABU01@@Z
_TEXT	SEGMENT
tv155 = -244						; size = 4
tv152 = -237						; size = 1
tv200 = -236						; size = 4
tv192 = -232						; size = 4
tv131 = -225						; size = 1
tv184 = -224						; size = 4
tv176 = -220						; size = 4
tv78 = -213						; size = 1
tv168 = -212						; size = 4
tv160 = -208						; size = 4
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??9pecker_vector3@pecker_sdk@@QBE_NABU01@@Z PROC	; pecker_sdk::pecker_vector3::operator!=, COMDAT
; _this$ = ecx

; 270  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 271  :   return ((!(EQFLOATZERO( x - Val.x ))) || (!(EQFLOATZERO( y - Val.y ))) || (!(EQFLOATZERO( z - Val.z ))));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR tv160[ebp]
	fld	DWORD PTR tv160[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@16
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [eax]
	fstp	DWORD PTR tv168[ebp]
	fld	DWORD PTR tv168[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@16
	mov	BYTE PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator@16
$LN3@operator@16:
	mov	BYTE PTR tv78[ebp], 0
$LN4@operator@16:
	movzx	ecx, BYTE PTR tv78[ebp]
	test	ecx, ecx
	je	$LN7@operator@16
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv176[ebp]
	fld	DWORD PTR tv176[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN5@operator@16
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [edx+4]
	fstp	DWORD PTR tv184[ebp]
	fld	DWORD PTR tv184[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN5@operator@16
	mov	BYTE PTR tv131[ebp], 1
	jmp	SHORT $LN6@operator@16
$LN5@operator@16:
	mov	BYTE PTR tv131[ebp], 0
$LN6@operator@16:
	movzx	eax, BYTE PTR tv131[ebp]
	test	eax, eax
	je	SHORT $LN7@operator@16
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [edx+8]
	fstp	DWORD PTR tv192[ebp]
	fld	DWORD PTR tv192[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN8@operator@16
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv200[ebp]
	fld	DWORD PTR tv200[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN8@operator@16
	mov	BYTE PTR tv152[ebp], 1
	jmp	SHORT $LN9@operator@16
$LN8@operator@16:
	mov	BYTE PTR tv152[ebp], 0
$LN9@operator@16:
	movzx	edx, BYTE PTR tv152[ebp]
	test	edx, edx
	je	SHORT $LN7@operator@16
	mov	DWORD PTR tv155[ebp], 0
	jmp	SHORT $LN10@operator@16
$LN7@operator@16:
	mov	DWORD PTR tv155[ebp], 1
$LN10@operator@16:
	mov	al, BYTE PTR tv155[ebp]

; 272  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??9pecker_vector3@pecker_sdk@@QBE_NABU01@@Z ENDP	; pecker_sdk::pecker_vector3::operator!=
_TEXT	ENDS
PUBLIC	?length_square@pecker_vector3@pecker_sdk@@QBEMXZ ; pecker_sdk::pecker_vector3::length_square
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?length_square@pecker_vector3@pecker_sdk@@QBEMXZ
_TEXT	SEGMENT
tv88 = -208						; size = 4
_this$ = -8						; size = 4
?length_square@pecker_vector3@pecker_sdk@@QBEMXZ PROC	; pecker_sdk::pecker_vector3::length_square, COMDAT
; _this$ = ecx

; 275  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 276  :   return (x*x+y*y+z*z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]

; 277  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?length_square@pecker_vector3@pecker_sdk@@QBEMXZ ENDP	; pecker_sdk::pecker_vector3::length_square
_TEXT	ENDS
PUBLIC	?length@pecker_vector3@pecker_sdk@@QBEMXZ	; pecker_sdk::pecker_vector3::length
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?length@pecker_vector3@pecker_sdk@@QBEMXZ
_TEXT	SEGMENT
tv89 = -256						; size = 4
_dz$ = -56						; size = 8
_dy$ = -40						; size = 8
_dx$ = -24						; size = 8
_this$ = -8						; size = 4
?length@pecker_vector3@pecker_sdk@@QBEMXZ PROC		; pecker_sdk::pecker_vector3::length, COMDAT
; _this$ = ecx

; 279  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 280  :   Double dx = x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	QWORD PTR _dx$[ebp]

; 281  :   Double dy = y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	QWORD PTR _dy$[ebp]

; 282  :   Double dz = z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	QWORD PTR _dz$[ebp]

; 283  :   return (Float)(sqrt(dx*dx+dy*dy+dz*dz));

	fld	QWORD PTR _dx$[ebp]
	fmul	QWORD PTR _dx$[ebp]
	fld	QWORD PTR _dy$[ebp]
	fmul	QWORD PTR _dy$[ebp]
	faddp	ST(1), ST(0)
	fld	QWORD PTR _dz$[ebp]
	fmul	QWORD PTR _dz$[ebp]
	faddp	ST(1), ST(0)
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv89[ebp]
	fld	DWORD PTR tv89[ebp]

; 284  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@pecker_vector3@pecker_sdk@@QBEMXZ ENDP		; pecker_sdk::pecker_vector3::length
_TEXT	ENDS
PUBLIC	?normalize@pecker_vector3@pecker_sdk@@QAE?AU12@XZ ; pecker_sdk::pecker_vector3::normalize
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?normalize@pecker_vector3@pecker_sdk@@QAE?AU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?normalize@pecker_vector3@pecker_sdk@@QAE?AU12@XZ PROC	; pecker_sdk::pecker_vector3::normalize, COMDAT
; _this$ = ecx

; 286  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 287  :   return (*this /= length());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@pecker_vector3@pecker_sdk@@QBEMXZ ; pecker_sdk::pecker_vector3::length
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??_0pecker_vector3@pecker_sdk@@QAEAAU01@M@Z ; pecker_sdk::pecker_vector3::operator/=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector3::pecker_vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 288  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?normalize@pecker_vector3@pecker_sdk@@QAE?AU12@XZ ENDP	; pecker_sdk::pecker_vector3::normalize
_TEXT	ENDS
PUBLIC	?normalized@pecker_vector3@pecker_sdk@@QBE?AU12@XZ ; pecker_sdk::pecker_vector3::normalized
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?normalized@pecker_vector3@pecker_sdk@@QBE?AU12@XZ
_TEXT	SEGMENT
_res$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?normalized@pecker_vector3@pecker_sdk@@QBE?AU12@XZ PROC	; pecker_sdk::pecker_vector3::normalized, COMDAT
; _this$ = ecx

; 291  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 292  :   pecker_vector3 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector3::pecker_vector3

; 293  :   return (res /= length());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@pecker_vector3@pecker_sdk@@QBEMXZ ; pecker_sdk::pecker_vector3::length
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _res$[ebp]
	call	??_0pecker_vector3@pecker_sdk@@QAEAAU01@M@Z ; pecker_sdk::pecker_vector3::operator/=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector3::pecker_vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 294  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@normalized
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN5@normalized:
	DD	1
	DD	$LN4@normalized
$LN4@normalized:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@normalized
$LN3@normalized:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?normalized@pecker_vector3@pecker_sdk@@QBE?AU12@XZ ENDP	; pecker_sdk::pecker_vector3::normalized
_TEXT	ENDS
PUBLIC	?dot@pecker_vector3@pecker_sdk@@QAEMABU12@@Z	; pecker_sdk::pecker_vector3::dot
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?dot@pecker_vector3@pecker_sdk@@QAEMABU12@@Z
_TEXT	SEGMENT
tv88 = -208						; size = 4
_this$ = -8						; size = 4
_other$ = 8						; size = 4
?dot@pecker_vector3@pecker_sdk@@QAEMABU12@@Z PROC	; pecker_sdk::pecker_vector3::dot, COMDAT
; _this$ = ecx

; 297  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 298  :   return (x*other.x + y*other.y + z*other.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _other$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _other$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _other$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv88[ebp]
	fld	DWORD PTR tv88[ebp]

; 299  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?dot@pecker_vector3@pecker_sdk@@QAEMABU12@@Z ENDP	; pecker_sdk::pecker_vector3::dot
_TEXT	ENDS
PUBLIC	?cross@pecker_vector3@pecker_sdk@@QBE?AU12@ABU12@@Z ; pecker_sdk::pecker_vector3::cross
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?cross@pecker_vector3@pecker_sdk@@QBE?AU12@ABU12@@Z
_TEXT	SEGMENT
_res$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_other$ = 12						; size = 4
?cross@pecker_vector3@pecker_sdk@@QBE?AU12@ABU12@@Z PROC ; pecker_sdk::pecker_vector3::cross, COMDAT
; _this$ = ecx

; 303  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 304  :   pecker_vector3 res;

	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector3@pecker_sdk@@QAE@XZ	; pecker_sdk::pecker_vector3::pecker_vector3

; 305  :   res.x = y*other.z - z*other.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _other$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _other$[ebp]
	fmul	DWORD PTR [eax+4]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _res$[ebp]

; 306  :   res.y = z*other.x - x*other.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _other$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _other$[ebp]
	fmul	DWORD PTR [eax+8]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _res$[ebp+4]

; 307  :   res.z = x*other.y - y*other.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _other$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _other$[ebp]
	fmul	DWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _res$[ebp+8]

; 308  :   return res;

	lea	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector3@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector3::pecker_vector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 309  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@cross
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN5@cross:
	DD	1
	DD	$LN4@cross
$LN4@cross:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN3@cross
$LN3@cross:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?cross@pecker_vector3@pecker_sdk@@QBE?AU12@ABU12@@Z ENDP ; pecker_sdk::pecker_vector3::cross
_TEXT	ENDS
PUBLIC	?get_data@pecker_vector3@pecker_sdk@@QAEPAMXZ	; pecker_sdk::pecker_vector3::get_data
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?get_data@pecker_vector3@pecker_sdk@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_data@pecker_vector3@pecker_sdk@@QAEPAMXZ PROC	; pecker_sdk::pecker_vector3::get_data, COMDAT
; _this$ = ecx

; 312  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 313  :   return (Float*)this;

	mov	eax, DWORD PTR _this$[ebp]

; 314  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_data@pecker_vector3@pecker_sdk@@QAEPAMXZ ENDP	; pecker_sdk::pecker_vector3::get_data
_TEXT	ENDS
PUBLIC	??0pecker_vector4@pecker_sdk@@QAE@XZ		; pecker_sdk::pecker_vector4::pecker_vector4
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector4@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0pecker_vector4@pecker_sdk@@QAE@XZ PROC		; pecker_sdk::pecker_vector4::pecker_vector4, COMDAT
; _this$ = ecx

; 317  : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0pecker_vector4@pecker_sdk@@QAE@XZ ENDP		; pecker_sdk::pecker_vector4::pecker_vector4
_TEXT	ENDS
PUBLIC	??0pecker_vector4@pecker_sdk@@QAE@M@Z		; pecker_sdk::pecker_vector4::pecker_vector4
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector4@pecker_sdk@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_val$ = 8						; size = 4
??0pecker_vector4@pecker_sdk@@QAE@M@Z PROC		; pecker_sdk::pecker_vector4::pecker_vector4, COMDAT
; _this$ = ecx

; 319  : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _val$[ebp]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _val$[ebp]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _val$[ebp]
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _val$[ebp]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0pecker_vector4@pecker_sdk@@QAE@M@Z ENDP		; pecker_sdk::pecker_vector4::pecker_vector4
_TEXT	ENDS
PUBLIC	??0pecker_vector4@pecker_sdk@@QAE@PBM@Z		; pecker_sdk::pecker_vector4::pecker_vector4
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector4@pecker_sdk@@QAE@PBM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_vec4$ = 8						; size = 4
??0pecker_vector4@pecker_sdk@@QAE@PBM@Z PROC		; pecker_sdk::pecker_vector4::pecker_vector4, COMDAT
; _this$ = ecx

; 321  : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec4$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec4$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec4$[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec4$[ebp]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0pecker_vector4@pecker_sdk@@QAE@PBM@Z ENDP		; pecker_sdk::pecker_vector4::pecker_vector4
_TEXT	ENDS
PUBLIC	??0pecker_vector4@pecker_sdk@@QAE@MMMM@Z	; pecker_sdk::pecker_vector4::pecker_vector4
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector4@pecker_sdk@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_w$ = 20						; size = 4
??0pecker_vector4@pecker_sdk@@QAE@MMMM@Z PROC		; pecker_sdk::pecker_vector4::pecker_vector4, COMDAT
; _this$ = ecx

; 323  : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0pecker_vector4@pecker_sdk@@QAE@MMMM@Z ENDP		; pecker_sdk::pecker_vector4::pecker_vector4
_TEXT	ENDS
PUBLIC	??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z	; pecker_sdk::pecker_vector4::pecker_vector4
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_other$ = 8						; size = 4
??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z PROC		; pecker_sdk::pecker_vector4::pecker_vector4, COMDAT
; _this$ = ecx

; 325  : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z ENDP		; pecker_sdk::pecker_vector4::pecker_vector4
_TEXT	ENDS
PUBLIC	??0pecker_vector4@pecker_sdk@@QAE@ABUpecker_vector3@1@M@Z ; pecker_sdk::pecker_vector4::pecker_vector4
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector4@pecker_sdk@@QAE@ABUpecker_vector3@1@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_vec3$ = 8						; size = 4
_w$ = 12						; size = 4
??0pecker_vector4@pecker_sdk@@QAE@ABUpecker_vector3@1@M@Z PROC ; pecker_sdk::pecker_vector4::pecker_vector4, COMDAT
; _this$ = ecx

; 327  : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec3$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec3$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec3$[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _w$[ebp]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0pecker_vector4@pecker_sdk@@QAE@ABUpecker_vector3@1@M@Z ENDP ; pecker_sdk::pecker_vector4::pecker_vector4
_TEXT	ENDS
PUBLIC	??0pecker_vector4@pecker_sdk@@QAE@MABUpecker_vector3@1@@Z ; pecker_sdk::pecker_vector4::pecker_vector4
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0pecker_vector4@pecker_sdk@@QAE@MABUpecker_vector3@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_x$ = 8							; size = 4
_vec3$ = 12						; size = 4
??0pecker_vector4@pecker_sdk@@QAE@MABUpecker_vector3@1@@Z PROC ; pecker_sdk::pecker_vector4::pecker_vector4, COMDAT
; _this$ = ecx

; 329  : { ;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec3$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec3$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _vec3$[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0pecker_vector4@pecker_sdk@@QAE@MABUpecker_vector3@1@@Z ENDP ; pecker_sdk::pecker_vector4::pecker_vector4
_TEXT	ENDS
PUBLIC	??Ypecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z	; pecker_sdk::pecker_vector4::operator+=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Ypecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??Ypecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector4::operator+=, COMDAT
; _this$ = ecx

; 332  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 333  :   x += Val.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 334  :   y += Val.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Val$[ebp]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 335  :   z += Val.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Val$[ebp]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 336  :   w += Val.w;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _Val$[ebp]
	fadd	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+12]

; 337  :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 338  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Ypecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector4::operator+=
_TEXT	ENDS
PUBLIC	??Zpecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z	; pecker_sdk::pecker_vector4::operator-=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Zpecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??Zpecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector4::operator-=, COMDAT
; _this$ = ecx

; 342  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 343  :   x -= Val.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 344  :   y -= Val.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 345  :   z -= Val.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 346  :   w -= Val.w;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+12]

; 347  :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 348  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Zpecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector4::operator-=
_TEXT	ENDS
PUBLIC	??Xpecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z	; pecker_sdk::pecker_vector4::operator*=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Xpecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??Xpecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector4::operator*=, COMDAT
; _this$ = ecx

; 351  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 352  :   x *= Val.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 353  :   y *= Val.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Val$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 354  :   z *= Val.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Val$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 355  :   w *= Val.w;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _Val$[ebp]
	fmul	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+12]

; 356  :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 357  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Xpecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector4::operator*=
_TEXT	ENDS
PUBLIC	??Xpecker_vector4@pecker_sdk@@QAEAAU01@M@Z	; pecker_sdk::pecker_vector4::operator*=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Xpecker_vector4@pecker_sdk@@QAEAAU01@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??Xpecker_vector4@pecker_sdk@@QAEAAU01@M@Z PROC		; pecker_sdk::pecker_vector4::operator*=, COMDAT
; _this$ = ecx

; 360  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 361  :   x *= Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 362  :   y *= Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 363  :   z *= Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 364  :   w *= Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fmul	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 365  :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 366  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Xpecker_vector4@pecker_sdk@@QAEAAU01@M@Z ENDP		; pecker_sdk::pecker_vector4::operator*=
_TEXT	ENDS
PUBLIC	??_0pecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z ; pecker_sdk::pecker_vector4::operator/=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_0pecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??_0pecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector4::operator/=, COMDAT
; _this$ = ecx

; 369  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 370  :   x /= Val.x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fdiv	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]

; 371  :   y /= Val.y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Val$[ebp]
	fdiv	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]

; 372  :   z /= Val.z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Val$[ebp]
	fdiv	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]

; 373  :   w /= Val.w;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _Val$[ebp]
	fdiv	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+12]

; 374  :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 375  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0pecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector4::operator/=
_TEXT	ENDS
PUBLIC	??_0pecker_vector4@pecker_sdk@@QAEAAU01@M@Z	; pecker_sdk::pecker_vector4::operator/=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_0pecker_vector4@pecker_sdk@@QAEAAU01@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??_0pecker_vector4@pecker_sdk@@QAEAAU01@M@Z PROC	; pecker_sdk::pecker_vector4::operator/=, COMDAT
; _this$ = ecx

; 378  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 379  :   x /= Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fdiv	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 380  :   y /= Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fdiv	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 381  :   z /= Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fdiv	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 382  :   w /= Val;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fdiv	DWORD PTR _Val$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+12]

; 383  :   return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 384  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??_0pecker_vector4@pecker_sdk@@QAEAAU01@M@Z ENDP	; pecker_sdk::pecker_vector4::operator/=
_TEXT	ENDS
PUBLIC	??Hpecker_vector4@pecker_sdk@@QBE?AU01@ABU01@@Z	; pecker_sdk::pecker_vector4::operator+
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Hpecker_vector4@pecker_sdk@@QBE?AU01@ABU01@@Z
_TEXT	SEGMENT
_res$ = -32						; size = 16
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Hpecker_vector4@pecker_sdk@@QBE?AU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector4::operator+, COMDAT
; _this$ = ecx

; 387  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 388  :   pecker_vector4 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector4::pecker_vector4

; 389  :   return (res += Val);

	mov	eax, DWORD PTR _Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??Ypecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z ; pecker_sdk::pecker_vector4::operator+=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector4::pecker_vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 390  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@17
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@operator@17:
	DD	1
	DD	$LN4@operator@17
$LN4@operator@17:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@operator@17
$LN3@operator@17:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Hpecker_vector4@pecker_sdk@@QBE?AU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector4::operator+
_TEXT	ENDS
PUBLIC	??Gpecker_vector4@pecker_sdk@@QBE?AU01@ABU01@@Z	; pecker_sdk::pecker_vector4::operator-
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Gpecker_vector4@pecker_sdk@@QBE?AU01@ABU01@@Z
_TEXT	SEGMENT
_res$ = -32						; size = 16
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Gpecker_vector4@pecker_sdk@@QBE?AU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector4::operator-, COMDAT
; _this$ = ecx

; 393  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 394  :   pecker_vector4 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector4::pecker_vector4

; 395  :   return (res -= Val);

	mov	eax, DWORD PTR _Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??Zpecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z ; pecker_sdk::pecker_vector4::operator-=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector4::pecker_vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 396  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@18
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@operator@18:
	DD	1
	DD	$LN4@operator@18
$LN4@operator@18:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@operator@18
$LN3@operator@18:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Gpecker_vector4@pecker_sdk@@QBE?AU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector4::operator-
_TEXT	ENDS
PUBLIC	??Dpecker_vector4@pecker_sdk@@QBE?AU01@ABU01@@Z	; pecker_sdk::pecker_vector4::operator*
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Dpecker_vector4@pecker_sdk@@QBE?AU01@ABU01@@Z
_TEXT	SEGMENT
_res$ = -32						; size = 16
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Dpecker_vector4@pecker_sdk@@QBE?AU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector4::operator*, COMDAT
; _this$ = ecx

; 399  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 400  :   pecker_vector4 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector4::pecker_vector4

; 401  :   return (res *= Val);

	mov	eax, DWORD PTR _Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??Xpecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z ; pecker_sdk::pecker_vector4::operator*=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector4::pecker_vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 402  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@19
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@operator@19:
	DD	1
	DD	$LN4@operator@19
$LN4@operator@19:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@operator@19
$LN3@operator@19:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Dpecker_vector4@pecker_sdk@@QBE?AU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector4::operator*
_TEXT	ENDS
PUBLIC	??Dpecker_vector4@pecker_sdk@@QBE?AU01@M@Z	; pecker_sdk::pecker_vector4::operator*
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Dpecker_vector4@pecker_sdk@@QBE?AU01@M@Z
_TEXT	SEGMENT
_res$ = -32						; size = 16
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Dpecker_vector4@pecker_sdk@@QBE?AU01@M@Z PROC		; pecker_sdk::pecker_vector4::operator*, COMDAT
; _this$ = ecx

; 405  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 406  :   pecker_vector4 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector4::pecker_vector4

; 407  :   return (res *= Val);

	push	ecx
	fld	DWORD PTR _Val$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _res$[ebp]
	call	??Xpecker_vector4@pecker_sdk@@QAEAAU01@M@Z ; pecker_sdk::pecker_vector4::operator*=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector4::pecker_vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 408  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@20
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN5@operator@20:
	DD	1
	DD	$LN4@operator@20
$LN4@operator@20:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@operator@20
$LN3@operator@20:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Dpecker_vector4@pecker_sdk@@QBE?AU01@M@Z ENDP		; pecker_sdk::pecker_vector4::operator*
_TEXT	ENDS
PUBLIC	??Kpecker_vector4@pecker_sdk@@QBE?AU01@ABU01@@Z	; pecker_sdk::pecker_vector4::operator/
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Kpecker_vector4@pecker_sdk@@QBE?AU01@ABU01@@Z
_TEXT	SEGMENT
_res$ = -32						; size = 16
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Kpecker_vector4@pecker_sdk@@QBE?AU01@ABU01@@Z PROC	; pecker_sdk::pecker_vector4::operator/, COMDAT
; _this$ = ecx

; 411  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 412  :   pecker_vector4 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector4::pecker_vector4

; 413  :   return (res /= Val);

	mov	eax, DWORD PTR _Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??_0pecker_vector4@pecker_sdk@@QAEAAU01@ABU01@@Z ; pecker_sdk::pecker_vector4::operator/=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector4::pecker_vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 414  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@21
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@operator@21:
	DD	1
	DD	$LN4@operator@21
$LN4@operator@21:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@operator@21
$LN3@operator@21:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Kpecker_vector4@pecker_sdk@@QBE?AU01@ABU01@@Z ENDP	; pecker_sdk::pecker_vector4::operator/
_TEXT	ENDS
PUBLIC	??Kpecker_vector4@pecker_sdk@@QBE?AU01@M@Z	; pecker_sdk::pecker_vector4::operator/
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Kpecker_vector4@pecker_sdk@@QBE?AU01@M@Z
_TEXT	SEGMENT
_res$ = -32						; size = 16
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Val$ = 12						; size = 4
??Kpecker_vector4@pecker_sdk@@QBE?AU01@M@Z PROC		; pecker_sdk::pecker_vector4::operator/, COMDAT
; _this$ = ecx

; 418  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 419  :   pecker_vector4 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector4::pecker_vector4

; 420  :   return (res /= Val);

	push	ecx
	fld	DWORD PTR _Val$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _res$[ebp]
	call	??_0pecker_vector4@pecker_sdk@@QAEAAU01@M@Z ; pecker_sdk::pecker_vector4::operator/=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector4::pecker_vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 421  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@22
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN5@operator@22:
	DD	1
	DD	$LN4@operator@22
$LN4@operator@22:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@operator@22
$LN3@operator@22:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
??Kpecker_vector4@pecker_sdk@@QBE?AU01@M@Z ENDP		; pecker_sdk::pecker_vector4::operator/
_TEXT	ENDS
PUBLIC	??8pecker_vector4@pecker_sdk@@QBE_NABU01@@Z	; pecker_sdk::pecker_vector4::operator==
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??8pecker_vector4@pecker_sdk@@QBE_NABU01@@Z
_TEXT	SEGMENT
tv176 = -256						; size = 4
tv173 = -249						; size = 1
tv237 = -248						; size = 4
tv229 = -244						; size = 4
tv152 = -237						; size = 1
tv221 = -236						; size = 4
tv213 = -232						; size = 4
tv129 = -225						; size = 1
tv205 = -224						; size = 4
tv197 = -220						; size = 4
tv78 = -213						; size = 1
tv189 = -212						; size = 4
tv181 = -208						; size = 4
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??8pecker_vector4@pecker_sdk@@QBE_NABU01@@Z PROC	; pecker_sdk::pecker_vector4::operator==, COMDAT
; _this$ = ecx

; 424  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 425  :   return (EQFLOATZERO( x - Val.x ) && EQFLOATZERO( y - Val.y) && EQFLOATZERO( z - Val.z ) && EQFLOATZERO( w - Val.w ));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR tv181[ebp]
	fld	DWORD PTR tv181[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@23
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [eax]
	fstp	DWORD PTR tv189[ebp]
	fld	DWORD PTR tv189[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@23
	mov	BYTE PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator@23
$LN3@operator@23:
	mov	BYTE PTR tv78[ebp], 0
$LN4@operator@23:
	movzx	ecx, BYTE PTR tv78[ebp]
	test	ecx, ecx
	je	$LN7@operator@23
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv197[ebp]
	fld	DWORD PTR tv197[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN5@operator@23
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [edx+4]
	fstp	DWORD PTR tv205[ebp]
	fld	DWORD PTR tv205[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN5@operator@23
	mov	BYTE PTR tv129[ebp], 1
	jmp	SHORT $LN6@operator@23
$LN5@operator@23:
	mov	BYTE PTR tv129[ebp], 0
$LN6@operator@23:
	movzx	eax, BYTE PTR tv129[ebp]
	test	eax, eax
	je	$LN7@operator@23
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [edx+8]
	fstp	DWORD PTR tv213[ebp]
	fld	DWORD PTR tv213[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN8@operator@23
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv221[ebp]
	fld	DWORD PTR tv221[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN8@operator@23
	mov	BYTE PTR tv152[ebp], 1
	jmp	SHORT $LN9@operator@23
$LN8@operator@23:
	mov	BYTE PTR tv152[ebp], 0
$LN9@operator@23:
	movzx	edx, BYTE PTR tv152[ebp]
	test	edx, edx
	je	SHORT $LN7@operator@23
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx+12]
	fstp	DWORD PTR tv229[ebp]
	fld	DWORD PTR tv229[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN10@operator@23
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+12]
	mov	eax, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [eax+12]
	fstp	DWORD PTR tv237[ebp]
	fld	DWORD PTR tv237[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN10@operator@23
	mov	BYTE PTR tv173[ebp], 1
	jmp	SHORT $LN11@operator@23
$LN10@operator@23:
	mov	BYTE PTR tv173[ebp], 0
$LN11@operator@23:
	movzx	ecx, BYTE PTR tv173[ebp]
	test	ecx, ecx
	je	SHORT $LN7@operator@23
	mov	DWORD PTR tv176[ebp], 1
	jmp	SHORT $LN12@operator@23
$LN7@operator@23:
	mov	DWORD PTR tv176[ebp], 0
$LN12@operator@23:
	mov	al, BYTE PTR tv176[ebp]

; 426  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8pecker_vector4@pecker_sdk@@QBE_NABU01@@Z ENDP	; pecker_sdk::pecker_vector4::operator==
_TEXT	ENDS
PUBLIC	??9pecker_vector4@pecker_sdk@@QBE_NABU01@@Z	; pecker_sdk::pecker_vector4::operator!=
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??9pecker_vector4@pecker_sdk@@QBE_NABU01@@Z
_TEXT	SEGMENT
tv176 = -256						; size = 4
tv173 = -249						; size = 1
tv237 = -248						; size = 4
tv229 = -244						; size = 4
tv152 = -237						; size = 1
tv221 = -236						; size = 4
tv213 = -232						; size = 4
tv131 = -225						; size = 1
tv205 = -224						; size = 4
tv197 = -220						; size = 4
tv78 = -213						; size = 1
tv189 = -212						; size = 4
tv181 = -208						; size = 4
_this$ = -8						; size = 4
_Val$ = 8						; size = 4
??9pecker_vector4@pecker_sdk@@QBE_NABU01@@Z PROC	; pecker_sdk::pecker_vector4::operator!=, COMDAT
; _this$ = ecx

; 429  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 430  :   return ((!(EQFLOATZERO( x - Val.x ))) || (!(EQFLOATZERO( y - Val.y ))) || (!(EQFLOATZERO( z - Val.z ))) || (!EQFLOATZERO( w - Val.w )));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx]
	fstp	DWORD PTR tv181[ebp]
	fld	DWORD PTR tv181[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@operator@24
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [eax]
	fstp	DWORD PTR tv189[ebp]
	fld	DWORD PTR tv189[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@operator@24
	mov	BYTE PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator@24
$LN3@operator@24:
	mov	BYTE PTR tv78[ebp], 0
$LN4@operator@24:
	movzx	ecx, BYTE PTR tv78[ebp]
	test	ecx, ecx
	je	$LN7@operator@24
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv197[ebp]
	fld	DWORD PTR tv197[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN5@operator@24
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [edx+4]
	fstp	DWORD PTR tv205[ebp]
	fld	DWORD PTR tv205[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN5@operator@24
	mov	BYTE PTR tv131[ebp], 1
	jmp	SHORT $LN6@operator@24
$LN5@operator@24:
	mov	BYTE PTR tv131[ebp], 0
$LN6@operator@24:
	movzx	eax, BYTE PTR tv131[ebp]
	test	eax, eax
	je	$LN7@operator@24
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [edx+8]
	fstp	DWORD PTR tv213[ebp]
	fld	DWORD PTR tv213[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN8@operator@24
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv221[ebp]
	fld	DWORD PTR tv221[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN8@operator@24
	mov	BYTE PTR tv152[ebp], 1
	jmp	SHORT $LN9@operator@24
$LN8@operator@24:
	mov	BYTE PTR tv152[ebp], 0
$LN9@operator@24:
	movzx	edx, BYTE PTR tv152[ebp]
	test	edx, edx
	je	SHORT $LN7@operator@24
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [ecx+12]
	fstp	DWORD PTR tv229[ebp]
	fld	DWORD PTR tv229[ebp]
	fcomp	QWORD PTR __real@3eb0c6f7a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN10@operator@24
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+12]
	mov	eax, DWORD PTR _Val$[ebp]
	fsub	DWORD PTR [eax+12]
	fstp	DWORD PTR tv237[ebp]
	fld	DWORD PTR tv237[ebp]
	fcomp	QWORD PTR __real@beb0c6f7a0000000
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN10@operator@24
	mov	BYTE PTR tv173[ebp], 1
	jmp	SHORT $LN11@operator@24
$LN10@operator@24:
	mov	BYTE PTR tv173[ebp], 0
$LN11@operator@24:
	movzx	ecx, BYTE PTR tv173[ebp]
	test	ecx, ecx
	je	SHORT $LN7@operator@24
	mov	DWORD PTR tv176[ebp], 0
	jmp	SHORT $LN12@operator@24
$LN7@operator@24:
	mov	DWORD PTR tv176[ebp], 1
$LN12@operator@24:
	mov	al, BYTE PTR tv176[ebp]

; 431  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??9pecker_vector4@pecker_sdk@@QBE_NABU01@@Z ENDP	; pecker_sdk::pecker_vector4::operator!=
_TEXT	ENDS
PUBLIC	?length_square@pecker_vector4@pecker_sdk@@QBEMXZ ; pecker_sdk::pecker_vector4::length_square
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?length_square@pecker_vector4@pecker_sdk@@QBEMXZ
_TEXT	SEGMENT
tv128 = -208						; size = 4
_this$ = -8						; size = 4
?length_square@pecker_vector4@pecker_sdk@@QBEMXZ PROC	; pecker_sdk::pecker_vector4::length_square, COMDAT
; _this$ = ecx

; 434  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 435  :   return (x*x+y*y+z*z+w*w);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+12]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv128[ebp]
	fld	DWORD PTR tv128[ebp]

; 436  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?length_square@pecker_vector4@pecker_sdk@@QBEMXZ ENDP	; pecker_sdk::pecker_vector4::length_square
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?length@pecker_vector4@pecker_sdk@@QBEMXZ	; pecker_sdk::pecker_vector4::length
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?length@pecker_vector4@pecker_sdk@@QBEMXZ
_TEXT	SEGMENT
tv140 = -272						; size = 4
_dw$ = -72						; size = 8
_dz$ = -56						; size = 8
_dy$ = -40						; size = 8
_dx$ = -24						; size = 8
_this$ = -8						; size = 4
?length@pecker_vector4@pecker_sdk@@QBEMXZ PROC		; pecker_sdk::pecker_vector4::length, COMDAT
; _this$ = ecx

; 439  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 440  :   Double dx = x;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	QWORD PTR _dx$[ebp]

; 441  :   Double dy = y;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+4]
	fstp	QWORD PTR _dy$[ebp]

; 442  :   Double dz = z;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fstp	QWORD PTR _dz$[ebp]

; 443  :   Double dw = w;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	fstp	QWORD PTR _dw$[ebp]

; 444  :   return (Float)(sqrt(x*x+y*y+z*z+w*w));

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+12]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv140[ebp]
	fld	DWORD PTR tv140[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4

; 445  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@pecker_vector4@pecker_sdk@@QBEMXZ ENDP		; pecker_sdk::pecker_vector4::length
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 542  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 434  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?normalize@pecker_vector4@pecker_sdk@@QAE?AU12@XZ ; pecker_sdk::pecker_vector4::normalize
; Function compile flags: /Odtp /RTCsu /ZI
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\data\pecker_vector.cpp
;	COMDAT ?normalize@pecker_vector4@pecker_sdk@@QAE?AU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?normalize@pecker_vector4@pecker_sdk@@QAE?AU12@XZ PROC	; pecker_sdk::pecker_vector4::normalize, COMDAT
; _this$ = ecx

; 448  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 449  :   return (*this /= length());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@pecker_vector4@pecker_sdk@@QBEMXZ ; pecker_sdk::pecker_vector4::length
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	??_0pecker_vector4@pecker_sdk@@QAEAAU01@M@Z ; pecker_sdk::pecker_vector4::operator/=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector4::pecker_vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 450  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?normalize@pecker_vector4@pecker_sdk@@QAE?AU12@XZ ENDP	; pecker_sdk::pecker_vector4::normalize
_TEXT	ENDS
PUBLIC	?normalized@pecker_vector4@pecker_sdk@@QBE?AU12@XZ ; pecker_sdk::pecker_vector4::normalized
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?normalized@pecker_vector4@pecker_sdk@@QBE?AU12@XZ
_TEXT	SEGMENT
_res$ = -32						; size = 16
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?normalized@pecker_vector4@pecker_sdk@@QBE?AU12@XZ PROC	; pecker_sdk::pecker_vector4::normalized, COMDAT
; _this$ = ecx

; 453  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 454  :   pecker_vector4 res(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector4::pecker_vector4

; 455  :   return (res /= length());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@pecker_vector4@pecker_sdk@@QBEMXZ ; pecker_sdk::pecker_vector4::length
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _res$[ebp]
	call	??_0pecker_vector4@pecker_sdk@@QAEAAU01@M@Z ; pecker_sdk::pecker_vector4::operator/=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0pecker_vector4@pecker_sdk@@QAE@ABU01@@Z ; pecker_sdk::pecker_vector4::pecker_vector4
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 456  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@normalized@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN5@normalized@2:
	DD	1
	DD	$LN4@normalized@2
$LN4@normalized@2:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@normalized@2
$LN3@normalized@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?normalized@pecker_vector4@pecker_sdk@@QBE?AU12@XZ ENDP	; pecker_sdk::pecker_vector4::normalized
_TEXT	ENDS
PUBLIC	?dot@pecker_vector4@pecker_sdk@@QAEMABU12@@Z	; pecker_sdk::pecker_vector4::dot
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?dot@pecker_vector4@pecker_sdk@@QAEMABU12@@Z
_TEXT	SEGMENT
tv128 = -208						; size = 4
_this$ = -8						; size = 4
_other$ = 8						; size = 4
?dot@pecker_vector4@pecker_sdk@@QAEMABU12@@Z PROC	; pecker_sdk::pecker_vector4::dot, COMDAT
; _this$ = ecx

; 459  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 460  :   return (x*other.x + y*other.y + z*other.z + w*other.w);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _other$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _other$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _other$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _other$[ebp]
	fmul	DWORD PTR [ecx+12]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv128[ebp]
	fld	DWORD PTR tv128[ebp]

; 461  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?dot@pecker_vector4@pecker_sdk@@QAEMABU12@@Z ENDP	; pecker_sdk::pecker_vector4::dot
_TEXT	ENDS
PUBLIC	?get_data@pecker_vector4@pecker_sdk@@QAEPAMXZ	; pecker_sdk::pecker_vector4::get_data
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?get_data@pecker_vector4@pecker_sdk@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_data@pecker_vector4@pecker_sdk@@QAEPAMXZ PROC	; pecker_sdk::pecker_vector4::get_data, COMDAT
; _this$ = ecx

; 464  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 465  :   return (Float*)this;

	mov	eax, DWORD PTR _this$[ebp]

; 466  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_data@pecker_vector4@pecker_sdk@@QAEPAMXZ ENDP	; pecker_sdk::pecker_vector4::get_data
_TEXT	ENDS
END
