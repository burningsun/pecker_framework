; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	F:\codes\pecker_framework_git\pecker_src\pecker_framework\test_main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??_C@_0BB@KBKCNOCI@first?51?5num?5?$DN?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0M@ODJOJAOL@first?51?5num?$AA@		; `string'
PUBLIC	??_C@_0BL@GJLAJMAI@temp_value?$DN?$CFd?0count?51?5?$DN?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_07NMPONNPH@1?5count?$AA@			; `string'
PUBLIC	??_C@_09PALELKOJ@LOG_INFO?5?$AA@		; `string'
PUBLIC	_main
EXTRN	__imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z:PROC
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp__printf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__aullshr:PROC
EXTRN	__allmul:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_0BB@KBKCNOCI@first?51?5num?5?$DN?5?$CFd?$AA@
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\test_main.cpp
CONST	SEGMENT
??_C@_0BB@KBKCNOCI@first?51?5num?5?$DN?5?$CFd?$AA@ DB 'first 1 num = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ODJOJAOL@first?51?5num?$AA@
CONST	SEGMENT
??_C@_0M@ODJOJAOL@first?51?5num?$AA@ DB 'first 1 num', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GJLAJMAI@temp_value?$DN?$CFd?0count?51?5?$DN?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BL@GJLAJMAI@temp_value?$DN?$CFd?0count?51?5?$DN?5?$CFd?$AA@ DB 'te'
	DB	'mp_value=%d,count 1 = %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07NMPONNPH@1?5count?$AA@
CONST	SEGMENT
??_C@_07NMPONNPH@1?5count?$AA@ DB '1 count', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
CONST	SEGMENT
??_C@_09PALELKOJ@LOG_INFO?5?$AA@ DB 'LOG_INFO ', 00H	; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _main
_TEXT	SEGMENT
_ibreak$ = -48						; size = 4
_temp64$ = -36						; size = 8
_mip$ = -20						; size = 4
_temp_value$ = -8					; size = 4
_main	PROC						; COMDAT

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 34   : 
; 35   : 
; 36   : 	
; 37   : 	unsigned int temp_value = 65535;

	mov	DWORD PTR _temp_value$[ebp], 65535	; 0000ffffH

; 38   : 	unsigned int mip = temp_value;

	mov	eax, DWORD PTR _temp_value$[ebp]
	mov	DWORD PTR _mip$[ebp], eax

; 39   : 	unsigned long long temp64 = 0xFF;

	mov	DWORD PTR _temp64$[ebp], 255		; 000000ffH
	mov	DWORD PTR _temp64$[ebp+4], 0

; 40   : 	temp64 *= 0x10000000;

	push	0
	push	268435456				; 10000000H
	mov	eax, DWORD PTR _temp64$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _temp64$[ebp]
	push	ecx
	call	__allmul
	mov	DWORD PTR _temp64$[ebp], eax
	mov	DWORD PTR _temp64$[ebp+4], edx

; 41   : 
; 42   : 	temp_value = temp64 & 0xFFFFFFFF;

	mov	eax, DWORD PTR _temp64$[ebp]
	mov	ecx, DWORD PTR _temp64$[ebp+4]
	and	ecx, 0
	mov	DWORD PTR _temp_value$[ebp], eax

; 43   : 	temp_value = (temp_value&0x55555555) + ((temp_value>>1)&0x55555555);     

	mov	eax, DWORD PTR _temp_value$[ebp]
	and	eax, 1431655765				; 55555555H
	mov	ecx, DWORD PTR _temp_value$[ebp]
	shr	ecx, 1
	and	ecx, 1431655765				; 55555555H
	add	eax, ecx
	mov	DWORD PTR _temp_value$[ebp], eax

; 44   : 	temp_value = (temp_value&0x33333333) + ((temp_value>>2)&0x33333333);

	mov	eax, DWORD PTR _temp_value$[ebp]
	and	eax, 858993459				; 33333333H
	mov	ecx, DWORD PTR _temp_value$[ebp]
	shr	ecx, 2
	and	ecx, 858993459				; 33333333H
	add	eax, ecx
	mov	DWORD PTR _temp_value$[ebp], eax

; 45   : 	temp_value = (temp_value&0x0f0f0f0f) + ((temp_value>>4)&0x0f0f0f0f);     

	mov	eax, DWORD PTR _temp_value$[ebp]
	and	eax, 252645135				; 0f0f0f0fH
	mov	ecx, DWORD PTR _temp_value$[ebp]
	shr	ecx, 4
	and	ecx, 252645135				; 0f0f0f0fH
	add	eax, ecx
	mov	DWORD PTR _temp_value$[ebp], eax

; 46   : 	temp_value = (temp_value&0x00ff00ff) + ((temp_value>>8)&0x00ff00ff);     

	mov	eax, DWORD PTR _temp_value$[ebp]
	and	eax, 16711935				; 00ff00ffH
	mov	ecx, DWORD PTR _temp_value$[ebp]
	shr	ecx, 8
	and	ecx, 16711935				; 00ff00ffH
	add	eax, ecx
	mov	DWORD PTR _temp_value$[ebp], eax

; 47   : 	temp_value = (temp_value&0x0000ffff) + ((temp_value>>16)&0x0000ffff); 

	mov	eax, DWORD PTR _temp_value$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _temp_value$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	add	eax, ecx
	mov	DWORD PTR _temp_value$[ebp], eax

; 48   : 	mip = temp_value;

	mov	eax, DWORD PTR _temp_value$[ebp]
	mov	DWORD PTR _mip$[ebp], eax

; 49   : 	temp_value = (temp64 >> 32) & 0xFFFFFFFF;

	mov	eax, DWORD PTR _temp64$[ebp]
	mov	edx, DWORD PTR _temp64$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	and	edx, 0
	mov	DWORD PTR _temp_value$[ebp], eax

; 50   : 	temp_value = (temp_value&0x55555555) + ((temp_value>>1)&0x55555555);     

	mov	eax, DWORD PTR _temp_value$[ebp]
	and	eax, 1431655765				; 55555555H
	mov	ecx, DWORD PTR _temp_value$[ebp]
	shr	ecx, 1
	and	ecx, 1431655765				; 55555555H
	add	eax, ecx
	mov	DWORD PTR _temp_value$[ebp], eax

; 51   : 	temp_value = (temp_value&0x33333333) + ((temp_value>>2)&0x33333333);

	mov	eax, DWORD PTR _temp_value$[ebp]
	and	eax, 858993459				; 33333333H
	mov	ecx, DWORD PTR _temp_value$[ebp]
	shr	ecx, 2
	and	ecx, 858993459				; 33333333H
	add	eax, ecx
	mov	DWORD PTR _temp_value$[ebp], eax

; 52   : 	temp_value = (temp_value&0x0f0f0f0f) + ((temp_value>>4)&0x0f0f0f0f);     

	mov	eax, DWORD PTR _temp_value$[ebp]
	and	eax, 252645135				; 0f0f0f0fH
	mov	ecx, DWORD PTR _temp_value$[ebp]
	shr	ecx, 4
	and	ecx, 252645135				; 0f0f0f0fH
	add	eax, ecx
	mov	DWORD PTR _temp_value$[ebp], eax

; 53   : 	temp_value = (temp_value&0x00ff00ff) + ((temp_value>>8)&0x00ff00ff);     

	mov	eax, DWORD PTR _temp_value$[ebp]
	and	eax, 16711935				; 00ff00ffH
	mov	ecx, DWORD PTR _temp_value$[ebp]
	shr	ecx, 8
	and	ecx, 16711935				; 00ff00ffH
	add	eax, ecx
	mov	DWORD PTR _temp_value$[ebp], eax

; 54   : 	temp_value = (temp_value&0x0000ffff) + ((temp_value>>16)&0x0000ffff); 

	mov	eax, DWORD PTR _temp_value$[ebp]
	and	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _temp_value$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	add	eax, ecx
	mov	DWORD PTR _temp_value$[ebp], eax

; 55   : 	mip += temp_value;

	mov	eax, DWORD PTR _mip$[ebp]
	add	eax, DWORD PTR _temp_value$[ebp]
	mov	DWORD PTR _mip$[ebp], eax

; 56   : 	PECKER_LOG_INFO("1 count","temp_value=%d,count 1 = %d",mip,temp_value);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_07NMPONNPH@1?5count?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _temp_value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mip$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BL@GJLAJMAI@temp_value?$DN?$CFd?0count?51?5?$DN?5?$CFd?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 57   : 
; 58   : 	 temp_value = 65535;

	mov	DWORD PTR _temp_value$[ebp], 65535	; 0000ffffH

; 59   : 	//temp_value = (temp_value&0x55555555) + ((temp_value>>1)&0x55555555);     
; 60   : 	//temp_value = (temp_value&0x33333333) + ((temp_value>>2)&0x33333333);
; 61   : 	//temp_value = (temp_value&0x0f0f0f0f) + ((temp_value>>4)&0x0f0f0f0f);     
; 62   : 	//temp_value = (temp_value&0x00ff00ff) + ((temp_value>>8)&0x00ff00ff);     
; 63   : 	//temp_value = (temp_value&0x0000ffff) + ((temp_value>>16)&0x0000ffff); 
; 64   : 	temp_value = (temp_value&0x5555) + ((temp_value>>1)&0x5555);     

	mov	eax, DWORD PTR _temp_value$[ebp]
	and	eax, 21845				; 00005555H
	mov	ecx, DWORD PTR _temp_value$[ebp]
	shr	ecx, 1
	and	ecx, 21845				; 00005555H
	add	eax, ecx
	mov	DWORD PTR _temp_value$[ebp], eax

; 65   : 	temp_value = (temp_value&0x3333) + ((temp_value>>2)&0x3333);

	mov	eax, DWORD PTR _temp_value$[ebp]
	and	eax, 13107				; 00003333H
	mov	ecx, DWORD PTR _temp_value$[ebp]
	shr	ecx, 2
	and	ecx, 13107				; 00003333H
	add	eax, ecx
	mov	DWORD PTR _temp_value$[ebp], eax

; 66   : 	temp_value = (temp_value&0x0f0f) + ((temp_value>>4)&0x0f0f);     

	mov	eax, DWORD PTR _temp_value$[ebp]
	and	eax, 3855				; 00000f0fH
	mov	ecx, DWORD PTR _temp_value$[ebp]
	shr	ecx, 4
	and	ecx, 3855				; 00000f0fH
	add	eax, ecx
	mov	DWORD PTR _temp_value$[ebp], eax

; 67   : 	temp_value = (temp_value&0x00ff) + ((temp_value>>8)&0x00ff);     

	mov	eax, DWORD PTR _temp_value$[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _temp_value$[ebp]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	add	eax, ecx
	mov	DWORD PTR _temp_value$[ebp], eax

; 68   : 	PECKER_LOG_INFO("1 count","temp_value=%d,count 1 = %d",mip,temp_value);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_07NMPONNPH@1?5count?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _temp_value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mip$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BL@GJLAJMAI@temp_value?$DN?$CFd?0count?51?5?$DN?5?$CFd?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 69   : 
; 70   : 	temp_value = mip;

	mov	eax, DWORD PTR _mip$[ebp]
	mov	DWORD PTR _temp_value$[ebp], eax

; 71   : 	//mip = 1;
; 72   : 	//if ((temp_value >> 16) == 0) {mip = mip +16; temp_value = temp_value <<16;}
; 73   : 	//if ((temp_value >> 24) == 0) {mip = mip + 8; temp_value = temp_value << 8;}
; 74   : 	//if ((temp_value >> 28) == 0) {mip = mip + 4; temp_value = temp_value << 4;}
; 75   : 	//if ((temp_value >> 30) == 0) {mip = mip + 2; temp_value = temp_value << 2;}
; 76   : 	//mip = 32 - (mip - (temp_value >> 31));
; 77   : 
; 78   : 	mip = 1;

	mov	DWORD PTR _mip$[ebp], 1

; 79   : 	if ((temp_value >> 8) == 0) {mip = mip +8; temp_value = temp_value <<8;}

	mov	eax, DWORD PTR _temp_value$[ebp]
	shr	eax, 8
	test	eax, eax
	jne	SHORT $LN3@main
	mov	eax, DWORD PTR _mip$[ebp]
	add	eax, 8
	mov	DWORD PTR _mip$[ebp], eax
	mov	eax, DWORD PTR _temp_value$[ebp]
	shl	eax, 8
	mov	DWORD PTR _temp_value$[ebp], eax
$LN3@main:

; 80   : 	if ((temp_value >> 12) == 0) {mip = mip + 4; temp_value = temp_value << 4;}

	mov	eax, DWORD PTR _temp_value$[ebp]
	shr	eax, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@main
	mov	eax, DWORD PTR _mip$[ebp]
	add	eax, 4
	mov	DWORD PTR _mip$[ebp], eax
	mov	eax, DWORD PTR _temp_value$[ebp]
	shl	eax, 4
	mov	DWORD PTR _temp_value$[ebp], eax
$LN2@main:

; 81   : 	if ((temp_value >> 14) == 0) {mip = mip + 2; temp_value = temp_value << 2;}

	mov	eax, DWORD PTR _temp_value$[ebp]
	shr	eax, 14					; 0000000eH
	test	eax, eax
	jne	SHORT $LN1@main
	mov	eax, DWORD PTR _mip$[ebp]
	add	eax, 2
	mov	DWORD PTR _mip$[ebp], eax
	mov	eax, DWORD PTR _temp_value$[ebp]
	shl	eax, 2
	mov	DWORD PTR _temp_value$[ebp], eax
$LN1@main:

; 82   : 	mip = 16 - (mip - (temp_value >> 15));

	mov	eax, DWORD PTR _temp_value$[ebp]
	shr	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _mip$[ebp]
	sub	ecx, eax
	mov	edx, 16					; 00000010H
	sub	edx, ecx
	mov	DWORD PTR _mip$[ebp], edx

; 83   : 
; 84   : 	PECKER_LOG_INFO("first 1 num","first 1 num = %d",mip);

	mov	esi, esp
	push	OFFSET ??_C@_09PALELKOJ@LOG_INFO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_0M@ODJOJAOL@first?51?5num?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR _mip$[ebp]
	push	eax
	push	OFFSET ??_C@_0BB@KBKCNOCI@first?51?5num?5?$DN?5?$CFd?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 85   : 
; 86   : 	//show_simple_window();
; 87   : 	//test_thread_runable_1();
; 88   : 	//test_thread_proc_1();
; 89   : 	//test_thread_runable();
; 90   : 	 //test_thread_proc();
; 91   : 	//tst_iterator_test_clear();
; 92   : 	//test_stream_main();
; 93   : 	 //list_test();
; 94   : 	//tst_iterator_test_value();
; 95   : 	 //tst_iterator_test();
; 96   : 	 //avlbst_iterator_test();
; 97   : 	//array_stack_pool_test_main();
; 98   : 	//test_pn9_sn();
; 99   : 	//out_pn9_sn();
; 100  : 	//test_io();
; 101  : 	//_2_avl_key_map_cmp(20);
; 102  : 	//_2_map_cmp(20);
; 103  : 	//_3_map_cmp(5);
; 104  : 	//btst_test_main();
; 105  : 	
; 106  : 	// string_share_test();
; 107  : 	//pool_alloc_main();
; 108  : 	//avl_tree_container_test_main();
; 109  : 	//avl_stl_map_cmp(10);
; 110  : 	 //avl_tree_container_test_main();
; 111  : 	//for (int i=0;i<20;++i)
; 112  : 	//{
; 113  : 	//	std :: cout << "test time "<<i<<std::endl<<std::endl;
; 114  : 	//	//avl_cmp_stress_main();
; 115  : 	//	avl_stl_map_cmp();
; 116  : 	//	std :: cout << std::endl;
; 117  : 	//}
; 118  : 	//array_test_main();
; 119  : 	//array_pool_test_main();
; 120  : 
; 121  : 	//PECKER_LOG_ENDLINE;
; 122  : 	//PECKER_LOG_INFO("breaking","........");
; 123  : 	int ibreak;
; 124  : 	std::cin >> ibreak;

	mov	esi, esp
	lea	eax, DWORD PTR _ibreak$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
	call	DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 125  : 	return 0;

	xor	eax, eax

; 126  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@main:
	DD	1
	DD	$LN7@main
$LN7@main:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN6@main
$LN6@main:
	DB	105					; 00000069H
	DB	98					; 00000062H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	107					; 0000006bH
	DB	0
_main	ENDP
_TEXT	ENDS
END
