; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	F:\codes\pecker_framework_git\pecker_src\pecker_framework\native\pecker_tick.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_dfrequency DQ	0bff0000000000000r		; -1
_DATA	ENDS
PUBLIC	__real@bff0000000000000
PUBLIC	??0pecker_tick@pecker_sdk@@QAE@XZ		; pecker_sdk::pecker_tick::pecker_tick
EXTRN	__fltused:DWORD
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT __real@bff0000000000000
; File f:\codes\pecker_framework_git\pecker_src\pecker_framework\native\pecker_tick.cpp
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0pecker_tick@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0pecker_tick@pecker_sdk@@QAE@XZ PROC			; pecker_sdk::pecker_tick::pecker_tick, COMDAT
; _this$ = ecx

; 15   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	QWORD PTR __real@bff0000000000000
	fstp	QWORD PTR [eax+8]

; 16   : 
; 17   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0pecker_tick@pecker_sdk@@QAE@XZ ENDP			; pecker_sdk::pecker_tick::pecker_tick
_TEXT	ENDS
PUBLIC	??1pecker_tick@pecker_sdk@@QAE@XZ		; pecker_sdk::pecker_tick::~pecker_tick
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1pecker_tick@pecker_sdk@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1pecker_tick@pecker_sdk@@QAE@XZ PROC			; pecker_sdk::pecker_tick::~pecker_tick, COMDAT
; _this$ = ecx

; 19   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 20   : 	_M_start_tick = -1.0;

	mov	eax, DWORD PTR _this$[ebp]
	fld	QWORD PTR __real@bff0000000000000
	fstp	QWORD PTR [eax+8]

; 21   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1pecker_tick@pecker_sdk@@QAE@XZ ENDP			; pecker_sdk::pecker_tick::~pecker_tick
_TEXT	ENDS
PUBLIC	__real@408f400000000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@c000000000000000
PUBLIC	?init@pecker_tick@pecker_sdk@@QAEJXZ		; pecker_sdk::pecker_tick::init
EXTRN	__imp__QueryPerformanceFrequency@4:PROC
EXTRN	__RTC_CheckEsp:PROC
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?init@pecker_tick@pecker_sdk@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?init@pecker_tick@pecker_sdk@@QAEJXZ PROC		; pecker_sdk::pecker_tick::init, COMDAT
; _this$ = ecx

; 27   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 28   : 	_M_start_tick = -2.0;

	mov	eax, DWORD PTR _this$[ebp]
	fld	QWORD PTR __real@c000000000000000
	fstp	QWORD PTR [eax+8]

; 29   : #ifdef ANDROID_OS
; 30   : 
; 31   : #else
; 32   : #ifdef WINDOWS_PC
; 33   : 	if (dfrequency < 0.0)

	fldz
	fcomp	QWORD PTR _dfrequency
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@init

; 34   : 	{
; 35   : 		QueryPerformanceFrequency(&_M_ticker);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__QueryPerformanceFrequency@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 36   : 		dfrequency = (Double)_M_ticker.QuadPart;

	mov	eax, DWORD PTR _this$[ebp]
	fild	QWORD PTR [eax]
	fstp	QWORD PTR _dfrequency

; 37   : 		dfrequency /= 1000.0f;

	fld	QWORD PTR _dfrequency
	fdiv	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR _dfrequency
$LN1@init:

; 38   : 	}
; 39   : #endif
; 40   : #endif
; 41   : 	return P_OK;

	xor	eax, eax

; 42   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?init@pecker_tick@pecker_sdk@@QAEJXZ ENDP		; pecker_sdk::pecker_tick::init
_TEXT	ENDS
PUBLIC	?start@pecker_tick@pecker_sdk@@QAEJXZ		; pecker_sdk::pecker_tick::start
EXTRN	__imp__QueryPerformanceCounter@4:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?start@pecker_tick@pecker_sdk@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?start@pecker_tick@pecker_sdk@@QAEJXZ PROC		; pecker_sdk::pecker_tick::start, COMDAT
; _this$ = ecx

; 44   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 	if (_M_start_tick > -1.0)

	mov	eax, DWORD PTR _this$[ebp]
	fld	QWORD PTR __real@bff0000000000000
	fcomp	QWORD PTR [eax+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@start

; 46   : 	{
; 47   : 		return P_ERR;

	mov	eax, -1
	jmp	SHORT $LN2@start
$LN1@start:

; 48   : 	}
; 49   : #ifdef ANDROID_OS
; 50   : 	HResult hresult = clock_gettime(CLOCK_MONOTONIC, &_M_ticker);
; 51   : 	_M_start_tick = (Double)_M_ticker.tv_sec * 1000.0 + (Double)(_M_ticker.tv_nsec) / 1000000.0;
; 52   : //	res = clock_gettime(CLOCK_MONOTONIC, &m_startTime);
; 53   : #else
; 54   : #ifdef WINDOWS_PC
; 55   : 	QueryPerformanceCounter(&_M_ticker);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__QueryPerformanceCounter@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 56   : 	_M_start_tick = (Double)(_M_ticker.QuadPart);

	mov	eax, DWORD PTR _this$[ebp]
	fild	QWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	QWORD PTR [ecx+8]

; 57   : #endif
; 58   : #endif
; 59   : 	return P_OK;

	xor	eax, eax
$LN2@start:

; 60   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?start@pecker_tick@pecker_sdk@@QAEJXZ ENDP		; pecker_sdk::pecker_tick::start
_TEXT	ENDS
PUBLIC	?get_microsecond@pecker_tick@pecker_sdk@@QAENXZ	; pecker_sdk::pecker_tick::get_microsecond
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?get_microsecond@pecker_tick@pecker_sdk@@QAENXZ
_TEXT	SEGMENT
_stop_tick$65738 = -24					; size = 8
_this$ = -8						; size = 4
?get_microsecond@pecker_tick@pecker_sdk@@QAENXZ PROC	; pecker_sdk::pecker_tick::get_microsecond, COMDAT
; _this$ = ecx

; 62   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 	if (_M_start_tick > 0.0)

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fcomp	QWORD PTR [eax+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@get_micros

; 64   : 	{
; 65   : #ifdef ANDROID_OS
; 66   : 		HResult hresult = clock_gettime(CLOCK_MONOTONIC, &_M_ticker);
; 67   : 		Double current_tick = (Double)_M_ticker.tv_sec * 1000.0 + (Double)(_M_ticker.tv_nsec) / 1000000.0;
; 68   : 		return (current_tick - _M_start_tick);
; 69   : #else
; 70   : #ifdef WINDOWS_PC
; 71   : 		QueryPerformanceCounter(&_M_ticker);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	DWORD PTR __imp__QueryPerformanceCounter@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 72   : 		Double stop_tick = (Double)(_M_ticker.QuadPart);

	mov	eax, DWORD PTR _this$[ebp]
	fild	QWORD PTR [eax]
	fstp	QWORD PTR _stop_tick$65738[ebp]

; 73   : 		return ((stop_tick-_M_start_tick)/dfrequency);

	mov	eax, DWORD PTR _this$[ebp]
	fld	QWORD PTR _stop_tick$65738[ebp]
	fsub	QWORD PTR [eax+8]
	fdiv	QWORD PTR _dfrequency
	jmp	SHORT $LN2@get_micros
$LN1@get_micros:

; 74   : #endif
; 75   : #endif
; 76   : 	}
; 77   : 	return 0.0;

	fldz
$LN2@get_micros:

; 78   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?get_microsecond@pecker_tick@pecker_sdk@@QAENXZ ENDP	; pecker_sdk::pecker_tick::get_microsecond
_TEXT	ENDS
PUBLIC	?stop@pecker_tick@pecker_sdk@@QAEJXZ		; pecker_sdk::pecker_tick::stop
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stop@pecker_tick@pecker_sdk@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?stop@pecker_tick@pecker_sdk@@QAEJXZ PROC		; pecker_sdk::pecker_tick::stop, COMDAT
; _this$ = ecx

; 81   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 	if (_M_start_tick > 0.0)

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fcomp	QWORD PTR [eax+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@stop

; 83   : 	{
; 84   : 		_M_start_tick = -2.0;

	mov	eax, DWORD PTR _this$[ebp]
	fld	QWORD PTR __real@c000000000000000
	fstp	QWORD PTR [eax+8]
$LN1@stop:

; 85   : 	}
; 86   : 
; 87   : 	return P_OK;

	xor	eax, eax

; 88   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?stop@pecker_tick@pecker_sdk@@QAEJXZ ENDP		; pecker_sdk::pecker_tick::stop
_TEXT	ENDS
END
